/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute/computeapi (interfaces: VirtualMachineExtensionsClientAPI)

// Package mock_virtualmachineextensions is a generated GoMock package.
package mock_virtualmachineextensions

import (
	context "context"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute"
	gomock "github.com/golang/mock/gomock"
)

// MockVirtualMachineExtensionsClientAPI is a mock of VirtualMachineExtensionsClientAPI interface
type MockVirtualMachineExtensionsClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineExtensionsClientAPIMockRecorder
}

// MockVirtualMachineExtensionsClientAPIMockRecorder is the mock recorder for MockVirtualMachineExtensionsClientAPI
type MockVirtualMachineExtensionsClientAPIMockRecorder struct {
	mock *MockVirtualMachineExtensionsClientAPI
}

// NewMockVirtualMachineExtensionsClientAPI creates a new mock instance
func NewMockVirtualMachineExtensionsClientAPI(ctrl *gomock.Controller) *MockVirtualMachineExtensionsClientAPI {
	mock := &MockVirtualMachineExtensionsClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineExtensionsClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineExtensionsClientAPI) EXPECT() *MockVirtualMachineExtensionsClientAPIMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualMachineExtensionsClientAPI) CreateOrUpdate(arg0 context.Context, arg1, arg2, arg3 string, arg4 compute.VirtualMachineExtension) (compute.VirtualMachineExtensionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method
func (m *MockVirtualMachineExtensionsClientAPI) Delete(arg0 context.Context, arg1, arg2, arg3 string) (compute.VirtualMachineExtensionsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method
func (m *MockVirtualMachineExtensionsClientAPI) Get(arg0 context.Context, arg1, arg2, arg3, arg4 string) (compute.VirtualMachineExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(compute.VirtualMachineExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// List mocks base method
func (m *MockVirtualMachineExtensionsClientAPI) List(arg0 context.Context, arg1, arg2, arg3 string) (compute.VirtualMachineExtensionsListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).List), arg0, arg1, arg2, arg3)
}

// Update mocks base method
func (m *MockVirtualMachineExtensionsClientAPI) Update(arg0 context.Context, arg1, arg2, arg3 string, arg4 compute.VirtualMachineExtensionUpdate) (compute.VirtualMachineExtensionsUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(compute.VirtualMachineExtensionsUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVirtualMachineExtensionsClientAPIMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineExtensionsClientAPI)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
