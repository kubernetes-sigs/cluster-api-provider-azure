/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute/computeapi (interfaces: VirtualMachinesClientAPI)

// Package mock_virtualmachines is a generated GoMock package.
package mock_virtualmachines

import (
	context "context"
	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVirtualMachinesClientAPI is a mock of VirtualMachinesClientAPI interface
type MockVirtualMachinesClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachinesClientAPIMockRecorder
}

// MockVirtualMachinesClientAPIMockRecorder is the mock recorder for MockVirtualMachinesClientAPI
type MockVirtualMachinesClientAPIMockRecorder struct {
	mock *MockVirtualMachinesClientAPI
}

// NewMockVirtualMachinesClientAPI creates a new mock instance
func NewMockVirtualMachinesClientAPI(ctrl *gomock.Controller) *MockVirtualMachinesClientAPI {
	mock := &MockVirtualMachinesClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualMachinesClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachinesClientAPI) EXPECT() *MockVirtualMachinesClientAPIMockRecorder {
	return m.recorder
}

// Capture mocks base method
func (m *MockVirtualMachinesClientAPI) Capture(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachineCaptureParameters) (compute.VirtualMachinesCaptureFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachinesCaptureFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture
func (mr *MockVirtualMachinesClientAPIMockRecorder) Capture(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Capture), arg0, arg1, arg2, arg3)
}

// ConvertToManagedDisks mocks base method
func (m *MockVirtualMachinesClientAPI) ConvertToManagedDisks(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesConvertToManagedDisksFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToManagedDisks", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesConvertToManagedDisksFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToManagedDisks indicates an expected call of ConvertToManagedDisks
func (mr *MockVirtualMachinesClientAPIMockRecorder) ConvertToManagedDisks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToManagedDisks", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ConvertToManagedDisks), arg0, arg1, arg2)
}

// CreateOrUpdate mocks base method
func (m *MockVirtualMachinesClientAPI) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachine) (compute.VirtualMachinesCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachinesCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualMachinesClientAPIMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Deallocate mocks base method
func (m *MockVirtualMachinesClientAPI) Deallocate(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesDeallocateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesDeallocateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deallocate indicates an expected call of Deallocate
func (mr *MockVirtualMachinesClientAPIMockRecorder) Deallocate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Deallocate), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockVirtualMachinesClientAPI) Delete(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualMachinesClientAPIMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Delete), arg0, arg1, arg2)
}

// Generalize mocks base method
func (m *MockVirtualMachinesClientAPI) Generalize(arg0 context.Context, arg1, arg2 string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generalize", arg0, arg1, arg2)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generalize indicates an expected call of Generalize
func (mr *MockVirtualMachinesClientAPIMockRecorder) Generalize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generalize", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Generalize), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockVirtualMachinesClientAPI) Get(arg0 context.Context, arg1, arg2 string, arg3 compute.InstanceViewTypes) (compute.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualMachinesClientAPIMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Get), arg0, arg1, arg2, arg3)
}

// InstanceView mocks base method
func (m *MockVirtualMachinesClientAPI) InstanceView(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachineInstanceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceView", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachineInstanceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceView indicates an expected call of InstanceView
func (mr *MockVirtualMachinesClientAPIMockRecorder) InstanceView(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceView", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).InstanceView), arg0, arg1, arg2)
}

// List mocks base method
func (m *MockVirtualMachinesClientAPI) List(arg0 context.Context, arg1 string) (compute.VirtualMachineListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(compute.VirtualMachineListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualMachinesClientAPIMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).List), arg0, arg1)
}

// ListAll mocks base method
func (m *MockVirtualMachinesClientAPI) ListAll(arg0 context.Context) (compute.VirtualMachineListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].(compute.VirtualMachineListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListAll), arg0)
}

// ListAvailableSizes mocks base method
func (m *MockVirtualMachinesClientAPI) ListAvailableSizes(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachineSizeListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableSizes", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachineSizeListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableSizes indicates an expected call of ListAvailableSizes
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListAvailableSizes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableSizes", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListAvailableSizes), arg0, arg1, arg2)
}

// ListByLocation mocks base method
func (m *MockVirtualMachinesClientAPI) ListByLocation(arg0 context.Context, arg1 string) (compute.VirtualMachineListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLocation", arg0, arg1)
	ret0, _ := ret[0].(compute.VirtualMachineListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLocation indicates an expected call of ListByLocation
func (mr *MockVirtualMachinesClientAPIMockRecorder) ListByLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLocation", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).ListByLocation), arg0, arg1)
}

// PerformMaintenance mocks base method
func (m *MockVirtualMachinesClientAPI) PerformMaintenance(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesPerformMaintenanceFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformMaintenance", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesPerformMaintenanceFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformMaintenance indicates an expected call of PerformMaintenance
func (mr *MockVirtualMachinesClientAPIMockRecorder) PerformMaintenance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformMaintenance", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).PerformMaintenance), arg0, arg1, arg2)
}

// PowerOff mocks base method
func (m *MockVirtualMachinesClientAPI) PowerOff(arg0 context.Context, arg1, arg2 string, arg3 *bool) (compute.VirtualMachinesPowerOffFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachinesPowerOffFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOff indicates an expected call of PowerOff
func (mr *MockVirtualMachinesClientAPIMockRecorder) PowerOff(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).PowerOff), arg0, arg1, arg2, arg3)
}

// Redeploy mocks base method
func (m *MockVirtualMachinesClientAPI) Redeploy(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesRedeployFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redeploy", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesRedeployFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeploy indicates an expected call of Redeploy
func (mr *MockVirtualMachinesClientAPIMockRecorder) Redeploy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeploy", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Redeploy), arg0, arg1, arg2)
}

// Reimage mocks base method
func (m *MockVirtualMachinesClientAPI) Reimage(arg0 context.Context, arg1, arg2 string, arg3 *compute.VirtualMachineReimageParameters) (compute.VirtualMachinesReimageFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachinesReimageFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reimage indicates an expected call of Reimage
func (mr *MockVirtualMachinesClientAPIMockRecorder) Reimage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Reimage), arg0, arg1, arg2, arg3)
}

// Restart mocks base method
func (m *MockVirtualMachinesClientAPI) Restart(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesRestartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesRestartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart
func (mr *MockVirtualMachinesClientAPIMockRecorder) Restart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Restart), arg0, arg1, arg2)
}

// RunCommand mocks base method
func (m *MockVirtualMachinesClientAPI) RunCommand(arg0 context.Context, arg1, arg2 string, arg3 compute.RunCommandInput) (compute.VirtualMachinesRunCommandFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachinesRunCommandFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockVirtualMachinesClientAPIMockRecorder) RunCommand(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).RunCommand), arg0, arg1, arg2, arg3)
}

// Start mocks base method
func (m *MockVirtualMachinesClientAPI) Start(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachinesStartFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachinesStartFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockVirtualMachinesClientAPIMockRecorder) Start(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Start), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockVirtualMachinesClientAPI) Update(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachineUpdate) (compute.VirtualMachinesUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(compute.VirtualMachinesUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockVirtualMachinesClientAPIMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachinesClientAPI)(nil).Update), arg0, arg1, arg2, arg3)
}
