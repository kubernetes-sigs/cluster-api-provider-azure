apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    csi-proxy: enabled
    windows: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: ${CLUSTER_IDENTITY_NAME}
  location: ${AZURE_LOCATION}
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          feature-gates: ${K8S_FEATURE_GATES:-""}
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          cluster-name: ${CLUSTER_NAME}
          v: "4"
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
      kubernetesVersion: ci/${CI_VERSION}
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - content: |
        #!/bin/bash

        set -o nounset
        set -o pipefail
        set -o errexit
        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

        # This test installs release packages or binaries that are a result of the CI and release builds.
        # It runs '... --version' commands to verify that the binaries are correctly installed
        # and finally uninstalls the packages.
        # For the release packages it tests all versions in the support skew.
        LINE_SEPARATOR="*************************************************"
        echo "$$LINE_SEPARATOR"
        CI_VERSION=${CI_VERSION}
        if [[ "$${CI_VERSION}" != "" ]]; then
          CI_DIR=/tmp/k8s-ci
          mkdir -p $$CI_DIR
          declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
          declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
          CONTAINER_EXT="tar"
          echo "* testing CI version $$CI_VERSION"
          # Check for semver
          if [[ "$${CI_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64"
            VERSION_WITHOUT_PREFIX="${CI_VERSION#v}"
            DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            # replace . with \.
            VERSION_REGEX="${VERSION_WITHOUT_PREFIX//./\\.}"
            PACKAGE_VERSION="$(apt-cache madison kubelet|grep $${VERSION_REGEX}- | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')"
            for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
              echo "* installing package: $$CI_PACKAGE $${PACKAGE_VERSION}"
              DEBIAN_FRONTEND=noninteractive apt-get install -y $$CI_PACKAGE=$$PACKAGE_VERSION
            done
          else
              CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64"
            fi
            for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
              echo "* downloading binary: $$CI_URL/$$CI_PACKAGE"
              wget "$$CI_URL/$$CI_PACKAGE" -O "$$CI_DIR/$$CI_PACKAGE"
              chmod +x "$$CI_DIR/$$CI_PACKAGE"
              mv "$$CI_DIR/$$CI_PACKAGE" "/usr/bin/$$CI_PACKAGE"
            done
            systemctl restart kubelet
          fi
          for CI_CONTAINER in "$${CONTAINERS_TO_TEST[@]}"; do
            echo "* downloading package: $$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT"
            wget "$$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT" -O "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT"
            $${SUDO} ctr -n k8s.io images import "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
            $${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" k8s.gcr.io/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
            $${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" gcr.io/k8s-staging-ci-images/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
          done
        fi
        echo "* checking binary versions"
        echo "ctr version: " $(ctr version)
        echo "kubeadm version: " $(kubeadm version -o=short)
        echo "kubectl version: " $(kubectl version --client=true --short=true)
        echo "kubelet version: " $(kubelet --version)
        echo "$$LINE_SEPARATOR"
      owner: root:root
      path: /tmp/kubeadm-bootstrap.sh
      permissions: "0744"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands: []
    preKubeadmCommands:
    - bash -c /tmp/kubeadm-bootstrap.sh
    useExperimentalRetryJoin: true
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      image:
        marketplace:
          offer: capi
          publisher: cncf-upstream
          sku: k8s-1dot18dot8-ubuntu-1804
          version: 2020.08.17
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_CONTROL_PLANE_MACHINE_TYPE}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: ${CLUSTER_NAME}-mp-0
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfig
          name: ${CLUSTER_NAME}-mp-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachinePool
        name: ${CLUSTER_NAME}-mp-0
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachinePool
metadata:
  name: ${CLUSTER_NAME}-mp-0
  namespace: default
spec:
  location: ${AZURE_LOCATION}
  strategy:
    rollingUpdate:
      deletePolicy: Oldest
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    image:
      marketplace:
        offer: capi
        publisher: cncf-upstream
        sku: k8s-1dot18dot8-ubuntu-1804
        version: 2020.08.17
    osDisk:
      diskSizeGB: 30
      managedDisk:
        storageAccountType: Premium_LRS
      osType: Linux
    sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
    vmSize: ${AZURE_NODE_MACHINE_TYPE}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-mp-0
  namespace: default
spec:
  files:
  - content: |
      #!/bin/bash

      set -o nounset
      set -o pipefail
      set -o errexit
      [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""

      # This test installs release packages or binaries that are a result of the CI and release builds.
      # It runs '... --version' commands to verify that the binaries are correctly installed
      # and finally uninstalls the packages.
      # For the release packages it tests all versions in the support skew.
      LINE_SEPARATOR="*************************************************"
      echo "$$LINE_SEPARATOR"
      CI_VERSION=${CI_VERSION}
      if [[ "$${CI_VERSION}" != "" ]]; then
        CI_DIR=/tmp/k8s-ci
        mkdir -p $$CI_DIR
        declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
        declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
        CONTAINER_EXT="tar"
        echo "* testing CI version $$CI_VERSION"
        # Check for semver
        if [[ "$${CI_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64"
          VERSION_WITHOUT_PREFIX="${CI_VERSION#v}"
          DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
          apt-get update
          # replace . with \.
          VERSION_REGEX="${VERSION_WITHOUT_PREFIX//./\\.}"
          PACKAGE_VERSION="$(apt-cache madison kubelet|grep $${VERSION_REGEX}- | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')"
          for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
            echo "* installing package: $$CI_PACKAGE $${PACKAGE_VERSION}"
            DEBIAN_FRONTEND=noninteractive apt-get install -y $$CI_PACKAGE=$$PACKAGE_VERSION
          done
        else
            CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/$${CI_VERSION}/bin/linux/amd64"
          fi
          for CI_PACKAGE in "$${PACKAGES_TO_TEST[@]}"; do
            echo "* downloading binary: $$CI_URL/$$CI_PACKAGE"
            wget "$$CI_URL/$$CI_PACKAGE" -O "$$CI_DIR/$$CI_PACKAGE"
            chmod +x "$$CI_DIR/$$CI_PACKAGE"
            mv "$$CI_DIR/$$CI_PACKAGE" "/usr/bin/$$CI_PACKAGE"
          done
          systemctl restart kubelet
        fi
        for CI_CONTAINER in "$${CONTAINERS_TO_TEST[@]}"; do
          echo "* downloading package: $$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT"
          wget "$$CI_URL/$$CI_CONTAINER.$$CONTAINER_EXT" -O "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT"
          $${SUDO} ctr -n k8s.io images import "$$CI_DIR/$$CI_CONTAINER.$$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
          $${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" k8s.gcr.io/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
          $${SUDO} ctr -n k8s.io images tag k8s.gcr.io/$$CI_CONTAINER-amd64:"$${CI_VERSION//+/_}" gcr.io/k8s-staging-ci-images/$$CI_CONTAINER:"$${CI_VERSION//+/_}"
        done
      fi
      echo "* checking binary versions"
      echo "ctr version: " $(ctr version)
      echo "kubeadm version: " $(kubeadm version -o=short)
      echo "kubectl version: " $(kubectl version --client=true --short=true)
      echo "kubelet version: " $(kubelet --version)
      echo "$$LINE_SEPARATOR"
    owner: root:root
    path: /tmp/kubeadm-bootstrap.sh
    permissions: "0744"
  - contentFrom:
      secret:
        key: worker-node-azure.json
        name: ${CLUSTER_NAME}-mp-0-azure-json
    owner: root:root
    path: /etc/kubernetes/azure.json
    permissions: "0644"
  joinConfiguration:
    nodeRegistration:
      kubeletExtraArgs:
        azure-container-registry-config: /etc/kubernetes/azure.json
        cloud-config: /etc/kubernetes/azure.json
        cloud-provider: azure
      name: '{{ ds.meta_data["local_hostname"] }}'
  preKubeadmCommands:
  - bash -c /tmp/kubeadm-bootstrap.sh
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: ${CLUSTER_IDENTITY_NAME}
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${AZURE_CLIENT_ID}
  clientSecret:
    name: ${AZURE_CLUSTER_IDENTITY_SECRET_NAME}
    namespace: ${AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE}
  tenantID: ${AZURE_TENANT_ID}
  type: ServicePrincipal
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: ${CLUSTER_NAME}-mp-win
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WINDOWS_WORKER_MACHINE_COUNT:-0}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfig
          name: ${CLUSTER_NAME}-mp-win
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachinePool
        name: ${CLUSTER_NAME}-mp-win
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachinePool
metadata:
  annotations:
    runtime: containerd
  name: ${CLUSTER_NAME}-mp-win
  namespace: default
spec:
  location: ${AZURE_LOCATION}
  template:
    image:
      marketplace:
        offer: capi-windows
        publisher: cncf-upstream
        sku: k8s-1dot23dot1-windows-2019-containerd
        version: 2021.12.16
    osDisk:
      diskSizeGB: 30
      managedDisk:
        storageAccountType: Premium_LRS
      osType: Windows
    sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
    vmSize: ${AZURE_NODE_MACHINE_TYPE}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfig
metadata:
  name: ${CLUSTER_NAME}-mp-win
  namespace: default
spec:
  files:
  - contentFrom:
      secret:
        key: worker-node-azure.json
        name: ${CLUSTER_NAME}-mp-win-azure-json
    owner: root:root
    path: c:/k/azure.json
    permissions: "0644"
  - content: Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
    path: C:/defender-exclude-calico.ps1
    permissions: "0744"
  - content: |
      $ErrorActionPreference = 'Stop'

      Stop-Service kubelet -Force

      $$CI_VERSION="${CI_VERSION}"
      if($$CI_VERSION -ne "")
      {
        $$binaries=@("kubeadm", "kubectl", "kubelet", "kube-proxy")
        $$ci_url="https://storage.googleapis.com/k8s-release-dev/ci/$$CI_VERSION/bin/windows/amd64"
        foreach ( $$binary in $$binaries )
        {
          echo "downloading binary: $$ci_url/$$binary.exe"
          curl.exe --retry 10 --retry-delay 5 "$$ci_url/$$binary.exe" --output "c:/k/$$binary.exe"
        }
      }

      # Tag it to the ci version.  The image knows how to use the copy locally with the configmap
      # that is applied at at this stage (windows-kubeproxy-ci.yaml)
      ctr.exe -n k8s.io images pull docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess
      ctr.exe -n k8s.io images tag docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess "docker.io/sigwindowstools/kube-proxy:${CI_VERSION/+/_}-calico-hostprocess"

      kubeadm.exe version -o=short
      kubectl.exe version --client=true --short=true
      kubelet.exe --version
    path: C:/replace-k8s-binaries.ps1
    permissions: "0744"
  joinConfiguration:
    nodeRegistration:
      criSocket: npipe:////./pipe/containerd-containerd
      kubeletExtraArgs:
        azure-container-registry-config: c:/k/azure.json
        cloud-config: c:/k/azure.json
        cloud-provider: azure
        feature-gates: WindowsHostProcessContainers=true
        pod-infra-container-image: mcr.microsoft.com/oss/kubernetes/pause:3.4.1
      name: '{{ ds.meta_data["local_hostname"] }}'
  postKubeadmCommands:
  - nssm set kubelet start SERVICE_AUTO_START
  - powershell C:/defender-exclude-calico.ps1
  preKubeadmCommands:
  - powershell c:/create-external-network.ps1
  - powershell C:/replace-k8s-binaries.ps1
  users:
  - groups: Administrators
    name: capi
    sshAuthorizedKeys:
    - ${AZURE_SSH_PUBLIC_KEY:=""}
