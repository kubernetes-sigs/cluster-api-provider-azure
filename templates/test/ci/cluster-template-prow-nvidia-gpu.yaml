apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni: ${CLUSTER_NAME}-calico
    gpu: nvidia
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: ${CLUSTER_IDENTITY_NAME}
  location: ${AZURE_LOCATION}
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          cluster-name: ${CLUSTER_NAME}
          v: "4"
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands: []
    preKubeadmCommands: []
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_CONTROL_PLANE_MACHINE_TYPE}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: ${CLUSTER_IDENTITY_NAME}
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: ${AZURE_CLIENT_ID}
  clientSecret:
    name: ${AZURE_CLUSTER_IDENTITY_SECRET_NAME}
    namespace: ${AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE}
  tenantID: ${AZURE_TENANT_ID}
  type: ServicePrincipal
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: ${CLUSTER_NAME}-md-0
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: ${AZURE_GPU_NODE_STORAGE_TYPE:=Standard_LRS}
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_GPU_NODE_MACHINE_TYPE:=Standard_NV6}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: worker-node-azure.json
            name: ${CLUSTER_NAME}-md-0-azure-json
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: "0644"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            azure-container-registry-config: /etc/kubernetes/azure.json
            cloud-config: /etc/kubernetes/azure.json
            cloud-provider: azure
          name: '{{ ds.meta_data["local_hostname"] }}'
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: crs-gpu-operator
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      gpu: nvidia
  resources:
  - kind: ConfigMap
    name: nvidia-clusterpolicy-crd
  - kind: ConfigMap
    name: nvidia-gpu-operator-components
  strategy: ApplyOnce
---
apiVersion: v1
data:
  clusterpolicy-crd.yaml: |
    ---
    # Source: crds/nvidia.com_clusterpolicies_crd.yaml
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.4.1
      creationTimestamp: null
      name: clusterpolicies.nvidia.com
    spec:
      group: nvidia.com
      names:
        kind: ClusterPolicy
        listKind: ClusterPolicyList
        plural: clusterpolicies
        singular: clusterpolicy
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: ClusterPolicy is the Schema for the clusterpolicies API
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: ClusterPolicySpec defines the desired state of ClusterPolicy
                  properties:
                    dcgmExporter:
                      description: DCGMExporter spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    devicePlugin:
                      description: DevicePlugin component spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    driver:
                      description: Driver component spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    gfd:
                      description: GPUFeatureDiscovery spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        discoveryIntervalSeconds:
                          description: 'Optional: Discovery Interval for GPU feature discovery
                          plugin'
                          type: integer
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        migStrategy:
                          description: 'Optional: MigStrategy for GPU feature discovery
                          plugin'
                          enum:
                            - none
                            - single
                            - mixed
                          type: string
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    operator:
                      description: Operator component spec
                      properties:
                        defaultRuntime:
                          description: Runtime defines container runtime type
                          enum:
                            - docker
                            - crio
                            - containerd
                          type: string
                        validator:
                          description: ValidatorSpec describes configuration options for
                            validation pod
                          properties:
                            image:
                              pattern: '[a-zA-Z0-9\-]+'
                              type: string
                            imagePullPolicy:
                              description: Image pull policy
                              type: string
                            imagePullSecrets:
                              description: Image pull secrets
                              items:
                                type: string
                              type: array
                            repository:
                              pattern: '[a-zA-Z0-9\.\-\/]+'
                              type: string
                            version:
                              pattern: '[a-zA-Z0-9\.-]+'
                              type: string
                          type: object
                      required:
                        - defaultRuntime
                      type: object
                    toolkit:
                      description: Toolkit component spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                  required:
                    - dcgmExporter
                    - devicePlugin
                    - driver
                    - gfd
                    - operator
                    - toolkit
                  type: object
                status:
                  description: ClusterPolicyStatus defines the observed state of ClusterPolicy
                  properties:
                    state:
                      enum:
                        - ignored
                        - ready
                        - notReady
                      type: string
                  required:
                    - state
                  type: object
              type: object
          served: true
          storage: true
          subresources:
            status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: nvidia-clusterpolicy-crd
  namespace: default
---
apiVersion: v1
data:
  gpu-operator-components.yaml: |-
    ---
    # Source: gpu-operator/templates/resources-namespace.yaml
    apiVersion: v1
    kind: Namespace
    metadata:
      name: gpu-operator-resources
      labels:
        app.kubernetes.io/component: "gpu-operator"

        openshift.io/cluster-monitoring: "true"
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/serviceaccount.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: gpu-operator-node-feature-discovery
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
    ---
    # Source: gpu-operator/templates/serviceaccount.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: gpu-operator
      namespace: default
      labels:
        app.kubernetes.io/component: "gpu-operator"
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/configmap.yaml
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: gpu-operator-node-feature-discovery
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
    data:
      nfd-worker.conf: |
        sources:
          pci:
            deviceLabelFields:
            - vendor
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/rbac.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: gpu-operator-node-feature-discovery-master
    rules:
      - apiGroups:
          - ""
        resources:
          - nodes
        # when using command line flag --resource-labels to create extended resources
        # you will need to uncomment "- nodes/status"
        # - nodes/status
        verbs:
          - get
          - patch
          - update
    ---
    # Source: gpu-operator/templates/role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: gpu-operator
      labels:
        app.kubernetes.io/component: "gpu-operator"

    rules:
      - apiGroups:
          - config.openshift.io
        resources:
          - proxies
        verbs:
          - get
      - apiGroups:
          - rbac.authorization.k8s.io
        resources:
          - roles
          - rolebindings
          - clusterroles
          - clusterrolebindings
        verbs:
          - '*'
      - apiGroups:
          - ""
        resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          - serviceaccounts
          - nodes
        verbs:
          - '*'
      - apiGroups:
          - ""
        resources:
          - namespaces
        verbs:
          - get
      - apiGroups:
          - apps
        resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
        verbs:
          - '*'
      - apiGroups:
          - monitoring.coreos.com
        resources:
          - servicemonitors
        verbs:
          - get
          - list
          - create
          - watch
      - apiGroups:
          - nvidia.com
        resources:
          - '*'
        verbs:
          - '*'
      - apiGroups:
          - scheduling.k8s.io
        resources:
          - priorityclasses
        verbs:
          - get
          - list
          - watch
          - create
      - apiGroups:
          - security.openshift.io
        resources:
          - securitycontextconstraints
        verbs:
          - '*'
      - apiGroups:
          - config.openshift.io
        resources:
          - clusterversions
        verbs:
          - get
          - list
          - watch
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/rbac.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: gpu-operator-node-feature-discovery-master
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: gpu-operator-node-feature-discovery-master
    subjects:
      - kind: ServiceAccount
        name: gpu-operator-node-feature-discovery
        namespace: default
    ---
    # Source: gpu-operator/templates/rolebinding.yaml
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: gpu-operator
      labels:
        app.kubernetes.io/component: "gpu-operator"

    subjects:
      - kind: ServiceAccount
        name: gpu-operator
        namespace: default
    roleRef:
      kind: ClusterRole
      name: gpu-operator
      apiGroup: rbac.authorization.k8s.io
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/service.yaml
    apiVersion: v1
    kind: Service
    metadata:
      name: gpu-operator-node-feature-discovery
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      type: ClusterIP
      ports:
        - name: api
          port: 8080
          protocol: TCP
          targetPort: api

      selector:
        app.kubernetes.io/component: master
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/daemonset-worker.yaml
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: gpu-operator-node-feature-discovery-worker
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/name: node-feature-discovery
          app.kubernetes.io/instance: gpu-operator
          app.kubernetes.io/component: worker
      template:
        metadata:
          labels:
            app.kubernetes.io/name: node-feature-discovery
            app.kubernetes.io/instance: gpu-operator
            app.kubernetes.io/component: worker
        spec:
          serviceAccountName: gpu-operator-node-feature-discovery
          securityContext:
            {}
          dnsPolicy: ClusterFirstWithHostNet
          containers:
            - name: node-feature-discovery-master
              securityContext:
                {}
              image: "quay.io/kubernetes_incubator/node-feature-discovery:v0.6.0"
              imagePullPolicy: IfNotPresent
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              command:
                - "nfd-worker"
              args:
                - "--sleep-interval=60s"
                - "--server=gpu-operator-node-feature-discovery:8080"
              volumeMounts:
                - name: host-boot
                  mountPath: "/host-boot"
                  readOnly: true
                - name: host-os-release
                  mountPath: "/host-etc/os-release"
                  readOnly: true
                - name: host-sys
                  mountPath: "/host-sys"
                - name: source-d
                  mountPath: "/etc/kubernetes/node-feature-discovery/source.d/"
                - name: features-d
                  mountPath: "/etc/kubernetes/node-feature-discovery/features.d/"
                - name: nfd-worker-config
                  mountPath: "/etc/kubernetes/node-feature-discovery/"
              resources:
                {}

          volumes:
            - name: host-boot
              hostPath:
                path: "/boot"
            - name: host-os-release
              hostPath:
                path: "/etc/os-release"
            - name: host-sys
              hostPath:
                path: "/sys"
            - name: source-d
              hostPath:
                path: "/etc/kubernetes/node-feature-discovery/source.d/"
            - name: features-d
              hostPath:
                path: "/etc/kubernetes/node-feature-discovery/features.d/"
            - name: nfd-worker-config
              configMap:
                name: gpu-operator-node-feature-discovery
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: ""
            - effect: NoSchedule
              key: nvidia.com/gpu
              operator: Equal
              value: present
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/deployment-master.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: gpu-operator-node-feature-discovery-master
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: node-feature-discovery
          app.kubernetes.io/instance: gpu-operator
          app.kubernetes.io/component: master
      template:
        metadata:
          labels:
            app.kubernetes.io/name: node-feature-discovery
            app.kubernetes.io/instance: gpu-operator
            app.kubernetes.io/component: master
        spec:
          serviceAccountName: gpu-operator-node-feature-discovery
          securityContext:
            {}
          containers:
            - name: node-feature-discovery-master
              securityContext:
                {}
              image: "quay.io/kubernetes_incubator/node-feature-discovery:v0.6.0"
              imagePullPolicy: IfNotPresent
              ports:
                - name: api
                  containerPort: 8080
                  protocol: TCP
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              command:
                - "nfd-master"
              args:
                - --extra-label-ns=nvidia.com
              resources:
                {}
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: node-role.kubernetes.io/master
                        operator: In
                        values:
                          - ""
                  weight: 1
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: ""
    ---
    # Source: gpu-operator/templates/operator.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: gpu-operator
      namespace: default
      labels:
        app.kubernetes.io/component: "gpu-operator"

    spec:
      replicas: 1
      selector:
        matchLabels:

          app.kubernetes.io/component: "gpu-operator"
      template:
        metadata:
          labels:

            app.kubernetes.io/component: "gpu-operator"
          annotations:
            openshift.io/scc: restricted-readonly
        spec:
          serviceAccountName: gpu-operator
          containers:
            - name: gpu-operator
              image: nvcr.io/nvidia/gpu-operator:1.6.2
              imagePullPolicy: IfNotPresent
              command: ["gpu-operator"]
              args:
                - "--zap-time-encoding=epoch"
              env:
                - name: WATCH_NAMESPACE
                  value: ""
                - name: OPERATOR_NAME
                  value: "gpu-operator"
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              volumeMounts:
                - name: host-os-release
                  mountPath: "/host-etc/os-release"
                  readOnly: true
              readinessProbe:
                exec:
                  command: ["stat", "/tmp/operator-sdk-ready"]
                initialDelaySeconds: 4
                periodSeconds: 10
                failureThreshold: 1
              ports:
                - containerPort: 60000
                  name: metrics
          volumes:
            - name: host-os-release
              hostPath:
                path: "/etc/os-release"
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: node-role.kubernetes.io/master
                        operator: In
                        values:
                          - ""
                  weight: 1
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: ""
    ---
    # Source: gpu-operator/templates/clusterpolicy.yaml
    apiVersion: nvidia.com/v1
    kind: ClusterPolicy
    metadata:
      name: cluster-policy
      namespace: default
      labels:
        app.kubernetes.io/component: "gpu-operator"

    spec:
      operator:
        defaultRuntime: containerd
        validator:
          repository: nvcr.io/nvidia/k8s
          image: cuda-sample
          version: vectoradd-cuda10.2
          imagePullPolicy: IfNotPresent
      driver:
        repository: nvcr.io/nvidia
        image: driver
        version: 460.32.03
        imagePullPolicy: IfNotPresent
        repoConfig:
          configMapName: ""
          destinationDir: ""
        licensingConfig:
          configMapName: ""
        tolerations:
          - effect: NoSchedule
            key: nvidia.com/gpu
            operator: Exists
        nodeSelector:
          nvidia.com/gpu.present: "true"
        securityContext:
          privileged: true
          seLinuxOptions:
            level: s0
      toolkit:
        repository: nvcr.io/nvidia/k8s
        image: container-toolkit
        version: 1.4.7-ubuntu18.04
        imagePullPolicy: IfNotPresent
        tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoSchedule
            key: nvidia.com/gpu
            operator: Exists
        nodeSelector:
          nvidia.com/gpu.present: "true"
        securityContext:
          privileged: true
          seLinuxOptions:
            level: s0
      devicePlugin:
        repository: nvcr.io/nvidia
        image: k8s-device-plugin
        version: v0.8.2-ubi8
        imagePullPolicy: IfNotPresent
        nodeSelector:
          nvidia.com/gpu.present: "true"
        securityContext:
          privileged: true
        args:
          - --mig-strategy=single
          - --pass-device-specs=true
          - --fail-on-init-error=true
          - --device-list-strategy=envvar
          - --nvidia-driver-root=/run/nvidia/driver
      dcgmExporter:
        repository: nvcr.io/nvidia/k8s
        image: dcgm-exporter
        version: 2.1.4-2.2.0-ubuntu20.04
        imagePullPolicy: IfNotPresent
        args:
          - -f
          - /etc/dcgm-exporter/dcp-metrics-included.csv
      gfd:
        repository: nvcr.io/nvidia
        image: gpu-feature-discovery
        version: v0.4.1
        imagePullPolicy: IfNotPresent
        nodeSelector:
          nvidia.com/gpu.present: "true"
        migStrategy: single
        discoveryIntervalSeconds: 60
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: nvidia-gpu-operator-components
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-calico
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      cni: ${CLUSTER_NAME}-calico
  resources:
  - kind: ConfigMap
    name: cni-${CLUSTER_NAME}-calico
  strategy: ApplyOnce
---
apiVersion: v1
data:
  resources: "---\n# Source: calico/templates/calico-config.yaml\n# This ConfigMap
    is used to configure a self-hosted Calico installation.\nkind: ConfigMap\napiVersion:
    v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # Typha
    is disabled.\n  typha_service_name: \"none\"\n  # Configure the backend to use.\n
    \ calico_backend: \"vxlan\"\n  # On Azure, the underlying network has an MTU of
    1400, even though the network interface will have an MTU of 1500.\n  # We set
    this value to 1350 for “physical network MTU size minus 50” since we use VXLAN,
    which uses a 50-byte header.\n  # If enabling Wireguard, this value should be
    changed to 1340 (Wireguard uses a 60-byte header).\n  # https://docs.projectcalico.org/networking/mtu#determine-mtu-size\n
    \ veth_mtu: \"1350\"\n  \n  # The CNI network configuration to install on each
    node. The special\n  # values in this config will be automatically populated.\n
    \ cni_network_config: |-\n    {\n      \"name\": \"k8s-pod-network\",\n      \"cniVersion\":
    \"0.3.1\",\n      \"plugins\": [\n        {\n          \"type\": \"calico\",\n
    \         \"log_level\": \"info\",\n          \"log_file_path\": \"/var/log/calico/cni/cni.log\",\n
    \         \"datastore_type\": \"kubernetes\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n
    \         \"mtu\": __CNI_MTU__,\n          \"ipam\": {\n              \"type\":
    \"calico-ipam\"\n          },\n          \"policy\": {\n              \"type\":
    \"k8s\"\n          },\n          \"kubernetes\": {\n              \"kubeconfig\":
    \"__KUBECONFIG_FILEPATH__\"\n          }\n        },\n        {\n          \"type\":
    \"portmap\",\n          \"snat\": true,\n          \"capabilities\": {\"portMappings\":
    true}\n        },\n        {\n          \"type\": \"bandwidth\",\n          \"capabilities\":
    {\"bandwidth\": true}\n        }\n      ]\n    }\n\n---\n# Source: calico/templates/kdd-crds.yaml\n\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: bgpconfigurations.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: BGPConfiguration\n    listKind: BGPConfigurationList\n    plural:
    bgpconfigurations\n    singular: bgpconfiguration\n  scope: Cluster\n  versions:\n
    \   - name: v1\n      schema:\n        openAPIV3Schema:\n          description:
    BGPConfiguration contains the configuration for any BGP routing.\n          properties:\n
    \           apiVersion:\n              description: 'APIVersion defines the versioned
    schema of this representation\n              of an object. Servers should convert
    recognized schemas to the latest\n              internal value, and may reject
    unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: BGPConfigurationSpec contains the
    values of the BGP configuration.\n              properties:\n                asNumber:\n
    \                 description: 'ASNumber is the default AS number used by a node.
    [Default:\n                  64512]'\n                  format: int32\n                  type:
    integer\n                communities:\n                  description: Communities
    is a list of BGP community values and their\n                    arbitrary names
    for tagging routes.\n                  items:\n                    description:
    Community contains standard or large community value\n                      and
    its name.\n                    properties:\n                      name:\n                        description:
    Name given to community value.\n                        type: string\n                      value:\n
    \                       description: Value must be of format `aa:nn` or `aa:nn:mm`.\n
    \                         For standard community use `aa:nn` format, where `aa`
    and\n                          `nn` are 16 bit number. For large community use
    `aa:nn:mm`\n                          format, where `aa`, `nn` and `mm` are 32
    bit number. Where,\n                          `aa` is an AS Number, `nn` and `mm`
    are per-AS identifier.\n                        pattern: ^(\\d+):(\\d+)$|^(\\d+):(\\d+):(\\d+)$\n
    \                       type: string\n                    type: object\n                  type:
    array\n                listenPort:\n                  description: ListenPort
    is the port where BGP protocol should listen.\n                    Defaults to
    179\n                  maximum: 65535\n                  minimum: 1\n                  type:
    integer\n                logSeverityScreen:\n                  description: 'LogSeverityScreen
    is the log severity above which logs\n                  are sent to the stdout.
    [Default: INFO]'\n                  type: string\n                nodeToNodeMeshEnabled:\n
    \                 description: 'NodeToNodeMeshEnabled sets whether full node to
    node\n                  BGP mesh is enabled. [Default: true]'\n                  type:
    boolean\n                prefixAdvertisements:\n                  description:
    PrefixAdvertisements contains per-prefix advertisement\n                    configuration.\n
    \                 items:\n                    description: PrefixAdvertisement
    configures advertisement properties\n                      for the specified CIDR.\n
    \                   properties:\n                      cidr:\n                        description:
    CIDR for which properties should be advertised.\n                        type:
    string\n                      communities:\n                        description:
    Communities can be list of either community names\n                          already
    defined in `Specs.Communities` or community value\n                          of
    format `aa:nn` or `aa:nn:mm`. For standard community use\n                          `aa:nn`
    format, where `aa` and `nn` are 16 bit number. For\n                          large
    community use `aa:nn:mm` format, where `aa`, `nn` and\n                          `mm`
    are 32 bit number. Where,`aa` is an AS Number, `nn` and\n                          `mm`
    are per-AS identifier.\n                        items:\n                          type:
    string\n                        type: array\n                    type: object\n
    \                 type: array\n                serviceClusterIPs:\n                  description:
    ServiceClusterIPs are the CIDR blocks from which service\n                    cluster
    IPs are allocated. If specified, Calico will advertise these\n                    blocks,
    as well as any cluster IPs within them.\n                  items:\n                    description:
    ServiceClusterIPBlock represents a single allowed ClusterIP\n                      CIDR
    block.\n                    properties:\n                      cidr:\n                        type:
    string\n                    type: object\n                  type: array\n                serviceExternalIPs:\n
    \                 description: ServiceExternalIPs are the CIDR blocks for Kubernetes\n
    \                   Service External IPs. Kubernetes Service ExternalIPs will
    only be\n                    advertised if they are within one of these blocks.\n
    \                 items:\n                    description: ServiceExternalIPBlock
    represents a single allowed\n                      External IP CIDR block.\n                    properties:\n
    \                     cidr:\n                        type: string\n                    type:
    object\n                  type: array\n                serviceLoadBalancerIPs:\n
    \                 description: ServiceLoadBalancerIPs are the CIDR blocks for
    Kubernetes\n                    Service LoadBalancer IPs. Kubernetes Service status.LoadBalancer.Ingress\n
    \                   IPs will only be advertised if they are within one of these
    blocks.\n                  items:\n                    description: ServiceLoadBalancerIPBlock
    represents a single allowed\n                      LoadBalancer IP CIDR block.\n
    \                   properties:\n                      cidr:\n                        type:
    string\n                    type: object\n                  type: array\n              type:
    object\n          type: object\n      served: true\n      storage: true\nstatus:\n
    \ acceptedNames:\n    kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions:
    []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n
    \ annotations:\n    controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp:
    null\n  name: bgppeers.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: BGPPeer\n    listKind: BGPPeerList\n    plural: bgppeers\n
    \   singular: bgppeer\n  scope: Cluster\n  versions:\n    - name: v1\n      schema:\n
    \       openAPIV3Schema:\n          properties:\n            apiVersion:\n              description:
    'APIVersion defines the versioned schema of this representation\n              of
    an object. Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: BGPPeerSpec contains the specification
    for a BGPPeer resource.\n              properties:\n                asNumber:\n
    \                 description: The AS Number of the peer.\n                  format:
    int32\n                  type: integer\n                keepOriginalNextHop:\n
    \                 description: Option to keep the original nexthop field when
    routes\n                    are sent to a BGP Peer. Setting \"true\" configures
    the selected BGP\n                    Peers node to use the \"next hop keep;\"
    instead of \"next hop self;\"(default)\n                    in the specific branch
    of the Node on \"bird.cfg\".\n                  type: boolean\n                maxRestartTime:\n
    \                 description: Time to allow for software restart.  When specified,
    this\n                    is configured as the graceful restart timeout.  When
    not specified,\n                    the BIRD default of 120s is used.\n                  type:
    string\n                node:\n                  description: The node name identifying
    the Calico node instance that\n                    is targeted by this peer. If
    this is not set, and no nodeSelector\n                    is specified, then this
    BGP peer selects all nodes in the cluster.\n                  type: string\n                nodeSelector:\n
    \                 description: Selector for the nodes that should have this peering.
    \ When\n                    this is set, the Node field must be empty.\n                  type:
    string\n                password:\n                  description: Optional BGP
    password for the peerings generated by this\n                    BGPPeer resource.\n
    \                 properties:\n                    secretKeyRef:\n                      description:
    Selects a key of a secret in the node pod's namespace.\n                      properties:\n
    \                       key:\n                          description: The key of
    the secret to select from.  Must be\n                            a valid secret
    key.\n                          type: string\n                        name:\n
    \                         description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n
    \                         TODO: Add other useful fields. apiVersion, kind, uid?'\n
    \                         type: string\n                        optional:\n                          description:
    Specify whether the Secret or its key must be\n                            defined\n
    \                         type: boolean\n                      required:\n                        -
    key\n                      type: object\n                  type: object\n                peerIP:\n
    \                 description: The IP address of the peer followed by an optional
    port\n                    number to peer with. If port number is given, format
    should be `[<IPv6>]:port`\n                    or `<IPv4>:<port>` for IPv4. If
    optional port number is not set,\n                    and this peer IP and ASNumber
    belongs to a calico/node with ListenPort\n                    set in BGPConfiguration,
    then we use that port to peer.\n                  type: string\n                peerSelector:\n
    \                 description: Selector for the remote nodes to peer with.  When
    this\n                    is set, the PeerIP and ASNumber fields must be empty.
    \ For each\n                    peering between the local node and selected remote
    nodes, we configure\n                    an IPv4 peering if both ends have NodeBGPSpec.IPv4Address
    specified,\n                    and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address
    specified.  The\n                    remote AS number comes from the remote node’s
    NodeBGPSpec.ASNumber,\n                    or the global default if that is not
    set.\n                  type: string\n                sourceAddress:\n                  description:
    Specifies whether and how to configure a source address\n                    for
    the peerings generated by this BGPPeer resource.  Default value\n                    \"UseNodeIP\"
    means to configure the node IP as the source address.  \"None\"\n                    means
    not to configure a source address.\n                  type: string\n              type:
    object\n          type: object\n      served: true\n      storage: true\nstatus:\n
    \ acceptedNames:\n    kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions:
    []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n
    \ annotations:\n    controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp:
    null\n  name: blockaffinities.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: BlockAffinity\n    listKind: BlockAffinityList\n    plural:
    blockaffinities\n    singular: blockaffinity\n  scope: Cluster\n  versions:\n
    \   - name: v1\n      schema:\n        openAPIV3Schema:\n          properties:\n
    \           apiVersion:\n              description: 'APIVersion defines the versioned
    schema of this representation\n              of an object. Servers should convert
    recognized schemas to the latest\n              internal value, and may reject
    unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: BlockAffinitySpec contains the specification
    for a BlockAffinity\n                resource.\n              properties:\n                cidr:\n
    \                 type: string\n                deleted:\n                  description:
    Deleted indicates that this block affinity is being deleted.\n                    This
    field is a string for compatibility with older releases that\n                    mistakenly
    treat this field as a string.\n                  type: string\n                node:\n
    \                 type: string\n                state:\n                  type:
    string\n              required:\n                - cidr\n                - deleted\n
    \               - node\n                - state\n              type: object\n
    \         type: object\n      served: true\n      storage: true\nstatus:\n  acceptedNames:\n
    \   kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: clusterinformations.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: ClusterInformation\n    listKind: ClusterInformationList\n
    \   plural: clusterinformations\n    singular: clusterinformation\n  scope: Cluster\n
    \ versions:\n    - name: v1\n      schema:\n        openAPIV3Schema:\n          description:
    ClusterInformation contains the cluster specific information.\n          properties:\n
    \           apiVersion:\n              description: 'APIVersion defines the versioned
    schema of this representation\n              of an object. Servers should convert
    recognized schemas to the latest\n              internal value, and may reject
    unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: ClusterInformationSpec contains
    the values of describing\n                the cluster.\n              properties:\n
    \               calicoVersion:\n                  description: CalicoVersion is
    the version of Calico that the cluster\n                    is running\n                  type:
    string\n                clusterGUID:\n                  description: ClusterGUID
    is the GUID of the cluster\n                  type: string\n                clusterType:\n
    \                 description: ClusterType describes the type of the cluster\n
    \                 type: string\n                datastoreReady:\n                  description:
    DatastoreReady is used during significant datastore migrations\n                    to
    signal to components such as Felix that it should wait before\n                    accessing
    the datastore.\n                  type: boolean\n                variant:\n                  description:
    Variant declares which variant of Calico should be active.\n                  type:
    string\n              type: object\n          type: object\n      served: true\n
    \     storage: true\nstatus:\n  acceptedNames:\n    kind: \"\"\n    plural: \"\"\n
    \ conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind:
    CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version:
    (devel)\n  creationTimestamp: null\n  name: felixconfigurations.crd.projectcalico.org\nspec:\n
    \ group: crd.projectcalico.org\n  names:\n    kind: FelixConfiguration\n    listKind:
    FelixConfigurationList\n    plural: felixconfigurations\n    singular: felixconfiguration\n
    \ scope: Cluster\n  versions:\n    - name: v1\n      schema:\n        openAPIV3Schema:\n
    \         description: Felix Configuration contains the configuration for Felix.\n
    \         properties:\n            apiVersion:\n              description: 'APIVersion
    defines the versioned schema of this representation\n              of an object.
    Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: FelixConfigurationSpec contains
    the values of the Felix configuration.\n              properties:\n                allowIPIPPacketsFromWorkloads:\n
    \                 description: 'AllowIPIPPacketsFromWorkloads controls whether
    Felix\n                  will add a rule to drop IPIP encapsulated traffic from
    workloads\n                  [Default: false]'\n                  type: boolean\n
    \               allowVXLANPacketsFromWorkloads:\n                  description:
    'AllowVXLANPacketsFromWorkloads controls whether Felix\n                  will
    add a rule to drop VXLAN encapsulated traffic from workloads\n                  [Default:
    false]'\n                  type: boolean\n                awsSrcDstCheck:\n                  description:
    'Set source-destination-check on AWS EC2 instances. Accepted\n                  value
    must be one of \"DoNothing\", \"Enabled\" or \"Disabled\". [Default:\n                  DoNothing]'\n
    \                 enum:\n                    - DoNothing\n                    -
    Enable\n                    - Disable\n                  type: string\n                bpfConnectTimeLoadBalancingEnabled:\n
    \                 description: 'BPFConnectTimeLoadBalancingEnabled when in BPF
    mode,\n                  controls whether Felix installs the connection-time load
    balancer.  The\n                  connect-time load balancer is required for the
    host to be able to\n                  reach Kubernetes services and it improves
    the performance of pod-to-service\n                  connections.  The only reason
    to disable it is for debugging purposes.  [Default:\n                  true]'\n
    \                 type: boolean\n                bpfDataIfacePattern:\n                  description:
    'BPFDataIfacePattern is a regular expression that controls\n                  which
    interfaces Felix should attach BPF programs to in order to\n                  catch
    traffic to/from the network.  This needs to match the interfaces\n                  that
    Calico workload traffic flows over as well as any interfaces\n                  that
    handle incoming traffic to nodeports and services from outside\n                  the
    cluster.  It should not match the workload interfaces (usually\n                  named
    cali...). [Default: ^(en.*|eth.*|tunl0$)]'\n                  type: string\n                bpfDisableUnprivileged:\n
    \                 description: 'BPFDisableUnprivileged, if enabled, Felix sets
    the kernel.unprivileged_bpf_disabled\n                  sysctl to disable unprivileged
    use of BPF.  This ensures that unprivileged\n                  users cannot access
    Calico''s BPF maps and cannot insert their own\n                  BPF programs
    to interfere with Calico''s. [Default: true]'\n                  type: boolean\n
    \               bpfEnabled:\n                  description: 'BPFEnabled, if enabled
    Felix will use the BPF dataplane.\n                  [Default: false]'\n                  type:
    boolean\n                bpfExtToServiceConnmark:\n                  description:
    'BPFExtToServiceConnmark in BPF mode, control a 32bit\n                    mark
    that is set on connections from an external client to a local\n                    service.
    This mark allows us to control how packets of that connection\n                    are
    routed within the host and how is routing intepreted by RPF\n                    check.
    [Default: 0]'\n                  type: integer\n                bpfExternalServiceMode:\n
    \                 description: 'BPFExternalServiceMode in BPF mode, controls how
    connections\n                  from outside the cluster to services (node ports
    and cluster IPs)\n                  are forwarded to remote workloads.  If set
    to \"Tunnel\" then both\n                  request and response traffic is tunneled
    to the remote node.  If\n                  set to \"DSR\", the request traffic
    is tunneled but the response traffic\n                  is sent directly from
    the remote node.  In \"DSR\" mode, the remote\n                  node appears
    to use the IP of the ingress node; this requires a\n                  permissive
    L2 network.  [Default: Tunnel]'\n                  type: string\n                bpfKubeProxyEndpointSlicesEnabled:\n
    \                 description: BPFKubeProxyEndpointSlicesEnabled in BPF mode,
    controls\n                    whether Felix's embedded kube-proxy accepts EndpointSlices
    or not.\n                  type: boolean\n                bpfKubeProxyIptablesCleanupEnabled:\n
    \                 description: 'BPFKubeProxyIptablesCleanupEnabled, if enabled
    in BPF\n                  mode, Felix will proactively clean up the upstream Kubernetes
    kube-proxy''s\n                  iptables chains.  Should only be enabled if kube-proxy
    is not running.  [Default:\n                  true]'\n                  type:
    boolean\n                bpfKubeProxyMinSyncPeriod:\n                  description:
    'BPFKubeProxyMinSyncPeriod, in BPF mode, controls the\n                  minimum
    time between updates to the dataplane for Felix''s embedded\n                  kube-proxy.
    \ Lower values give reduced set-up latency.  Higher values\n                  reduce
    Felix CPU usage by batching up more work.  [Default: 1s]'\n                  type:
    string\n                bpfLogLevel:\n                  description: 'BPFLogLevel
    controls the log level of the BPF programs\n                  when in BPF dataplane
    mode.  One of \"Off\", \"Info\", or \"Debug\".  The\n                  logs are
    emitted to the BPF trace pipe, accessible with the command\n                  `tc
    exec bpf debug`. [Default: Off].'\n                  type: string\n                chainInsertMode:\n
    \                 description: 'ChainInsertMode controls whether Felix hooks the
    kernel’s\n                  top-level iptables chains by inserting a rule at the
    top of the\n                  chain or by appending a rule at the bottom. insert
    is the safe default\n                  since it prevents Calico’s rules from being
    bypassed. If you switch\n                  to append mode, be sure that the other
    rules in the chains signal\n                  acceptance by falling through to
    the Calico rules, otherwise the\n                  Calico policy will be bypassed.
    [Default: insert]'\n                  type: string\n                dataplaneDriver:\n
    \                 type: string\n                debugDisableLogDropping:\n                  type:
    boolean\n                debugMemoryProfilePath:\n                  type: string\n
    \               debugSimulateCalcGraphHangAfter:\n                  type: string\n
    \               debugSimulateDataplaneHangAfter:\n                  type: string\n
    \               defaultEndpointToHostAction:\n                  description: 'DefaultEndpointToHostAction
    controls what happens to\n                  traffic that goes from a workload
    endpoint to the host itself (after\n                  the traffic hits the endpoint
    egress policy). By default Calico\n                  blocks traffic from workload
    endpoints to the host itself with an\n                  iptables “DROP” action.
    If you want to allow some or all traffic\n                  from endpoint to host,
    set this parameter to RETURN or ACCEPT. Use\n                  RETURN if you have
    your own rules in the iptables “INPUT” chain;\n                  Calico will insert
    its rules at the top of that chain, then “RETURN”\n                  packets to
    the “INPUT” chain once it has completed processing workload\n                  endpoint
    egress policy. Use ACCEPT to unconditionally accept packets\n                  from
    workloads after processing workload endpoint egress policy.\n                  [Default:
    Drop]'\n                  type: string\n                deviceRouteProtocol:\n
    \                 description: This defines the route protocol added to programmed
    device\n                    routes, by default this will be RTPROT_BOOT when left
    blank.\n                  type: integer\n                deviceRouteSourceAddress:\n
    \                 description: This is the source address to use on programmed
    device\n                    routes. By default the source address is left blank,
    leaving the\n                    kernel to choose the source address used.\n                  type:
    string\n                disableConntrackInvalidCheck:\n                  type:
    boolean\n                endpointReportingDelay:\n                  type: string\n
    \               endpointReportingEnabled:\n                  type: boolean\n                externalNodesList:\n
    \                 description: ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes\n
    \                   which may source tunnel traffic and have the tunneled traffic
    be\n                    accepted at calico nodes.\n                  items:\n
    \                   type: string\n                  type: array\n                failsafeInboundHostPorts:\n
    \                 description: 'FailsafeInboundHostPorts is a list of UDP/TCP
    ports\n                    and CIDRs that Felix will allow incoming traffic to
    host endpoints\n                    on irrespective of the security policy. This
    is useful to avoid\n                    accidentally cutting off a host with incorrect
    configuration. For\n                    back-compatibility, if the protocol is
    not specified, it defaults\n                    to \"tcp\". If a CIDR is not specified,
    it will allow traffic from\n                    all addresses. To disable all
    inbound host ports, use the value\n                    none. The default value
    allows ssh access and DHCP. [Default: tcp:22,\n                    udp:68, tcp:179,
    tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]'\n                  items:\n
    \                   description: ProtoPort is combination of protocol, port, and
    CIDR.\n                      Protocol and port must be specified.\n                    properties:\n
    \                     net:\n                        type: string\n                      port:\n
    \                       type: integer\n                      protocol:\n                        type:
    string\n                    required:\n                      - port\n                      -
    protocol\n                    type: object\n                  type: array\n                failsafeOutboundHostPorts:\n
    \                 description: 'FailsafeOutboundHostPorts is a list of UDP/TCP
    ports\n                    and CIDRs that Felix will allow outgoing traffic from
    host endpoints\n                    to irrespective of the security policy. This
    is useful to avoid\n                    accidentally cutting off a host with incorrect
    configuration. For\n                    back-compatibility, if the protocol is
    not specified, it defaults\n                    to \"tcp\". If a CIDR is not specified,
    it will allow traffic from\n                    all addresses. To disable all
    outbound host ports, use the value\n                    none. The default value
    opens etcd''s standard ports to ensure that\n                    Felix does not
    get cut off from etcd as well as allowing DHCP and\n                    DNS. [Default:
    tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666,\n                    tcp:6667,
    udp:53, udp:67]'\n                  items:\n                    description: ProtoPort
    is combination of protocol, port, and CIDR.\n                      Protocol and
    port must be specified.\n                    properties:\n                      net:\n
    \                       type: string\n                      port:\n                        type:
    integer\n                      protocol:\n                        type: string\n
    \                   required:\n                      - port\n                      -
    protocol\n                    type: object\n                  type: array\n                featureDetectOverride:\n
    \                 description: FeatureDetectOverride is used to override the feature\n
    \                   detection. Values are specified in a comma separated list
    with no\n                    spaces, example; \"SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=\".\n
    \                   \"true\" or \"false\" will force the feature, empty or omitted
    values\n                    are auto-detected.\n                  type: string\n
    \               genericXDPEnabled:\n                  description: 'GenericXDPEnabled
    enables Generic XDP so network cards\n                  that don''t support XDP
    offload or driver modes can use XDP. This\n                  is not recommended
    since it doesn''t provide better performance\n                  than iptables.
    [Default: false]'\n                  type: boolean\n                healthEnabled:\n
    \                 type: boolean\n                healthHost:\n                  type:
    string\n                healthPort:\n                  type: integer\n                interfaceExclude:\n
    \                 description: 'InterfaceExclude is a comma-separated list of
    interfaces\n                  that Felix should exclude when monitoring for host
    endpoints. The\n                  default value ensures that Felix ignores Kubernetes''
    IPVS dummy\n                  interface, which is used internally by kube-proxy.
    If you want to\n                  exclude multiple interface names using a single
    value, the list\n                  supports regular expressions. For regular expressions
    you must wrap\n                  the value with ''/''. For example having values
    ''/^kube/,veth1''\n                  will exclude all interfaces that begin with
    ''kube'' and also the\n                  interface ''veth1''. [Default: kube-ipvs0]'\n
    \                 type: string\n                interfacePrefix:\n                  description:
    'InterfacePrefix is the interface name prefix that identifies\n                  workload
    endpoints and so distinguishes them from host endpoint\n                  interfaces.
    Note: in environments other than bare metal, the orchestrators\n                  configure
    this appropriately. For example our Kubernetes and Docker\n                  integrations
    set the ‘cali’ value, and our OpenStack integration\n                  sets the
    ‘tap’ value. [Default: cali]'\n                  type: string\n                interfaceRefreshInterval:\n
    \                 description: InterfaceRefreshInterval is the period at which
    Felix\n                    rescans local interfaces to verify their state. The
    rescan can be\n                    disabled by setting the interval to 0.\n                  type:
    string\n                ipipEnabled:\n                  type: boolean\n                ipipMTU:\n
    \                 description: 'IPIPMTU is the MTU to set on the tunnel device.
    See\n                  Configuring MTU [Default: 1440]'\n                  type:
    integer\n                ipsetsRefreshInterval:\n                  description:
    'IpsetsRefreshInterval is the period at which Felix re-checks\n                  all
    iptables state to ensure that no other process has accidentally\n                  broken
    Calico’s rules. Set to 0 to disable iptables refresh. [Default:\n                  90s]'\n
    \                 type: string\n                iptablesBackend:\n                  description:
    IptablesBackend specifies which backend of iptables will\n                    be
    used. The default is legacy.\n                  type: string\n                iptablesFilterAllowAction:\n
    \                 type: string\n                iptablesLockFilePath:\n                  description:
    'IptablesLockFilePath is the location of the iptables\n                  lock
    file. You may need to change this if the lock file is not in\n                  its
    standard location (for example if you have mapped it into Felix’s\n                  container
    at a different path). [Default: /run/xtables.lock]'\n                  type: string\n
    \               iptablesLockProbeInterval:\n                  description: 'IptablesLockProbeInterval
    is the time that Felix will\n                  wait between attempts to acquire
    the iptables lock if it is not\n                  available. Lower values make
    Felix more responsive when the lock\n                  is contended, but use more
    CPU. [Default: 50ms]'\n                  type: string\n                iptablesLockTimeout:\n
    \                 description: 'IptablesLockTimeout is the time that Felix will
    wait\n                  for the iptables lock, or 0, to disable. To use this feature,
    Felix\n                  must share the iptables lock file with all other processes
    that\n                  also take the lock. When running Felix inside a container,
    this\n                  requires the /run directory of the host to be mounted
    into the calico/node\n                  or calico/felix container. [Default: 0s
    disabled]'\n                  type: string\n                iptablesMangleAllowAction:\n
    \                 type: string\n                iptablesMarkMask:\n                  description:
    'IptablesMarkMask is the mask that Felix selects its\n                  IPTables
    Mark bits from. Should be a 32 bit hexadecimal number with\n                  at
    least 8 bits set, none of which clash with any other mark bits\n                  in
    use on the system. [Default: 0xff000000]'\n                  format: int32\n                  type:
    integer\n                iptablesNATOutgoingInterfaceFilter:\n                  type:
    string\n                iptablesPostWriteCheckInterval:\n                  description:
    'IptablesPostWriteCheckInterval is the period after Felix\n                  has
    done a write to the dataplane that it schedules an extra read\n                  back
    in order to check the write was not clobbered by another process.\n                  This
    should only occur if another application on the system doesn’t\n                  respect
    the iptables lock. [Default: 1s]'\n                  type: string\n                iptablesRefreshInterval:\n
    \                 description: 'IptablesRefreshInterval is the period at which
    Felix\n                    re-checks the IP sets in the dataplane to ensure that
    no other process\n                    has accidentally broken Calico''s rules.
    Set to 0 to disable IP\n                    sets refresh. Note: the default for
    this value is lower than the\n                    other refresh intervals as a
    workaround for a Linux kernel bug that\n                    was fixed in kernel
    version 4.11. If you are using v4.11 or greater\n                    you may want
    to set this to, a higher value to reduce Felix CPU\n                    usage.
    [Default: 10s]'\n                  type: string\n                ipv6Support:\n
    \                 type: boolean\n                kubeNodePortRanges:\n                  description:
    'KubeNodePortRanges holds list of port ranges used for\n                  service
    node ports. Only used if felix detects kube-proxy running\n                  in
    ipvs mode. Felix uses these ranges to separate host and workload\n                  traffic.
    [Default: 30000:32767].'\n                  items:\n                    anyOf:\n
    \                     - type: integer\n                      - type: string\n
    \                   pattern: ^.*\n                    x-kubernetes-int-or-string:
    true\n                  type: array\n                logFilePath:\n                  description:
    'LogFilePath is the full path to the Felix log. Set to\n                  none
    to disable file logging. [Default: /var/log/calico/felix.log]'\n                  type:
    string\n                logPrefix:\n                  description: 'LogPrefix
    is the log prefix that Felix uses when rendering\n                  LOG rules.
    [Default: calico-packet]'\n                  type: string\n                logSeverityFile:\n
    \                 description: 'LogSeverityFile is the log severity above which
    logs\n                  are sent to the log file. [Default: Info]'\n                  type:
    string\n                logSeverityScreen:\n                  description: 'LogSeverityScreen
    is the log severity above which logs\n                  are sent to the stdout.
    [Default: Info]'\n                  type: string\n                logSeveritySys:\n
    \                 description: 'LogSeveritySys is the log severity above which
    logs\n                  are sent to the syslog. Set to None for no logging to
    syslog. [Default:\n                  Info]'\n                  type: string\n
    \               maxIpsetSize:\n                  type: integer\n                metadataAddr:\n
    \                 description: 'MetadataAddr is the IP address or domain name
    of the\n                  server that can answer VM queries for cloud-init metadata.
    In OpenStack,\n                  this corresponds to the machine running nova-api
    (or in Ubuntu,\n                  nova-api-metadata). A value of none (case insensitive)
    means that\n                  Felix should not set up any NAT rule for the metadata
    path. [Default:\n                  127.0.0.1]'\n                  type: string\n
    \               metadataPort:\n                  description: 'MetadataPort is
    the port of the metadata server. This,\n                  combined with global.MetadataAddr
    (if not ‘None’), is used to set\n                  up a NAT rule, from 169.254.169.254:80
    to MetadataAddr:MetadataPort.\n                  In most cases this should not
    need to be changed [Default: 8775].'\n                  type: integer\n                mtuIfacePattern:\n
    \                 description: MTUIfacePattern is a regular expression that controls\n
    \                   which interfaces Felix should scan in order to calculate the
    host's\n                    MTU. This should not match workload interfaces (usually
    named cali...).\n                  type: string\n                natOutgoingAddress:\n
    \                 description: NATOutgoingAddress specifies an address to use
    when performing\n                    source NAT for traffic in a natOutgoing pool
    that is leaving the\n                    network. By default the address used
    is an address on the interface\n                    the traffic is leaving on
    (ie it uses the iptables MASQUERADE target)\n                  type: string\n
    \               natPortRange:\n                  anyOf:\n                    -
    type: integer\n                    - type: string\n                  description:
    NATPortRange specifies the range of ports that is used\n                    for
    port mapping when doing outgoing NAT. When unset the default\n                    behavior
    of the network stack is used.\n                  pattern: ^.*\n                  x-kubernetes-int-or-string:
    true\n                netlinkTimeout:\n                  type: string\n                openstackRegion:\n
    \                 description: 'OpenstackRegion is the name of the region that
    a particular\n                  Felix belongs to. In a multi-region Calico/OpenStack
    deployment,\n                  this must be configured somehow for each Felix
    (here in the datamodel,\n                  or in felix.cfg or the environment
    on each compute node), and must\n                  match the [calico] openstack_region
    value configured in neutron.conf\n                  on each node. [Default: Empty]'\n
    \                 type: string\n                policySyncPathPrefix:\n                  description:
    'PolicySyncPathPrefix is used to by Felix to communicate\n                  policy
    changes to external services, like Application layer policy.\n                  [Default:
    Empty]'\n                  type: string\n                prometheusGoMetricsEnabled:\n
    \                 description: 'PrometheusGoMetricsEnabled disables Go runtime
    metrics\n                  collection, which the Prometheus client does by default,
    when set\n                  to false. This reduces the number of metrics reported,
    reducing\n                  Prometheus load. [Default: true]'\n                  type:
    boolean\n                prometheusMetricsEnabled:\n                  description:
    'PrometheusMetricsEnabled enables the Prometheus metrics\n                  server
    in Felix if set to true. [Default: false]'\n                  type: boolean\n
    \               prometheusMetricsHost:\n                  description: 'PrometheusMetricsHost
    is the host that the Prometheus\n                  metrics server should bind
    to. [Default: empty]'\n                  type: string\n                prometheusMetricsPort:\n
    \                 description: 'PrometheusMetricsPort is the TCP port that the
    Prometheus\n                  metrics server should bind to. [Default: 9091]'\n
    \                 type: integer\n                prometheusProcessMetricsEnabled:\n
    \                 description: 'PrometheusProcessMetricsEnabled disables process
    metrics\n                  collection, which the Prometheus client does by default,
    when set\n                  to false. This reduces the number of metrics reported,
    reducing\n                  Prometheus load. [Default: true]'\n                  type:
    boolean\n                removeExternalRoutes:\n                  description:
    Whether or not to remove device routes that have not\n                    been
    programmed by Felix. Disabling this will allow external applications\n                    to
    also add device routes. This is enabled by default which means\n                    we
    will remove externally added routes.\n                  type: boolean\n                reportingInterval:\n
    \                 description: 'ReportingInterval is the interval at which Felix
    reports\n                  its status into the datastore or 0 to disable. Must
    be non-zero\n                  in OpenStack deployments. [Default: 30s]'\n                  type:
    string\n                reportingTTL:\n                  description: 'ReportingTTL
    is the time-to-live setting for process-wide\n                  status reports.
    [Default: 90s]'\n                  type: string\n                routeRefreshInterval:\n
    \                 description: 'RouterefreshInterval is the period at which Felix
    re-checks\n                  the routes in the dataplane to ensure that no other
    process has\n                  accidentally broken Calico’s rules. Set to 0 to
    disable route refresh.\n                  [Default: 90s]'\n                  type:
    string\n                routeSource:\n                  description: 'RouteSource
    configures where Felix gets its routing\n                  information. - WorkloadIPs:
    use workload endpoints to construct\n                  routes. - CalicoIPAM: the
    default - use IPAM data to construct routes.'\n                  type: string\n
    \               routeTableRange:\n                  description: Calico programs
    additional Linux route tables for various\n                    purposes.  RouteTableRange
    specifies the indices of the route tables\n                    that Calico should
    use.\n                  properties:\n                    max:\n                      type:
    integer\n                    min:\n                      type: integer\n                  required:\n
    \                   - max\n                    - min\n                  type:
    object\n                serviceLoopPrevention:\n                  description:
    'When service IP advertisement is enabled, prevent routing\n                    loops
    to service IPs that are not in use, by dropping or rejecting\n                    packets
    that do not get DNAT''d by kube-proxy. Unless set to \"Disabled\",\n                    in
    which case such routing loops continue to be allowed. [Default:\n                    Drop]'\n
    \                 type: string\n                sidecarAccelerationEnabled:\n
    \                 description: 'SidecarAccelerationEnabled enables experimental
    sidecar\n                  acceleration [Default: false]'\n                  type:
    boolean\n                usageReportingEnabled:\n                  description:
    'UsageReportingEnabled reports anonymous Calico version\n                  number
    and cluster size to projectcalico.org. Logs warnings returned\n                  by
    the usage server. For example, if a significant security vulnerability\n                  has
    been discovered in the version of Calico being used. [Default:\n                  true]'\n
    \                 type: boolean\n                usageReportingInitialDelay:\n
    \                 description: 'UsageReportingInitialDelay controls the minimum
    delay\n                  before Felix makes a report. [Default: 300s]'\n                  type:
    string\n                usageReportingInterval:\n                  description:
    'UsageReportingInterval controls the interval at which\n                  Felix
    makes reports. [Default: 86400s]'\n                  type: string\n                useInternalDataplaneDriver:\n
    \                 type: boolean\n                vxlanEnabled:\n                  type:
    boolean\n                vxlanMTU:\n                  description: 'VXLANMTU is
    the MTU to set on the tunnel device. See\n                  Configuring MTU [Default:
    1440]'\n                  type: integer\n                vxlanPort:\n                  type:
    integer\n                vxlanVNI:\n                  type: integer\n                wireguardEnabled:\n
    \                 description: 'WireguardEnabled controls whether Wireguard is
    enabled.\n                  [Default: false]'\n                  type: boolean\n
    \               wireguardInterfaceName:\n                  description: 'WireguardInterfaceName
    specifies the name to use for\n                  the Wireguard interface. [Default:
    wg.calico]'\n                  type: string\n                wireguardListeningPort:\n
    \                 description: 'WireguardListeningPort controls the listening
    port used\n                  by Wireguard. [Default: 51820]'\n                  type:
    integer\n                wireguardMTU:\n                  description: 'WireguardMTU
    controls the MTU on the Wireguard interface.\n                  See Configuring
    MTU [Default: 1420]'\n                  type: integer\n                wireguardRoutingRulePriority:\n
    \                 description: 'WireguardRoutingRulePriority controls the priority
    value\n                  to use for the Wireguard routing rule. [Default: 99]'\n
    \                 type: integer\n                xdpEnabled:\n                  description:
    'XDPEnabled enables XDP acceleration for suitable untracked\n                  incoming
    deny rules. [Default: true]'\n                  type: boolean\n                xdpRefreshInterval:\n
    \                 description: 'XDPRefreshInterval is the period at which Felix
    re-checks\n                  all XDP state to ensure that no other process has
    accidentally broken\n                  Calico''s BPF maps or attached programs.
    Set to 0 to disable XDP\n                  refresh. [Default: 90s]'\n                  type:
    string\n              type: object\n          type: object\n      served: true\n
    \     storage: true\nstatus:\n  acceptedNames:\n    kind: \"\"\n    plural: \"\"\n
    \ conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind:
    CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version:
    (devel)\n  creationTimestamp: null\n  name: globalnetworkpolicies.crd.projectcalico.org\nspec:\n
    \ group: crd.projectcalico.org\n  names:\n    kind: GlobalNetworkPolicy\n    listKind:
    GlobalNetworkPolicyList\n    plural: globalnetworkpolicies\n    singular: globalnetworkpolicy\n
    \ scope: Cluster\n  versions:\n    - name: v1\n      schema:\n        openAPIV3Schema:\n
    \         properties:\n            apiVersion:\n              description: 'APIVersion
    defines the versioned schema of this representation\n              of an object.
    Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              properties:\n                applyOnForward:\n
    \                 description: ApplyOnForward indicates to apply the rules in
    this policy\n                    on forward traffic.\n                  type:
    boolean\n                doNotTrack:\n                  description: DoNotTrack
    indicates whether packets matched by the rules\n                    in this policy
    should go through the data plane's connection tracking,\n                    such
    as Linux conntrack.  If True, the rules in this policy are\n                    applied
    before any data plane connection tracking, and packets allowed\n                    by
    this policy are marked as not to be tracked.\n                  type: boolean\n
    \               egress:\n                  description: The ordered set of egress
    rules.  Each rule contains\n                    a set of packet match criteria
    and a corresponding action to apply.\n                  items:\n                    description:
    \"A Rule encapsulates a set of match criteria and an\n                    action.
    \ Both selector-based security Policy and security Profiles\n                    reference
    rules - separated out as a list of rules for both ingress\n                    and
    egress packet matching. \\n Each positive match criteria has\n                    a
    negated version, prefixed with ”Not”. All the match criteria\n                    within
    a rule must be satisfied for a packet to match. A single\n                    rule
    can contain the positive and negative version of a match\n                    and
    both must be satisfied for the rule to match.\"\n                    properties:\n
    \                     action:\n                        type: string\n                      destination:\n
    \                       description: Destination contains the match criteria that
    apply\n                          to destination entity.\n                        properties:\n
    \                         namespaceSelector:\n                            description:
    \"NamespaceSelector is an optional field that\n                            contains
    a selector expression. Only traffic that originates\n                            from
    (or terminates at) endpoints within the selected\n                            namespaces
    will be matched. When both NamespaceSelector\n                            and
    Selector are defined on the same rule, then only workload\n                            endpoints
    that are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                      http:\n                        description:
    HTTP contains match criteria that apply to HTTP\n                          requests.\n
    \                       properties:\n                          methods:\n                            description:
    Methods is an optional field that restricts\n                              the
    rule to apply only to HTTP requests that use one of\n                              the
    listed HTTP Methods (e.g. GET, PUT, etc.) Multiple\n                              methods
    are OR'd together.\n                            items:\n                              type:
    string\n                            type: array\n                          paths:\n
    \                           description: 'Paths is an optional field that restricts\n
    \                           the rule to apply to HTTP requests that use one of
    the\n                            listed HTTP Paths. Multiple paths are OR''d together.\n
    \                           e.g: - exact: /foo - prefix: /bar NOTE: Each entry
    may\n                            ONLY specify either a `exact` or a `prefix` match.
    The\n                            validator will check for it.'\n                            items:\n
    \                             description: 'HTTPPath specifies an HTTP path to
    match.\n                              It may be either of the form: exact: <path>:
    which matches\n                              the path exactly or prefix: <path-prefix>:
    which matches\n                              the path prefix'\n                              properties:\n
    \                               exact:\n                                  type:
    string\n                                prefix:\n                                  type:
    string\n                              type: object\n                            type:
    array\n                        type: object\n                      icmp:\n                        description:
    ICMP is an optional field that restricts the rule\n                          to
    apply to a specific type and code of ICMP traffic.  This\n                          should
    only be specified if the Protocol field is set to \"ICMP\"\n                          or
    \"ICMPv6\".\n                        properties:\n                          code:\n
    \                           description: Match on a specific ICMP code.  If specified,\n
    \                             the Type value must also be specified. This is a
    technical\n                              limitation imposed by the kernel’s iptables
    firewall,\n                              which Calico uses to enforce the rule.\n
    \                           type: integer\n                          type:\n                            description:
    Match on a specific ICMP type.  For example\n                              a value
    of 8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      ipVersion:\n
    \                       description: IPVersion is an optional field that restricts
    the\n                          rule to only match a specific IP version.\n                        type:
    integer\n                      metadata:\n                        description:
    Metadata contains additional information for this\n                          rule\n
    \                       properties:\n                          annotations:\n
    \                           additionalProperties:\n                              type:
    string\n                            description: Annotations is a set of key value
    pairs that\n                              give extra information about the rule\n
    \                           type: object\n                        type: object\n
    \                     notICMP:\n                        description: NotICMP is
    the negated version of the ICMP field.\n                        properties:\n
    \                         code:\n                            description: Match
    on a specific ICMP code.  If specified,\n                              the Type
    value must also be specified. This is a technical\n                              limitation
    imposed by the kernel’s iptables firewall,\n                              which
    Calico uses to enforce the rule.\n                            type: integer\n
    \                         type:\n                            description: Match
    on a specific ICMP type.  For example\n                              a value of
    8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      notProtocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: NotProtocol is the negated
    version of the Protocol\n                          field.\n                        pattern:
    ^.*\n                        x-kubernetes-int-or-string: true\n                      protocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: \"Protocol is an optional field
    that restricts the\n                        rule to only apply to traffic of a
    specific IP protocol. Required\n                        if any of the EntityRules
    contain Ports (because ports only\n                        apply to certain protocols).
    \\n Must be one of these string\n                        values: \\\"TCP\\\",
    \\\"UDP\\\", \\\"ICMP\\\", \\\"ICMPv6\\\", \\\"SCTP\\\",\n                        \\\"UDPLite\\\"
    or an integer in the range 1-255.\"\n                        pattern: ^.*\n                        x-kubernetes-int-or-string:
    true\n                      source:\n                        description: Source
    contains the match criteria that apply to\n                          source entity.\n
    \                       properties:\n                          namespaceSelector:\n
    \                           description: \"NamespaceSelector is an optional field
    that\n                            contains a selector expression. Only traffic
    that originates\n                            from (or terminates at) endpoints
    within the selected\n                            namespaces will be matched. When
    both NamespaceSelector\n                            and Selector are defined on
    the same rule, then only workload\n                            endpoints that
    are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                    required:\n
    \                     - action\n                    type: object\n                  type:
    array\n                ingress:\n                  description: The ordered set
    of ingress rules.  Each rule contains\n                    a set of packet match
    criteria and a corresponding action to apply.\n                  items:\n                    description:
    \"A Rule encapsulates a set of match criteria and an\n                    action.
    \ Both selector-based security Policy and security Profiles\n                    reference
    rules - separated out as a list of rules for both ingress\n                    and
    egress packet matching. \\n Each positive match criteria has\n                    a
    negated version, prefixed with ”Not”. All the match criteria\n                    within
    a rule must be satisfied for a packet to match. A single\n                    rule
    can contain the positive and negative version of a match\n                    and
    both must be satisfied for the rule to match.\"\n                    properties:\n
    \                     action:\n                        type: string\n                      destination:\n
    \                       description: Destination contains the match criteria that
    apply\n                          to destination entity.\n                        properties:\n
    \                         namespaceSelector:\n                            description:
    \"NamespaceSelector is an optional field that\n                            contains
    a selector expression. Only traffic that originates\n                            from
    (or terminates at) endpoints within the selected\n                            namespaces
    will be matched. When both NamespaceSelector\n                            and
    Selector are defined on the same rule, then only workload\n                            endpoints
    that are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                      http:\n                        description:
    HTTP contains match criteria that apply to HTTP\n                          requests.\n
    \                       properties:\n                          methods:\n                            description:
    Methods is an optional field that restricts\n                              the
    rule to apply only to HTTP requests that use one of\n                              the
    listed HTTP Methods (e.g. GET, PUT, etc.) Multiple\n                              methods
    are OR'd together.\n                            items:\n                              type:
    string\n                            type: array\n                          paths:\n
    \                           description: 'Paths is an optional field that restricts\n
    \                           the rule to apply to HTTP requests that use one of
    the\n                            listed HTTP Paths. Multiple paths are OR''d together.\n
    \                           e.g: - exact: /foo - prefix: /bar NOTE: Each entry
    may\n                            ONLY specify either a `exact` or a `prefix` match.
    The\n                            validator will check for it.'\n                            items:\n
    \                             description: 'HTTPPath specifies an HTTP path to
    match.\n                              It may be either of the form: exact: <path>:
    which matches\n                              the path exactly or prefix: <path-prefix>:
    which matches\n                              the path prefix'\n                              properties:\n
    \                               exact:\n                                  type:
    string\n                                prefix:\n                                  type:
    string\n                              type: object\n                            type:
    array\n                        type: object\n                      icmp:\n                        description:
    ICMP is an optional field that restricts the rule\n                          to
    apply to a specific type and code of ICMP traffic.  This\n                          should
    only be specified if the Protocol field is set to \"ICMP\"\n                          or
    \"ICMPv6\".\n                        properties:\n                          code:\n
    \                           description: Match on a specific ICMP code.  If specified,\n
    \                             the Type value must also be specified. This is a
    technical\n                              limitation imposed by the kernel’s iptables
    firewall,\n                              which Calico uses to enforce the rule.\n
    \                           type: integer\n                          type:\n                            description:
    Match on a specific ICMP type.  For example\n                              a value
    of 8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      ipVersion:\n
    \                       description: IPVersion is an optional field that restricts
    the\n                          rule to only match a specific IP version.\n                        type:
    integer\n                      metadata:\n                        description:
    Metadata contains additional information for this\n                          rule\n
    \                       properties:\n                          annotations:\n
    \                           additionalProperties:\n                              type:
    string\n                            description: Annotations is a set of key value
    pairs that\n                              give extra information about the rule\n
    \                           type: object\n                        type: object\n
    \                     notICMP:\n                        description: NotICMP is
    the negated version of the ICMP field.\n                        properties:\n
    \                         code:\n                            description: Match
    on a specific ICMP code.  If specified,\n                              the Type
    value must also be specified. This is a technical\n                              limitation
    imposed by the kernel’s iptables firewall,\n                              which
    Calico uses to enforce the rule.\n                            type: integer\n
    \                         type:\n                            description: Match
    on a specific ICMP type.  For example\n                              a value of
    8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      notProtocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: NotProtocol is the negated
    version of the Protocol\n                          field.\n                        pattern:
    ^.*\n                        x-kubernetes-int-or-string: true\n                      protocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: \"Protocol is an optional field
    that restricts the\n                        rule to only apply to traffic of a
    specific IP protocol. Required\n                        if any of the EntityRules
    contain Ports (because ports only\n                        apply to certain protocols).
    \\n Must be one of these string\n                        values: \\\"TCP\\\",
    \\\"UDP\\\", \\\"ICMP\\\", \\\"ICMPv6\\\", \\\"SCTP\\\",\n                        \\\"UDPLite\\\"
    or an integer in the range 1-255.\"\n                        pattern: ^.*\n                        x-kubernetes-int-or-string:
    true\n                      source:\n                        description: Source
    contains the match criteria that apply to\n                          source entity.\n
    \                       properties:\n                          namespaceSelector:\n
    \                           description: \"NamespaceSelector is an optional field
    that\n                            contains a selector expression. Only traffic
    that originates\n                            from (or terminates at) endpoints
    within the selected\n                            namespaces will be matched. When
    both NamespaceSelector\n                            and Selector are defined on
    the same rule, then only workload\n                            endpoints that
    are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                    required:\n
    \                     - action\n                    type: object\n                  type:
    array\n                namespaceSelector:\n                  description: NamespaceSelector
    is an optional field for an expression\n                    used to select a pod
    based on namespaces.\n                  type: string\n                order:\n
    \                 description: Order is an optional field that specifies the order
    in\n                    which the policy is applied. Policies with higher \"order\"
    are applied\n                    after those with lower order.  If the order is
    omitted, it may be\n                    considered to be \"infinite\" - i.e. the
    policy will be applied last.  Policies\n                    with identical order
    will be applied in alphanumerical order based\n                    on the Policy
    \"Name\".\n                  type: number\n                preDNAT:\n                  description:
    PreDNAT indicates to apply the rules in this policy before\n                    any
    DNAT.\n                  type: boolean\n                selector:\n                  description:
    \"The selector is an expression used to pick pick out\n                  the endpoints
    that the policy should be applied to. \\n Selector\n                  expressions
    follow this syntax: \\n \\tlabel == \\\"string_literal\\\"\n                  \\
    ->  comparison, e.g. my_label == \\\"foo bar\\\" \\tlabel != \\\"string_literal\\\"\n
    \                 \\  ->  not equal; also matches if label is not present \\tlabel
    in\n                  { \\\"a\\\", \\\"b\\\", \\\"c\\\", ... }  ->  true if the
    value of label X is\n                  one of \\\"a\\\", \\\"b\\\", \\\"c\\\"
    \\tlabel not in { \\\"a\\\", \\\"b\\\", \\\"c\\\",\n                  ... }  ->
    \ true if the value of label X is not one of \\\"a\\\", \\\"b\\\",\n                  \\\"c\\\"
    \\thas(label_name)  -> True if that label is present \\t! expr\n                  ->
    negation of expr \\texpr && expr  -> Short-circuit and \\texpr\n                  ||
    expr  -> Short-circuit or \\t( expr ) -> parens for grouping \\tall()\n                  or
    the empty selector -> matches all endpoints. \\n Label names are\n                  allowed
    to contain alphanumerics, -, _ and /. String literals are\n                  more
    permissive but they do not support escape characters. \\n Examples\n                  (with
    made-up labels): \\n \\ttype == \\\"webserver\\\" && deployment\n                  ==
    \\\"prod\\\" \\ttype in {\\\"frontend\\\", \\\"backend\\\"} \\tdeployment !=\n
    \                 \\\"dev\\\" \\t! has(label_name)\"\n                  type:
    string\n                serviceAccountSelector:\n                  description:
    ServiceAccountSelector is an optional field for an expression\n                    used
    to select a pod based on service accounts.\n                  type: string\n                types:\n
    \                 description: \"Types indicates whether this policy applies to
    ingress,\n                  or to egress, or to both.  When not explicitly specified
    (and so\n                  the value on creation is empty or nil), Calico defaults
    Types according\n                  to what Ingress and Egress rules are present
    in the policy.  The\n                  default is: \\n - [ PolicyTypeIngress ],
    if there are no Egress rules\n                  (including the case where there
    are   also no Ingress rules) \\n\n                  - [ PolicyTypeEgress ], if
    there are Egress rules but no Ingress\n                  rules \\n - [ PolicyTypeIngress,
    PolicyTypeEgress ], if there are\n                  both Ingress and Egress rules.
    \\n When the policy is read back again,\n                  Types will always be
    one of these values, never empty or nil.\"\n                  items:\n                    description:
    PolicyType enumerates the possible values of the PolicySpec\n                      Types
    field.\n                    type: string\n                  type: array\n              type:
    object\n          type: object\n      served: true\n      storage: true\nstatus:\n
    \ acceptedNames:\n    kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions:
    []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n
    \ annotations:\n    controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp:
    null\n  name: globalnetworksets.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: GlobalNetworkSet\n    listKind: GlobalNetworkSetList\n    plural:
    globalnetworksets\n    singular: globalnetworkset\n  scope: Cluster\n  versions:\n
    \   - name: v1\n      schema:\n        openAPIV3Schema:\n          description:
    GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs\n            that
    share labels to allow rules to refer to them via selectors.  The labels\n            of
    GlobalNetworkSet are not namespaced.\n          properties:\n            apiVersion:\n
    \             description: 'APIVersion defines the versioned schema of this representation\n
    \             of an object. Servers should convert recognized schemas to the latest\n
    \             internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: GlobalNetworkSetSpec contains the
    specification for a NetworkSet\n                resource.\n              properties:\n
    \               nets:\n                  description: The list of IP networks
    that belong to this set.\n                  items:\n                    type:
    string\n                  type: array\n              type: object\n          type:
    object\n      served: true\n      storage: true\nstatus:\n  acceptedNames:\n    kind:
    \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: hostendpoints.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: HostEndpoint\n    listKind: HostEndpointList\n    plural:
    hostendpoints\n    singular: hostendpoint\n  scope: Cluster\n  versions:\n    -
    name: v1\n      schema:\n        openAPIV3Schema:\n          properties:\n            apiVersion:\n
    \             description: 'APIVersion defines the versioned schema of this representation\n
    \             of an object. Servers should convert recognized schemas to the latest\n
    \             internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: HostEndpointSpec contains the specification
    for a HostEndpoint\n                resource.\n              properties:\n                expectedIPs:\n
    \                 description: \"The expected IP addresses (IPv4 and IPv6) of
    the endpoint.\n                  If \\\"InterfaceName\\\" is not present, Calico
    will look for an interface\n                  matching any of the IPs in the list
    and apply policy to that. Note:\n                  \\tWhen using the selector
    match criteria in an ingress or egress\n                  security Policy \\tor
    Profile, Calico converts the selector into\n                  a set of IP addresses.
    For host \\tendpoints, the ExpectedIPs field\n                  is used for that
    purpose. (If only the interface \\tname is specified,\n                  Calico
    does not learn the IPs of the interface for use in match\n                  \\tcriteria.)\"\n
    \                 items:\n                    type: string\n                  type:
    array\n                interfaceName:\n                  description: \"Either
    \\\"*\\\", or the name of a specific Linux interface\n                  to apply
    policy to; or empty.  \\\"*\\\" indicates that this HostEndpoint\n                  governs
    all traffic to, from or through the default network namespace\n                  of
    the host named by the \\\"Node\\\" field; entering and leaving that\n                  namespace
    via any interface, including those from/to non-host-networked\n                  local
    workloads. \\n If InterfaceName is not \\\"*\\\", this HostEndpoint\n                  only
    governs traffic that enters or leaves the host through the\n                  specific
    interface named by InterfaceName, or - when InterfaceName\n                  is
    empty - through the specific interface that has one of the IPs\n                  in
    ExpectedIPs. Therefore, when InterfaceName is empty, at least\n                  one
    expected IP must be specified.  Only external interfaces (such\n                  as
    “eth0”) are supported here; it isn't possible for a HostEndpoint\n                  to
    protect traffic through a specific local workload interface.\n                  \\n
    Note: Only some kinds of policy are implemented for \\\"*\\\" HostEndpoints;\n
    \                 initially just pre-DNAT policy.  Please check Calico documentation\n
    \                 for the latest position.\"\n                  type: string\n
    \               node:\n                  description: The node name identifying
    the Calico node instance.\n                  type: string\n                ports:\n
    \                 description: Ports contains the endpoint's named ports, which
    may\n                    be referenced in security policy rules.\n                  items:\n
    \                   properties:\n                      name:\n                        type:
    string\n                      port:\n                        type: integer\n                      protocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        pattern: ^.*\n                        x-kubernetes-int-or-string:
    true\n                    required:\n                      - name\n                      -
    port\n                      - protocol\n                    type: object\n                  type:
    array\n                profiles:\n                  description: A list of identifiers
    of security Profile objects that\n                    apply to this endpoint.
    Each profile is applied in the order that\n                    they appear in
    this list.  Profile rules are applied after the selector-based\n                    security
    policy.\n                  items:\n                    type: string\n                  type:
    array\n              type: object\n          type: object\n      served: true\n
    \     storage: true\nstatus:\n  acceptedNames:\n    kind: \"\"\n    plural: \"\"\n
    \ conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind:
    CustomResourceDefinition\nmetadata:\n  annotations:\n    controller-gen.kubebuilder.io/version:
    (devel)\n  creationTimestamp: null\n  name: ipamblocks.crd.projectcalico.org\nspec:\n
    \ group: crd.projectcalico.org\n  names:\n    kind: IPAMBlock\n    listKind: IPAMBlockList\n
    \   plural: ipamblocks\n    singular: ipamblock\n  scope: Cluster\n  versions:\n
    \   - name: v1\n      schema:\n        openAPIV3Schema:\n          properties:\n
    \           apiVersion:\n              description: 'APIVersion defines the versioned
    schema of this representation\n              of an object. Servers should convert
    recognized schemas to the latest\n              internal value, and may reject
    unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: IPAMBlockSpec contains the specification
    for an IPAMBlock\n                resource.\n              properties:\n                affinity:\n
    \                 type: string\n                allocations:\n                  items:\n
    \                   type: integer\n                    # TODO: This nullable is
    manually added in. We should update controller-gen\n                    # to handle
    []*int properly itself.\n                    nullable: true\n                  type:
    array\n                attributes:\n                  items:\n                    properties:\n
    \                     handle_id:\n                        type: string\n                      secondary:\n
    \                       additionalProperties:\n                          type:
    string\n                        type: object\n                    type: object\n
    \                 type: array\n                cidr:\n                  type:
    string\n                deleted:\n                  type: boolean\n                strictAffinity:\n
    \                 type: boolean\n                unallocated:\n                  items:\n
    \                   type: integer\n                  type: array\n              required:\n
    \               - allocations\n                - attributes\n                -
    cidr\n                - strictAffinity\n                - unallocated\n              type:
    object\n          type: object\n      served: true\n      storage: true\nstatus:\n
    \ acceptedNames:\n    kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions:
    []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n
    \ annotations:\n    controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp:
    null\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: IPAMConfig\n    listKind: IPAMConfigList\n    plural: ipamconfigs\n
    \   singular: ipamconfig\n  scope: Cluster\n  versions:\n    - name: v1\n      schema:\n
    \       openAPIV3Schema:\n          properties:\n            apiVersion:\n              description:
    'APIVersion defines the versioned schema of this representation\n              of
    an object. Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: IPAMConfigSpec contains the specification
    for an IPAMConfig\n                resource.\n              properties:\n                autoAllocateBlocks:\n
    \                 type: boolean\n                maxBlocksPerHost:\n                  description:
    MaxBlocksPerHost, if non-zero, is the max number of blocks\n                    that
    can be affine to each host.\n                  type: integer\n                strictAffinity:\n
    \                 type: boolean\n              required:\n                - autoAllocateBlocks\n
    \               - strictAffinity\n              type: object\n          type:
    object\n      served: true\n      storage: true\nstatus:\n  acceptedNames:\n    kind:
    \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: ipamhandles.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: IPAMHandle\n    listKind: IPAMHandleList\n    plural: ipamhandles\n
    \   singular: ipamhandle\n  scope: Cluster\n  versions:\n    - name: v1\n      schema:\n
    \       openAPIV3Schema:\n          properties:\n            apiVersion:\n              description:
    'APIVersion defines the versioned schema of this representation\n              of
    an object. Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: IPAMHandleSpec contains the specification
    for an IPAMHandle\n                resource.\n              properties:\n                block:\n
    \                 additionalProperties:\n                    type: integer\n                  type:
    object\n                deleted:\n                  type: boolean\n                handleID:\n
    \                 type: string\n              required:\n                - block\n
    \               - handleID\n              type: object\n          type: object\n
    \     served: true\n      storage: true\nstatus:\n  acceptedNames:\n    kind:
    \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: ippools.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: IPPool\n    listKind: IPPoolList\n    plural: ippools\n    singular:
    ippool\n  scope: Cluster\n  versions:\n    - name: v1\n      schema:\n        openAPIV3Schema:\n
    \         properties:\n            apiVersion:\n              description: 'APIVersion
    defines the versioned schema of this representation\n              of an object.
    Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: IPPoolSpec contains the specification
    for an IPPool resource.\n              properties:\n                blockSize:\n
    \                 description: The block size to use for IP address assignments
    from\n                    this pool. Defaults to 26 for IPv4 and 112 for IPv6.\n
    \                 type: integer\n                cidr:\n                  description:
    The pool CIDR.\n                  type: string\n                disabled:\n                  description:
    When disabled is true, Calico IPAM will not assign addresses\n                    from
    this pool.\n                  type: boolean\n                ipip:\n                  description:
    'Deprecated: this field is only used for APIv1 backwards\n                  compatibility.
    Setting this field is not allowed, this field is\n                  for internal
    use only.'\n                  properties:\n                    enabled:\n                      description:
    When enabled is true, ipip tunneling will be used\n                        to
    deliver packets to destinations within this pool.\n                      type:
    boolean\n                    mode:\n                      description: The IPIP
    mode.  This can be one of \"always\" or \"cross-subnet\".  A\n                        mode
    of \"always\" will also use IPIP tunneling for routing to\n                        destination
    IP addresses within this pool.  A mode of \"cross-subnet\"\n                        will
    only use IPIP tunneling when the destination node is on\n                        a
    different subnet to the originating node.  The default value\n                        (if
    not specified) is \"always\".\n                      type: string\n                  type:
    object\n                ipipMode:\n                  description: Contains configuration
    for IPIP tunneling for this pool.\n                    If not specified, then
    this is defaulted to \"Never\" (i.e. IPIP tunneling\n                    is disabled).\n
    \                 type: string\n                nat-outgoing:\n                  description:
    'Deprecated: this field is only used for APIv1 backwards\n                  compatibility.
    Setting this field is not allowed, this field is\n                  for internal
    use only.'\n                  type: boolean\n                natOutgoing:\n                  description:
    When nat-outgoing is true, packets sent from Calico networked\n                    containers
    in this pool to destinations outside of this pool will\n                    be
    masqueraded.\n                  type: boolean\n                nodeSelector:\n
    \                 description: Allows IPPool to allocate for a specific node by
    label\n                    selector.\n                  type: string\n                vxlanMode:\n
    \                 description: Contains configuration for VXLAN tunneling for
    this pool.\n                    If not specified, then this is defaulted to \"Never\"
    (i.e. VXLAN\n                    tunneling is disabled).\n                  type:
    string\n              required:\n                - cidr\n              type: object\n
    \         type: object\n      served: true\n      storage: true\nstatus:\n  acceptedNames:\n
    \   kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: kubecontrollersconfigurations.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: KubeControllersConfiguration\n    listKind: KubeControllersConfigurationList\n
    \   plural: kubecontrollersconfigurations\n    singular: kubecontrollersconfiguration\n
    \ scope: Cluster\n  versions:\n    - name: v1\n      schema:\n        openAPIV3Schema:\n
    \         properties:\n            apiVersion:\n              description: 'APIVersion
    defines the versioned schema of this representation\n              of an object.
    Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: KubeControllersConfigurationSpec
    contains the values of the\n                Kubernetes controllers configuration.\n
    \             properties:\n                controllers:\n                  description:
    Controllers enables and configures individual Kubernetes\n                    controllers\n
    \                 properties:\n                    namespace:\n                      description:
    Namespace enables and configures the namespace controller.\n                        Enabled
    by default, set to nil to disable.\n                      properties:\n                        reconcilerPeriod:\n
    \                         description: 'ReconcilerPeriod is the period to perform
    reconciliation\n                          with the Calico datastore. [Default:
    5m]'\n                          type: string\n                      type: object\n
    \                   node:\n                      description: Node enables and
    configures the node controller.\n                        Enabled by default, set
    to nil to disable.\n                      properties:\n                        hostEndpoint:\n
    \                         description: HostEndpoint controls syncing nodes to
    host endpoints.\n                            Disabled by default, set to nil to
    disable.\n                          properties:\n                            autoCreate:\n
    \                             description: 'AutoCreate enables automatic creation
    of\n                              host endpoints for every node. [Default: Disabled]'\n
    \                             type: string\n                          type: object\n
    \                       reconcilerPeriod:\n                          description:
    'ReconcilerPeriod is the period to perform reconciliation\n                          with
    the Calico datastore. [Default: 5m]'\n                          type: string\n
    \                       syncLabels:\n                          description: 'SyncLabels
    controls whether to copy Kubernetes\n                          node labels to
    Calico nodes. [Default: Enabled]'\n                          type: string\n                      type:
    object\n                    policy:\n                      description: Policy
    enables and configures the policy controller.\n                        Enabled
    by default, set to nil to disable.\n                      properties:\n                        reconcilerPeriod:\n
    \                         description: 'ReconcilerPeriod is the period to perform
    reconciliation\n                          with the Calico datastore. [Default:
    5m]'\n                          type: string\n                      type: object\n
    \                   serviceAccount:\n                      description: ServiceAccount
    enables and configures the service\n                        account controller.
    Enabled by default, set to nil to disable.\n                      properties:\n
    \                       reconcilerPeriod:\n                          description:
    'ReconcilerPeriod is the period to perform reconciliation\n                          with
    the Calico datastore. [Default: 5m]'\n                          type: string\n
    \                     type: object\n                    workloadEndpoint:\n                      description:
    WorkloadEndpoint enables and configures the workload\n                        endpoint
    controller. Enabled by default, set to nil to disable.\n                      properties:\n
    \                       reconcilerPeriod:\n                          description:
    'ReconcilerPeriod is the period to perform reconciliation\n                          with
    the Calico datastore. [Default: 5m]'\n                          type: string\n
    \                     type: object\n                  type: object\n                etcdV3CompactionPeriod:\n
    \                 description: 'EtcdV3CompactionPeriod is the period between etcdv3\n
    \                 compaction requests. Set to 0 to disable. [Default: 10m]'\n
    \                 type: string\n                healthChecks:\n                  description:
    'HealthChecks enables or disables support for health\n                  checks
    [Default: Enabled]'\n                  type: string\n                logSeverityScreen:\n
    \                 description: 'LogSeverityScreen is the log severity above which
    logs\n                  are sent to the stdout. [Default: Info]'\n                  type:
    string\n                prometheusMetricsPort:\n                  description:
    'PrometheusMetricsPort is the TCP port that the Prometheus\n                    metrics
    server should bind to. Set to 0 to disable. [Default: 9094]'\n                  type:
    integer\n              required:\n                - controllers\n              type:
    object\n            status:\n              description: KubeControllersConfigurationStatus
    represents the status\n                of the configuration. It's useful for admins
    to be able to see the actual\n                config that was applied, which can
    be modified by environment variables\n                on the kube-controllers
    process.\n              properties:\n                environmentVars:\n                  additionalProperties:\n
    \                   type: string\n                  description: EnvironmentVars
    contains the environment variables on\n                    the kube-controllers
    that influenced the RunningConfig.\n                  type: object\n                runningConfig:\n
    \                 description: RunningConfig contains the effective config that
    is running\n                    in the kube-controllers pod, after merging the
    API resource with\n                    any environment variables.\n                  properties:\n
    \                   controllers:\n                      description: Controllers
    enables and configures individual Kubernetes\n                        controllers\n
    \                     properties:\n                        namespace:\n                          description:
    Namespace enables and configures the namespace\n                            controller.
    Enabled by default, set to nil to disable.\n                          properties:\n
    \                           reconcilerPeriod:\n                              description:
    'ReconcilerPeriod is the period to perform\n                              reconciliation
    with the Calico datastore. [Default:\n                              5m]'\n                              type:
    string\n                          type: object\n                        node:\n
    \                         description: Node enables and configures the node controller.\n
    \                           Enabled by default, set to nil to disable.\n                          properties:\n
    \                           hostEndpoint:\n                              description:
    HostEndpoint controls syncing nodes to host\n                                endpoints.
    Disabled by default, set to nil to disable.\n                              properties:\n
    \                               autoCreate:\n                                  description:
    'AutoCreate enables automatic creation\n                                  of host
    endpoints for every node. [Default: Disabled]'\n                                  type:
    string\n                              type: object\n                            leakGracePeriod:\n
    \                             description: 'LeakGracePeriod is the period used
    by the\n                                controller to determine if an IP address
    has been leaked.\n                                Set to 0 to disable IP garbage
    collection. [Default:\n                                15m]'\n                              type:
    string\n                            reconcilerPeriod:\n                              description:
    'ReconcilerPeriod is the period to perform\n                              reconciliation
    with the Calico datastore. [Default:\n                              5m]'\n                              type:
    string\n                            syncLabels:\n                              description:
    'SyncLabels controls whether to copy Kubernetes\n                              node
    labels to Calico nodes. [Default: Enabled]'\n                              type:
    string\n                          type: object\n                        policy:\n
    \                         description: Policy enables and configures the policy
    controller.\n                            Enabled by default, set to nil to disable.\n
    \                         properties:\n                            reconcilerPeriod:\n
    \                             description: 'ReconcilerPeriod is the period to
    perform\n                              reconciliation with the Calico datastore.
    [Default:\n                              5m]'\n                              type:
    string\n                          type: object\n                        serviceAccount:\n
    \                         description: ServiceAccount enables and configures the
    service\n                            account controller. Enabled by default, set
    to nil to disable.\n                          properties:\n                            reconcilerPeriod:\n
    \                             description: 'ReconcilerPeriod is the period to
    perform\n                              reconciliation with the Calico datastore.
    [Default:\n                              5m]'\n                              type:
    string\n                          type: object\n                        workloadEndpoint:\n
    \                         description: WorkloadEndpoint enables and configures
    the workload\n                            endpoint controller. Enabled by default,
    set to nil to disable.\n                          properties:\n                            reconcilerPeriod:\n
    \                             description: 'ReconcilerPeriod is the period to
    perform\n                              reconciliation with the Calico datastore.
    [Default:\n                              5m]'\n                              type:
    string\n                          type: object\n                      type: object\n
    \                   etcdV3CompactionPeriod:\n                      description:
    'EtcdV3CompactionPeriod is the period between etcdv3\n                      compaction
    requests. Set to 0 to disable. [Default: 10m]'\n                      type: string\n
    \                   healthChecks:\n                      description: 'HealthChecks
    enables or disables support for health\n                      checks [Default:
    Enabled]'\n                      type: string\n                    logSeverityScreen:\n
    \                     description: 'LogSeverityScreen is the log severity above
    which\n                      logs are sent to the stdout. [Default: Info]'\n                      type:
    string\n                    prometheusMetricsPort:\n                      description:
    'PrometheusMetricsPort is the TCP port that the Prometheus\n                        metrics
    server should bind to. Set to 0 to disable. [Default:\n                        9094]'\n
    \                     type: integer\n                  required:\n                    -
    controllers\n                  type: object\n              type: object\n          type:
    object\n      served: true\n      storage: true\nstatus:\n  acceptedNames:\n    kind:
    \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions: []\n\n---\n\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  annotations:\n
    \   controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp: null\n
    \ name: networkpolicies.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: NetworkPolicy\n    listKind: NetworkPolicyList\n    plural:
    networkpolicies\n    singular: networkpolicy\n  scope: Namespaced\n  versions:\n
    \   - name: v1\n      schema:\n        openAPIV3Schema:\n          properties:\n
    \           apiVersion:\n              description: 'APIVersion defines the versioned
    schema of this representation\n              of an object. Servers should convert
    recognized schemas to the latest\n              internal value, and may reject
    unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              properties:\n                egress:\n                  description:
    The ordered set of egress rules.  Each rule contains\n                    a set
    of packet match criteria and a corresponding action to apply.\n                  items:\n
    \                   description: \"A Rule encapsulates a set of match criteria
    and an\n                    action.  Both selector-based security Policy and security
    Profiles\n                    reference rules - separated out as a list of rules
    for both ingress\n                    and egress packet matching. \\n Each positive
    match criteria has\n                    a negated version, prefixed with ”Not”.
    All the match criteria\n                    within a rule must be satisfied for
    a packet to match. A single\n                    rule can contain the positive
    and negative version of a match\n                    and both must be satisfied
    for the rule to match.\"\n                    properties:\n                      action:\n
    \                       type: string\n                      destination:\n                        description:
    Destination contains the match criteria that apply\n                          to
    destination entity.\n                        properties:\n                          namespaceSelector:\n
    \                           description: \"NamespaceSelector is an optional field
    that\n                            contains a selector expression. Only traffic
    that originates\n                            from (or terminates at) endpoints
    within the selected\n                            namespaces will be matched. When
    both NamespaceSelector\n                            and Selector are defined on
    the same rule, then only workload\n                            endpoints that
    are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                      http:\n                        description:
    HTTP contains match criteria that apply to HTTP\n                          requests.\n
    \                       properties:\n                          methods:\n                            description:
    Methods is an optional field that restricts\n                              the
    rule to apply only to HTTP requests that use one of\n                              the
    listed HTTP Methods (e.g. GET, PUT, etc.) Multiple\n                              methods
    are OR'd together.\n                            items:\n                              type:
    string\n                            type: array\n                          paths:\n
    \                           description: 'Paths is an optional field that restricts\n
    \                           the rule to apply to HTTP requests that use one of
    the\n                            listed HTTP Paths. Multiple paths are OR''d together.\n
    \                           e.g: - exact: /foo - prefix: /bar NOTE: Each entry
    may\n                            ONLY specify either a `exact` or a `prefix` match.
    The\n                            validator will check for it.'\n                            items:\n
    \                             description: 'HTTPPath specifies an HTTP path to
    match.\n                              It may be either of the form: exact: <path>:
    which matches\n                              the path exactly or prefix: <path-prefix>:
    which matches\n                              the path prefix'\n                              properties:\n
    \                               exact:\n                                  type:
    string\n                                prefix:\n                                  type:
    string\n                              type: object\n                            type:
    array\n                        type: object\n                      icmp:\n                        description:
    ICMP is an optional field that restricts the rule\n                          to
    apply to a specific type and code of ICMP traffic.  This\n                          should
    only be specified if the Protocol field is set to \"ICMP\"\n                          or
    \"ICMPv6\".\n                        properties:\n                          code:\n
    \                           description: Match on a specific ICMP code.  If specified,\n
    \                             the Type value must also be specified. This is a
    technical\n                              limitation imposed by the kernel’s iptables
    firewall,\n                              which Calico uses to enforce the rule.\n
    \                           type: integer\n                          type:\n                            description:
    Match on a specific ICMP type.  For example\n                              a value
    of 8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      ipVersion:\n
    \                       description: IPVersion is an optional field that restricts
    the\n                          rule to only match a specific IP version.\n                        type:
    integer\n                      metadata:\n                        description:
    Metadata contains additional information for this\n                          rule\n
    \                       properties:\n                          annotations:\n
    \                           additionalProperties:\n                              type:
    string\n                            description: Annotations is a set of key value
    pairs that\n                              give extra information about the rule\n
    \                           type: object\n                        type: object\n
    \                     notICMP:\n                        description: NotICMP is
    the negated version of the ICMP field.\n                        properties:\n
    \                         code:\n                            description: Match
    on a specific ICMP code.  If specified,\n                              the Type
    value must also be specified. This is a technical\n                              limitation
    imposed by the kernel’s iptables firewall,\n                              which
    Calico uses to enforce the rule.\n                            type: integer\n
    \                         type:\n                            description: Match
    on a specific ICMP type.  For example\n                              a value of
    8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      notProtocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: NotProtocol is the negated
    version of the Protocol\n                          field.\n                        pattern:
    ^.*\n                        x-kubernetes-int-or-string: true\n                      protocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: \"Protocol is an optional field
    that restricts the\n                        rule to only apply to traffic of a
    specific IP protocol. Required\n                        if any of the EntityRules
    contain Ports (because ports only\n                        apply to certain protocols).
    \\n Must be one of these string\n                        values: \\\"TCP\\\",
    \\\"UDP\\\", \\\"ICMP\\\", \\\"ICMPv6\\\", \\\"SCTP\\\",\n                        \\\"UDPLite\\\"
    or an integer in the range 1-255.\"\n                        pattern: ^.*\n                        x-kubernetes-int-or-string:
    true\n                      source:\n                        description: Source
    contains the match criteria that apply to\n                          source entity.\n
    \                       properties:\n                          namespaceSelector:\n
    \                           description: \"NamespaceSelector is an optional field
    that\n                            contains a selector expression. Only traffic
    that originates\n                            from (or terminates at) endpoints
    within the selected\n                            namespaces will be matched. When
    both NamespaceSelector\n                            and Selector are defined on
    the same rule, then only workload\n                            endpoints that
    are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                    required:\n
    \                     - action\n                    type: object\n                  type:
    array\n                ingress:\n                  description: The ordered set
    of ingress rules.  Each rule contains\n                    a set of packet match
    criteria and a corresponding action to apply.\n                  items:\n                    description:
    \"A Rule encapsulates a set of match criteria and an\n                    action.
    \ Both selector-based security Policy and security Profiles\n                    reference
    rules - separated out as a list of rules for both ingress\n                    and
    egress packet matching. \\n Each positive match criteria has\n                    a
    negated version, prefixed with ”Not”. All the match criteria\n                    within
    a rule must be satisfied for a packet to match. A single\n                    rule
    can contain the positive and negative version of a match\n                    and
    both must be satisfied for the rule to match.\"\n                    properties:\n
    \                     action:\n                        type: string\n                      destination:\n
    \                       description: Destination contains the match criteria that
    apply\n                          to destination entity.\n                        properties:\n
    \                         namespaceSelector:\n                            description:
    \"NamespaceSelector is an optional field that\n                            contains
    a selector expression. Only traffic that originates\n                            from
    (or terminates at) endpoints within the selected\n                            namespaces
    will be matched. When both NamespaceSelector\n                            and
    Selector are defined on the same rule, then only workload\n                            endpoints
    that are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                      http:\n                        description:
    HTTP contains match criteria that apply to HTTP\n                          requests.\n
    \                       properties:\n                          methods:\n                            description:
    Methods is an optional field that restricts\n                              the
    rule to apply only to HTTP requests that use one of\n                              the
    listed HTTP Methods (e.g. GET, PUT, etc.) Multiple\n                              methods
    are OR'd together.\n                            items:\n                              type:
    string\n                            type: array\n                          paths:\n
    \                           description: 'Paths is an optional field that restricts\n
    \                           the rule to apply to HTTP requests that use one of
    the\n                            listed HTTP Paths. Multiple paths are OR''d together.\n
    \                           e.g: - exact: /foo - prefix: /bar NOTE: Each entry
    may\n                            ONLY specify either a `exact` or a `prefix` match.
    The\n                            validator will check for it.'\n                            items:\n
    \                             description: 'HTTPPath specifies an HTTP path to
    match.\n                              It may be either of the form: exact: <path>:
    which matches\n                              the path exactly or prefix: <path-prefix>:
    which matches\n                              the path prefix'\n                              properties:\n
    \                               exact:\n                                  type:
    string\n                                prefix:\n                                  type:
    string\n                              type: object\n                            type:
    array\n                        type: object\n                      icmp:\n                        description:
    ICMP is an optional field that restricts the rule\n                          to
    apply to a specific type and code of ICMP traffic.  This\n                          should
    only be specified if the Protocol field is set to \"ICMP\"\n                          or
    \"ICMPv6\".\n                        properties:\n                          code:\n
    \                           description: Match on a specific ICMP code.  If specified,\n
    \                             the Type value must also be specified. This is a
    technical\n                              limitation imposed by the kernel’s iptables
    firewall,\n                              which Calico uses to enforce the rule.\n
    \                           type: integer\n                          type:\n                            description:
    Match on a specific ICMP type.  For example\n                              a value
    of 8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      ipVersion:\n
    \                       description: IPVersion is an optional field that restricts
    the\n                          rule to only match a specific IP version.\n                        type:
    integer\n                      metadata:\n                        description:
    Metadata contains additional information for this\n                          rule\n
    \                       properties:\n                          annotations:\n
    \                           additionalProperties:\n                              type:
    string\n                            description: Annotations is a set of key value
    pairs that\n                              give extra information about the rule\n
    \                           type: object\n                        type: object\n
    \                     notICMP:\n                        description: NotICMP is
    the negated version of the ICMP field.\n                        properties:\n
    \                         code:\n                            description: Match
    on a specific ICMP code.  If specified,\n                              the Type
    value must also be specified. This is a technical\n                              limitation
    imposed by the kernel’s iptables firewall,\n                              which
    Calico uses to enforce the rule.\n                            type: integer\n
    \                         type:\n                            description: Match
    on a specific ICMP type.  For example\n                              a value of
    8 refers to ICMP Echo Request (i.e. pings).\n                            type:
    integer\n                        type: object\n                      notProtocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: NotProtocol is the negated
    version of the Protocol\n                          field.\n                        pattern:
    ^.*\n                        x-kubernetes-int-or-string: true\n                      protocol:\n
    \                       anyOf:\n                          - type: integer\n                          -
    type: string\n                        description: \"Protocol is an optional field
    that restricts the\n                        rule to only apply to traffic of a
    specific IP protocol. Required\n                        if any of the EntityRules
    contain Ports (because ports only\n                        apply to certain protocols).
    \\n Must be one of these string\n                        values: \\\"TCP\\\",
    \\\"UDP\\\", \\\"ICMP\\\", \\\"ICMPv6\\\", \\\"SCTP\\\",\n                        \\\"UDPLite\\\"
    or an integer in the range 1-255.\"\n                        pattern: ^.*\n                        x-kubernetes-int-or-string:
    true\n                      source:\n                        description: Source
    contains the match criteria that apply to\n                          source entity.\n
    \                       properties:\n                          namespaceSelector:\n
    \                           description: \"NamespaceSelector is an optional field
    that\n                            contains a selector expression. Only traffic
    that originates\n                            from (or terminates at) endpoints
    within the selected\n                            namespaces will be matched. When
    both NamespaceSelector\n                            and Selector are defined on
    the same rule, then only workload\n                            endpoints that
    are matched by both selectors will be selected\n                            by
    the rule. \\n For NetworkPolicy, an empty NamespaceSelector\n                            implies
    that the Selector is limited to selecting only\n                            workload
    endpoints in the same namespace as the NetworkPolicy.\n                            \\n
    For NetworkPolicy, `global()` NamespaceSelector implies\n                            that
    the Selector is limited to selecting only GlobalNetworkSet\n                            or
    HostEndpoint. \\n For GlobalNetworkPolicy, an empty\n                            NamespaceSelector
    implies the Selector applies to workload\n                            endpoints
    across all namespaces.\"\n                            type: string\n                          nets:\n
    \                           description: Nets is an optional field that restricts
    the\n                              rule to only apply to traffic that originates
    from (or\n                              terminates at) IP addresses in any of
    the given subnets.\n                            items:\n                              type:
    string\n                            type: array\n                          notNets:\n
    \                           description: NotNets is the negated version of the
    Nets\n                              field.\n                            items:\n
    \                             type: string\n                            type:
    array\n                          notPorts:\n                            description:
    NotPorts is the negated version of the Ports\n                              field.
    Since only some protocols have ports, if any ports\n                              are
    specified it requires the Protocol match in the Rule\n                              to
    be set to \"TCP\" or \"UDP\".\n                            items:\n                              anyOf:\n
    \                               - type: integer\n                                -
    type: string\n                              pattern: ^.*\n                              x-kubernetes-int-or-string:
    true\n                            type: array\n                          notSelector:\n
    \                           description: NotSelector is the negated version of
    the Selector\n                              field.  See Selector field for subtleties
    with negated\n                              selectors.\n                            type:
    string\n                          ports:\n                            description:
    \"Ports is an optional field that restricts\n                            the rule
    to only apply to traffic that has a source (destination)\n                            port
    that matches one of these ranges/values. This value\n                            is
    a list of integers or strings that represent ranges\n                            of
    ports. \\n Since only some protocols have ports, if\n                            any
    ports are specified it requires the Protocol match\n                            in
    the Rule to be set to \\\"TCP\\\" or \\\"UDP\\\".\"\n                            items:\n
    \                             anyOf:\n                                - type:
    integer\n                                - type: string\n                              pattern:
    ^.*\n                              x-kubernetes-int-or-string: true\n                            type:
    array\n                          selector:\n                            description:
    \"Selector is an optional field that contains\n                            a selector
    expression (see Policy for sample syntax).\n                            \\ Only
    traffic that originates from (terminates at) endpoints\n                            matching
    the selector will be matched. \\n Note that: in\n                            addition
    to the negated version of the Selector (see NotSelector\n                            below),
    the selector expression syntax itself supports\n                            negation.
    \ The two types of negation are subtly different.\n                            One
    negates the set of matched endpoints, the other negates\n                            the
    whole match: \\n \\tSelector = \\\"!has(my_label)\\\" matches\n                            packets
    that are from other Calico-controlled \\tendpoints\n                            that
    do not have the label “my_label”. \\n \\tNotSelector\n                            =
    \\\"has(my_label)\\\" matches packets that are not from\n                            Calico-controlled
    \\tendpoints that do have the label “my_label”.\n                            \\n
    The effect is that the latter will accept packets from\n                            non-Calico
    sources whereas the former is limited to packets\n                            from
    Calico-controlled endpoints.\"\n                            type: string\n                          serviceAccounts:\n
    \                           description: ServiceAccounts is an optional field
    that restricts\n                              the rule to only apply to traffic
    that originates from\n                              (or terminates at) a pod running
    as a matching service\n                              account.\n                            properties:\n
    \                             names:\n                                description:
    Names is an optional field that restricts\n                                  the
    rule to only apply to traffic that originates\n                                  from
    (or terminates at) a pod running as a service\n                                  account
    whose name is in the list.\n                                items:\n                                  type:
    string\n                                type: array\n                              selector:\n
    \                               description: Selector is an optional field that
    restricts\n                                  the rule to only apply to traffic
    that originates\n                                  from (or terminates at) a pod
    running as a service\n                                  account that matches the
    given label selector. If\n                                  both Names and Selector
    are specified then they are\n                                  AND'ed.\n                                type:
    string\n                            type: object\n                          services:\n
    \                           description: \"Services is an optional field that
    contains\n                              options for matching Kubernetes Services.
    If specified,\n                              only traffic that originates from
    or terminates at endpoints\n                              within the selected
    service(s) will be matched, and only\n                              to/from each
    endpoint's port. \\n Services cannot be specified\n                              on
    the same rule as Selector, NotSelector, NamespaceSelector,\n                              Ports,
    NotPorts, Nets, NotNets or ServiceAccounts. \\n\n                              Only
    valid on egress rules.\"\n                            properties:\n                              name:\n
    \                               description: Name specifies the name of a Kubernetes\n
    \                                 Service to match.\n                                type:
    string\n                              namespace:\n                                description:
    Namespace specifies the namespace of the\n                                  given
    Service. If left empty, the rule will match\n                                  within
    this policy's namespace.\n                                type: string\n                            type:
    object\n                        type: object\n                    required:\n
    \                     - action\n                    type: object\n                  type:
    array\n                order:\n                  description: Order is an optional
    field that specifies the order in\n                    which the policy is applied.
    Policies with higher \"order\" are applied\n                    after those with
    lower order.  If the order is omitted, it may be\n                    considered
    to be \"infinite\" - i.e. the policy will be applied last.  Policies\n                    with
    identical order will be applied in alphanumerical order based\n                    on
    the Policy \"Name\".\n                  type: number\n                selector:\n
    \                 description: \"The selector is an expression used to pick pick
    out\n                  the endpoints that the policy should be applied to. \\n
    Selector\n                  expressions follow this syntax: \\n \\tlabel == \\\"string_literal\\\"\n
    \                 \\ ->  comparison, e.g. my_label == \\\"foo bar\\\" \\tlabel
    != \\\"string_literal\\\"\n                  \\  ->  not equal; also matches if
    label is not present \\tlabel in\n                  { \\\"a\\\", \\\"b\\\", \\\"c\\\",
    ... }  ->  true if the value of label X is\n                  one of \\\"a\\\",
    \\\"b\\\", \\\"c\\\" \\tlabel not in { \\\"a\\\", \\\"b\\\", \\\"c\\\",\n                  ...
    }  ->  true if the value of label X is not one of \\\"a\\\", \\\"b\\\",\n                  \\\"c\\\"
    \\thas(label_name)  -> True if that label is present \\t! expr\n                  ->
    negation of expr \\texpr && expr  -> Short-circuit and \\texpr\n                  ||
    expr  -> Short-circuit or \\t( expr ) -> parens for grouping \\tall()\n                  or
    the empty selector -> matches all endpoints. \\n Label names are\n                  allowed
    to contain alphanumerics, -, _ and /. String literals are\n                  more
    permissive but they do not support escape characters. \\n Examples\n                  (with
    made-up labels): \\n \\ttype == \\\"webserver\\\" && deployment\n                  ==
    \\\"prod\\\" \\ttype in {\\\"frontend\\\", \\\"backend\\\"} \\tdeployment !=\n
    \                 \\\"dev\\\" \\t! has(label_name)\"\n                  type:
    string\n                serviceAccountSelector:\n                  description:
    ServiceAccountSelector is an optional field for an expression\n                    used
    to select a pod based on service accounts.\n                  type: string\n                types:\n
    \                 description: \"Types indicates whether this policy applies to
    ingress,\n                  or to egress, or to both.  When not explicitly specified
    (and so\n                  the value on creation is empty or nil), Calico defaults
    Types according\n                  to what Ingress and Egress are present in the
    policy.  The default\n                  is: \\n - [ PolicyTypeIngress ], if there
    are no Egress rules (including\n                  the case where there are   also
    no Ingress rules) \\n - [ PolicyTypeEgress\n                  ], if there are
    Egress rules but no Ingress rules \\n - [ PolicyTypeIngress,\n                  PolicyTypeEgress
    ], if there are both Ingress and Egress rules.\n                  \\n When the
    policy is read back again, Types will always be one\n                  of these
    values, never empty or nil.\"\n                  items:\n                    description:
    PolicyType enumerates the possible values of the PolicySpec\n                      Types
    field.\n                    type: string\n                  type: array\n              type:
    object\n          type: object\n      served: true\n      storage: true\nstatus:\n
    \ acceptedNames:\n    kind: \"\"\n    plural: \"\"\n  conditions: []\n  storedVersions:
    []\n\n---\n\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n
    \ annotations:\n    controller-gen.kubebuilder.io/version: (devel)\n  creationTimestamp:
    null\n  name: networksets.crd.projectcalico.org\nspec:\n  group: crd.projectcalico.org\n
    \ names:\n    kind: NetworkSet\n    listKind: NetworkSetList\n    plural: networksets\n
    \   singular: networkset\n  scope: Namespaced\n  versions:\n    - name: v1\n      schema:\n
    \       openAPIV3Schema:\n          description: NetworkSet is the Namespaced-equivalent
    of the GlobalNetworkSet.\n          properties:\n            apiVersion:\n              description:
    'APIVersion defines the versioned schema of this representation\n              of
    an object. Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \             type: string\n            kind:\n              description: 'Kind
    is a string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \             type: string\n            metadata:\n              type: object\n
    \           spec:\n              description: NetworkSetSpec contains the specification
    for a NetworkSet\n                resource.\n              properties:\n                nets:\n
    \                 description: The list of IP networks that belong to this set.\n
    \                 items:\n                    type: string\n                  type:
    array\n              type: object\n          type: object\n      served: true\n
    \     storage: true\nstatus:\n  acceptedNames:\n    kind: \"\"\n    plural: \"\"\n
    \ conditions: []\n  storedVersions: []\n\n---\n---\n# Source: calico/templates/calico-kube-controllers-rbac.yaml\n\n#
    Include a clusterrole for the kube-controllers component,\n# and bind it to the
    calico-kube-controllers serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n
    \ name: calico-kube-controllers\nrules:\n  # Nodes are watched to monitor for
    deletions.\n  - apiGroups: [\"\"]\n    resources:\n      - nodes\n    verbs:\n
    \     - watch\n      - list\n      - get\n  # Pods are watched to check for existence
    as part of IPAM controller.\n  - apiGroups: [\"\"]\n    resources:\n      - pods\n
    \   verbs:\n      - get\n      - list\n      - watch\n  # IPAM resources are manipulated
    when nodes are deleted.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n
    \     - ippools\n    verbs:\n      - list\n  - apiGroups: [\"crd.projectcalico.org\"]\n
    \   resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n
    \   verbs:\n      - get\n      - list\n      - create\n      - update\n      -
    delete\n      - watch\n  # kube-controllers manages hostendpoints.\n  - apiGroups:
    [\"crd.projectcalico.org\"]\n    resources:\n      - hostendpoints\n    verbs:\n
    \     - get\n      - list\n      - create\n      - update\n      - delete\n  #
    Needs access to update clusterinformations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n
    \   resources:\n      - clusterinformations\n    verbs:\n      - get\n      -
    create\n      - update\n  # KubeControllersConfiguration is where it gets its
    config\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - kubecontrollersconfigurations\n
    \   verbs:\n      # read its own config\n      - get\n      # create a default
    if none exists\n      - create\n      # update status\n      - update\n      #
    watch for changes\n      - watch\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n
    \ name: calico-kube-controllers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
    \ kind: ClusterRole\n  name: calico-kube-controllers\nsubjects:\n  - kind: ServiceAccount\n
    \   name: calico-kube-controllers\n    namespace: kube-system\n---\n\n---\n# Source:
    calico/templates/calico-node-rbac.yaml\n# Include a clusterrole for the calico-node
    DaemonSet,\n# and bind it to the calico-node serviceaccount.\nkind: ClusterRole\napiVersion:
    rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-node\nrules:\n  # The
    CNI plugin needs to get pods, nodes, and namespaces.\n  - apiGroups: [\"\"]\n
    \   resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs:\n
    \     - get\n  # EndpointSlices are used for Service-based network policy rule\n
    \ # enforcement.\n  - apiGroups: [\"discovery.k8s.io\"]\n    resources:\n      -
    endpointslices\n    verbs:\n      - watch\n      - list\n  - apiGroups: [\"\"]\n
    \   resources:\n      - endpoints\n      - services\n    verbs:\n      # Used
    to discover service IPs for advertisement.\n      - watch\n      - list\n      #
    Used to discover Typhas.\n      - get\n  # Pod CIDR auto-detection on kubeadm
    needs access to config maps.\n  - apiGroups: [\"\"]\n    resources:\n      - configmaps\n
    \   verbs:\n      - get\n  - apiGroups: [\"\"]\n    resources:\n      - nodes/status\n
    \   verbs:\n      # Needed for clearing NodeNetworkUnavailable flag.\n      -
    patch\n      # Calico stores some configuration information in node annotations.\n
    \     - update\n  # Watch for changes to Kubernetes NetworkPolicies.\n  - apiGroups:
    [\"networking.k8s.io\"]\n    resources:\n      - networkpolicies\n    verbs:\n
    \     - watch\n      - list\n  # Used by Calico for policy information.\n  - apiGroups:
    [\"\"]\n    resources:\n      - pods\n      - namespaces\n      - serviceaccounts\n
    \   verbs:\n      - list\n      - watch\n  # The CNI plugin patches pods/status.\n
    \ - apiGroups: [\"\"]\n    resources:\n      - pods/status\n    verbs:\n      -
    patch\n  # Calico monitors various CRDs for config.\n  - apiGroups: [\"crd.projectcalico.org\"]\n
    \   resources:\n      - globalfelixconfigs\n      - felixconfigurations\n      -
    bgppeers\n      - globalbgpconfigs\n      - bgpconfigurations\n      - ippools\n
    \     - ipamblocks\n      - globalnetworkpolicies\n      - globalnetworksets\n
    \     - networkpolicies\n      - networksets\n      - clusterinformations\n      -
    hostendpoints\n      - blockaffinities\n    verbs:\n      - get\n      - list\n
    \     - watch\n  # Calico must create and update some CRDs on startup.\n  - apiGroups:
    [\"crd.projectcalico.org\"]\n    resources:\n      - ippools\n      - felixconfigurations\n
    \     - clusterinformations\n    verbs:\n      - create\n      - update\n  # Calico
    stores some configuration information on the node.\n  - apiGroups: [\"\"]\n    resources:\n
    \     - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  # These
    permissions are only required for upgrade from v2.6, and can\n  # be removed after
    upgrade or on fresh installations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n
    \   resources:\n      - bgpconfigurations\n      - bgppeers\n    verbs:\n      -
    create\n      - update\n  # These permissions are required for Calico CNI to perform
    IPAM allocations.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n
    \     - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n
    \     - get\n      - list\n      - create\n      - update\n      - delete\n  -
    apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n      - ipamconfigs\n
    \   verbs:\n      - get\n  # Block affinities must also be watchable by confd
    for route aggregation.\n  - apiGroups: [\"crd.projectcalico.org\"]\n    resources:\n
    \     - blockaffinities\n    verbs:\n      - watch\n  # The Calico IPAM migration
    needs to get daemonsets. These permissions can be\n  # removed if not upgrading
    from an installation using host-local IPAM.\n  - apiGroups: [\"apps\"]\n    resources:\n
    \     - daemonsets\n    verbs:\n      - get\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind:
    ClusterRoleBinding\nmetadata:\n  name: calico-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n
    \ kind: ClusterRole\n  name: calico-node\nsubjects:\n  - kind: ServiceAccount\n
    \   name: calico-node\n    namespace: kube-system\n\n---\n# Source: calico/templates/calico-node.yaml\n#
    This manifest installs the calico-node container, as well\n# as the CNI plugins
    and network config on\n# each master and worker node in a Kubernetes cluster.\nkind:
    DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: calico-node\n  namespace: kube-system\n
    \ labels:\n    k8s-app: calico-node\nspec:\n  selector:\n    matchLabels:\n      k8s-app:
    calico-node\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n
    \     maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        k8s-app:
    calico-node\n    spec:\n      nodeSelector:\n        kubernetes.io/os: linux\n
    \     hostNetwork: true\n      tolerations:\n        # Make sure calico-node gets
    scheduled on all nodes.\n        - effect: NoSchedule\n          operator: Exists\n
    \       # Mark the pod as a critical add-on for rescheduling.\n        - key:
    CriticalAddonsOnly\n          operator: Exists\n        - effect: NoExecute\n
    \         operator: Exists\n      serviceAccountName: calico-node\n      # Minimize
    downtime during a rolling upgrade or deletion; tell Kubernetes to do a \"force\n
    \     # deletion\": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.\n
    \     terminationGracePeriodSeconds: 0\n      priorityClassName: system-node-critical\n
    \     initContainers:\n        # This container performs upgrade from host-local
    IPAM to calico-ipam.\n        # It can be deleted if this is a fresh installation,
    or if you have already\n        # upgraded to use calico-ipam.\n        - name:
    upgrade-ipam\n          image: calico/cni:v3.20.0\n          command: [\"/opt/cni/bin/calico-ipam\",
    \"-upgrade\"]\n          envFrom:\n            - configMapRef:\n                #
    Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for
    eBPF mode.\n                name: kubernetes-services-endpoint\n                optional:
    true\n          env:\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n
    \               fieldRef:\n                  fieldPath: spec.nodeName\n            -
    name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n
    \                 name: calico-config\n                  key: calico_backend\n
    \         volumeMounts:\n            - mountPath: /var/lib/cni/networks\n              name:
    host-local-net-dir\n            - mountPath: /host/opt/cni/bin\n              name:
    cni-bin-dir\n          securityContext:\n            privileged: true\n        #
    This container installs the CNI binaries\n        # and CNI network config file
    on each node.\n        - name: install-cni\n          image: calico/cni:v3.20.0\n
    \         command: [\"/opt/cni/bin/install\"]\n          envFrom:\n            -
    configMapRef:\n                # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT
    to be overridden for eBPF mode.\n                name: kubernetes-services-endpoint\n
    \               optional: true\n          env:\n            # Name of the CNI
    config file to create.\n            - name: CNI_CONF_NAME\n              value:
    \"10-calico.conflist\"\n            # The CNI network config to install on each
    node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n
    \                 name: calico-config\n                  key: cni_network_config\n
    \           # Set the hostname based on the k8s node name.\n            - name:
    KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath:
    spec.nodeName\n            # CNI MTU Config variable\n            - name: CNI_MTU\n
    \             valueFrom:\n                configMapKeyRef:\n                  name:
    calico-config\n                  key: veth_mtu\n            # Prevents the container
    from sleeping forever.\n            - name: SLEEP\n              value: \"false\"\n
    \         volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name:
    cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name:
    cni-net-dir\n          securityContext:\n            privileged: true\n        #
    Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes\n
    \       # to communicate with Felix over the Policy Sync API.\n        - name:
    flexvol-driver\n          image: calico/pod2daemon-flexvol:v3.20.0\n          volumeMounts:\n
    \           - name: flexvol-driver-host\n              mountPath: /host/driver\n
    \         securityContext:\n            privileged: true\n      containers:\n
    \       # Runs calico-node container on each Kubernetes node. This\n        #
    container programs network policy and routes on each\n        # host.\n        -
    name: calico-node\n          image: calico/node:v3.20.0\n          envFrom:\n
    \           - configMapRef:\n                # Allow KUBERNETES_SERVICE_HOST and
    KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.\n                name:
    kubernetes-services-endpoint\n                optional: true\n          env:\n
    \           # Use Kubernetes API as the backing datastore.\n            - name:
    DATASTORE_TYPE\n              value: \"kubernetes\"\n            # Wait for the
    datastore.\n            - name: WAIT_FOR_DATASTORE\n              value: \"true\"\n
    \           # Set based on the k8s node name.\n            - name: NODENAME\n
    \             valueFrom:\n                fieldRef:\n                  fieldPath:
    spec.nodeName\n            # Choose the backend to use.\n            - name: CALICO_NETWORKING_BACKEND\n
    \             valueFrom:\n                configMapKeyRef:\n                  name:
    calico-config\n                  key: calico_backend\n            # Cluster type
    to identify the deployment type\n            - name: CLUSTER_TYPE\n              value:
    \"k8s,bgp\"\n            # Auto-detect the BGP IP address.\n            - name:
    IP\n              value: \"autodetect\"\n            # Enable VXLAN\n            -
    name: CALICO_IPV4POOL_VXLAN\n              value: \"Always\"\n            # Set
    MTU for tunnel device used if ipip is enabled\n            - name: FELIX_IPINIPMTU\n
    \             valueFrom:\n                configMapKeyRef:\n                  name:
    calico-config\n                  key: veth_mtu\n            # Set MTU for the
    VXLAN tunnel device.\n            - name: FELIX_VXLANMTU\n              valueFrom:\n
    \               configMapKeyRef:\n                  name: calico-config\n                  key:
    veth_mtu\n            # Set MTU for the Wireguard tunnel device.\n            -
    name: FELIX_WIREGUARDMTU\n              valueFrom:\n                configMapKeyRef:\n
    \                 name: calico-config\n                  key: veth_mtu\n            #
    The default IPv4 pool to create on startup if none exists. Pod IPs will be\n            #
    chosen from this range. Changing this value after installation will have\n            #
    no effect. This should fall within `--cluster-cidr`.\n            # - name: CALICO_IPV4POOL_CIDR\n
    \           #   value: \"192.168.0.0/16\"\n            # Disable file logging
    so `kubectl logs` works.\n            - name: CALICO_DISABLE_FILE_LOGGING\n              value:
    \"true\"\n            # Set Felix endpoint to host default action to ACCEPT.\n
    \           - name: FELIX_DEFAULTENDPOINTTOHOSTACTION\n              value: \"ACCEPT\"\n
    \           # Disable IPv6 on Kubernetes.\n            - name: FELIX_IPV6SUPPORT\n
    \             value: \"false\"\n            - name: FELIX_FEATUREDETECTOVERRIDE\n
    \             value: \"ChecksumOffloadBroken=true\"\n            - name: FELIX_HEALTHENABLED\n
    \             value: \"true\"\n          securityContext:\n            privileged:
    true\n          resources:\n            requests:\n              cpu: 250m\n          livenessProbe:\n
    \           exec:\n              command:\n                - /bin/calico-node\n
    \               - -felix-live\n            periodSeconds: 10\n            initialDelaySeconds:
    10\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n
    \             command:\n                - /bin/calico-node\n                -
    -felix-ready\n            periodSeconds: 10\n          volumeMounts:\n            -
    mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n              readOnly:
    false\n            - mountPath: /lib/modules\n              name: lib-modules\n
    \             readOnly: true\n            - mountPath: /run/xtables.lock\n              name:
    xtables-lock\n              readOnly: false\n            - mountPath: /var/run/calico\n
    \             name: var-run-calico\n              readOnly: false\n            -
    mountPath: /var/lib/calico\n              name: var-lib-calico\n              readOnly:
    false\n            - name: policysync\n              mountPath: /var/run/nodeagent\n
    \           # For eBPF mode, we need to be able to mount the BPF filesystem at
    /sys/fs/bpf so we mount in the\n            # parent directory.\n            -
    name: sysfs\n              mountPath: /sys/fs/\n              # Bidirectional
    means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to
    the host.\n              # If the host is known to mount that filesystem already
    then Bidirectional can be omitted.\n              mountPropagation: Bidirectional\n
    \           - name: cni-log-dir\n              mountPath: /var/log/calico/cni\n
    \             readOnly: true\n      volumes:\n        # Used by calico-node.\n
    \       - name: lib-modules\n          hostPath:\n            path: /lib/modules\n
    \       - name: var-run-calico\n          hostPath:\n            path: /var/run/calico\n
    \       - name: var-lib-calico\n          hostPath:\n            path: /var/lib/calico\n
    \       - name: xtables-lock\n          hostPath:\n            path: /run/xtables.lock\n
    \           type: FileOrCreate\n        - name: sysfs\n          hostPath:\n            path:
    /sys/fs/\n            type: DirectoryOrCreate\n        # Used to install CNI.\n
    \       - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n
    \       - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d\n
    \       # Used to access CNI logs.\n        - name: cni-log-dir\n          hostPath:\n
    \           path: /var/log/calico/cni\n        # Mount in the directory for host-local
    IPAM allocations. This is\n        # used when upgrading from host-local to calico-ipam,
    and can be removed\n        # if not using the upgrade-ipam init container.\n
    \       - name: host-local-net-dir\n          hostPath:\n            path: /var/lib/cni/networks\n
    \       # Used to create per-pod Unix Domain Sockets\n        - name: policysync\n
    \         hostPath:\n            type: DirectoryOrCreate\n            path: /var/run/nodeagent\n
    \       # Used to install Flex Volume Driver\n        - name: flexvol-driver-host\n
    \         hostPath:\n            type: DirectoryOrCreate\n            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds\n---\n\napiVersion:
    v1\nkind: ServiceAccount\nmetadata:\n  name: calico-node\n  namespace: kube-system\n\n---\n#
    Source: calico/templates/calico-kube-controllers.yaml\n# See https://github.com/projectcalico/kube-controllers\napiVersion:
    apps/v1\nkind: Deployment\nmetadata:\n  name: calico-kube-controllers\n  namespace:
    kube-system\n  labels:\n    k8s-app: calico-kube-controllers\nspec:\n  # The controllers
    can only have a single active instance.\n  replicas: 1\n  selector:\n    matchLabels:\n
    \     k8s-app: calico-kube-controllers\n  strategy:\n    type: Recreate\n  template:\n
    \   metadata:\n      name: calico-kube-controllers\n      namespace: kube-system\n
    \     labels:\n        k8s-app: calico-kube-controllers\n    spec:\n      nodeSelector:\n
    \       kubernetes.io/os: linux\n      tolerations:\n        # Mark the pod as
    a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator:
    Exists\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n
    \     serviceAccountName: calico-kube-controllers\n      priorityClassName: system-cluster-critical\n
    \     containers:\n        - name: calico-kube-controllers\n          image: calico/kube-controllers:v3.20.0\n
    \         env:\n            # Choose which controllers to run.\n            -
    name: ENABLED_CONTROLLERS\n              value: node\n            - name: DATASTORE_TYPE\n
    \             value: kubernetes\n          livenessProbe:\n            exec:\n
    \             command:\n              - /usr/bin/check-status\n              -
    -l\n            periodSeconds: 10\n            initialDelaySeconds: 10\n            failureThreshold:
    6\n            timeoutSeconds: 10\n          readinessProbe:\n            exec:\n
    \             command:\n                - /usr/bin/check-status\n                -
    -r\n            periodSeconds: 10\n\n---\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n
    \ name: calico-kube-controllers\n  namespace: kube-system\n\n---\n\n# This manifest
    creates a Pod Disruption Budget for Controller to allow K8s Cluster Autoscaler
    to evict\n\napiVersion: policy/v1beta1\nkind: PodDisruptionBudget\nmetadata:\n
    \ name: calico-kube-controllers\n  namespace: kube-system\n  labels:\n    k8s-app:
    calico-kube-controllers\nspec:\n  maxUnavailable: 1\n  selector:\n    matchLabels:\n
    \     k8s-app: calico-kube-controllers\n---\n# Source: calico/templates/calico-etcd-secrets.yaml\n\n---\n#
    Source: calico/templates/calico-typha.yaml\n\n---\n# Source: calico/templates/configure-canal.yaml\n"
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: cni-${CLUSTER_NAME}-calico
  namespace: default
