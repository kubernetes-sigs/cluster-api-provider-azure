apiVersion: cluster.x-k8s.io/v1alpha4
kind: Cluster
metadata:
  labels:
    cni: ${CLUSTER_NAME}-calico
    gpu: nvidia
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
    kind: KubeadmControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  additionalTags:
    buildProvenance: ${BUILD_PROVENANCE}
    creationTimestamp: ${TIMESTAMP}
    jobName: ${JOB_NAME}
  location: ${AZURE_LOCATION}
  networkSpec:
    vnet:
      name: ${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}
  resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          cluster-name: ${CLUSTER_NAME}
          v: "4"
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
      kind: AzureMachineTemplate
      name: ${CLUSTER_NAME}-control-plane
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_CONTROL_PLANE_MACHINE_TYPE}
---
apiVersion: cluster.x-k8s.io/v1alpha4
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
          kind: KubeadmConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
        kind: AzureMachineTemplate
        name: ${CLUSTER_NAME}-md-0
      version: ${KUBERNETES_VERSION}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: ${AZURE_GPU_NODE_STORAGE_TYPE:=Standard_LRS}
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_GPU_NODE_MACHINE_TYPE:=Standard_NV6}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: worker-node-azure.json
            name: ${CLUSTER_NAME}-md-0-azure-json
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: "0644"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            azure-container-registry-config: /etc/kubernetes/azure.json
            cloud-config: /etc/kubernetes/azure.json
            cloud-provider: azure
          name: '{{ ds.meta_data["local_hostname"] }}'
---
apiVersion: addons.cluster.x-k8s.io/v1alpha4
kind: ClusterResourceSet
metadata:
  name: crs-gpu-operator
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      gpu: nvidia
  resources:
  - kind: ConfigMap
    name: nvidia-clusterpolicy-crd
  - kind: ConfigMap
    name: nvidia-gpu-operator-components
  strategy: ApplyOnce
---
apiVersion: v1
data:
  clusterpolicy-crd.yaml: |
    ---
    # Source: crds/nvidia.com_clusterpolicies_crd.yaml
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.4.1
      creationTimestamp: null
      name: clusterpolicies.nvidia.com
    spec:
      group: nvidia.com
      names:
        kind: ClusterPolicy
        listKind: ClusterPolicyList
        plural: clusterpolicies
        singular: clusterpolicy
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: ClusterPolicy is the Schema for the clusterpolicies API
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: ClusterPolicySpec defines the desired state of ClusterPolicy
                  properties:
                    dcgmExporter:
                      description: DCGMExporter spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    devicePlugin:
                      description: DevicePlugin component spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    driver:
                      description: Driver component spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    gfd:
                      description: GPUFeatureDiscovery spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        discoveryIntervalSeconds:
                          description: 'Optional: Discovery Interval for GPU feature discovery
                          plugin'
                          type: integer
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        migStrategy:
                          description: 'Optional: MigStrategy for GPU feature discovery
                          plugin'
                          enum:
                            - none
                            - single
                            - mixed
                          type: string
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                    operator:
                      description: Operator component spec
                      properties:
                        defaultRuntime:
                          description: Runtime defines container runtime type
                          enum:
                            - docker
                            - crio
                            - containerd
                          type: string
                        validator:
                          description: ValidatorSpec describes configuration options for
                            validation pod
                          properties:
                            image:
                              pattern: '[a-zA-Z0-9\-]+'
                              type: string
                            imagePullPolicy:
                              description: Image pull policy
                              type: string
                            imagePullSecrets:
                              description: Image pull secrets
                              items:
                                type: string
                              type: array
                            repository:
                              pattern: '[a-zA-Z0-9\.\-\/]+'
                              type: string
                            version:
                              pattern: '[a-zA-Z0-9\.-]+'
                              type: string
                          type: object
                      required:
                        - defaultRuntime
                      type: object
                    toolkit:
                      description: Toolkit component spec
                      properties:
                        affinity:
                          description: 'Optional: Set Node affinity'
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules for
                                the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node matches the corresponding matchExpressions;
                                    the node(s) with the highest sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term matches
                                      all objects with implicit weight 0 (i.e. it's a no-op).
                                      A null preferred scheduling term matches no objects
                                      (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated with
                                          the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      weight:
                                        description: Weight associated with matching the
                                          corresponding nodeSelectorTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - preference
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to an update), the system
                                    may or may not try to eventually evict the pod from
                                    its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector terms.
                                        The terms are ORed.
                                      items:
                                        description: A null or empty node selector term
                                          matches no objects. The requirements of them are
                                          ANDed. The TopologySelectorTerm type implements
                                          a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement is
                                                a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: The label key that the selector
                                                    applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's relationship
                                                    to a set of values. Valid operators
                                                    are In, NotIn, Exists, DoesNotExist.
                                                    Gt, and Lt.
                                                  type: string
                                                values:
                                                  description: An array of string values.
                                                    If the operator is In or NotIn, the
                                                    values array must be non-empty. If the
                                                    operator is Exists or DoesNotExist,
                                                    the values array must be empty. If the
                                                    operator is Gt or Lt, the values array
                                                    must have a single element, which will
                                                    be interpreted as an integer. This array
                                                    is replaced during a strategic merge
                                                    patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                        type: object
                                      type: array
                                  required:
                                    - nodeSelectorTerms
                                  type: object
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules (e.g.
                                co-locate this pod in the same node, zone, etc. as some
                                other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the affinity expressions specified
                                    by this field, but it may choose a node that violates
                                    one or more of the expressions. The node that is most
                                    preferred is the one with the greatest sum of weights,
                                    i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified by
                                    this field are not met at scheduling time, the pod will
                                    not be scheduled onto the node. If the affinity requirements
                                    specified by this field cease to be met at some point
                                    during pod execution (e.g. due to a pod label update),
                                    the system may or may not try to eventually evict the
                                    pod from its node. When there are multiple elements,
                                    the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling rules
                                (e.g. avoid putting this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule pods
                                    to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node that
                                    violates one or more of the expressions. The node that
                                    is most preferred is the one with the greatest sum of
                                    weights, i.e. for each node that meets all of the scheduling
                                    requirements (resource request, requiredDuringScheduling
                                    anti-affinity expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding "weight"
                                    to the sum if the node has pods which matches the corresponding
                                    podAffinityTerm; the node(s) with the highest sum are
                                    the most preferred.
                                  items:
                                    description: The weights of all of the matched WeightedPodAffinityTerm
                                      fields are added per-node to find the most preferred
                                      node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term, associated
                                          with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set of resources,
                                              in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a list
                                                  of label selector requirements. The requirements
                                                  are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label key
                                                        that the selector applies to.
                                                      type: string
                                                    operator:
                                                      description: operator represents a
                                                        key's relationship to a set of values.
                                                        Valid operators are In, NotIn, Exists
                                                        and DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array of
                                                        string values. If the operator is
                                                        In or NotIn, the values array must
                                                        be non-empty. If the operator is
                                                        Exists or DoesNotExist, the values
                                                        array must be empty. This array
                                                        is replaced during a strategic merge
                                                        patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                    - key
                                                    - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map of {key,value}
                                                  pairs. A single {key,value} in the matchLabels
                                                  map is equivalent to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are ANDed.
                                                type: object
                                            type: object
                                          namespaces:
                                            description: namespaces specifies which namespaces
                                              the labelSelector applies to (matches against);
                                              null or empty list means "this pod's namespace"
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located (affinity)
                                              or not co-located (anti-affinity) with the
                                              pods matching the labelSelector in the specified
                                              namespaces, where co-located is defined as
                                              running on a node whose value of the label
                                              with key topologyKey matches that of any node
                                              on which any of the selected pods is running.
                                              Empty topologyKey is not allowed.
                                            type: string
                                        required:
                                          - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching the
                                          corresponding podAffinityTerm, in the range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                      - podAffinityTerm
                                      - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time, the pod
                                    will not be scheduled onto the node. If the anti-affinity
                                    requirements specified by this field cease to be met
                                    at some point during pod execution (e.g. due to a pod
                                    label update), the system may or may not try to eventually
                                    evict the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those matching
                                      the labelSelector relative to the given namespace(s))
                                      that this pod should be co-located (affinity) or not
                                      co-located (anti-affinity) with, where co-located
                                      is defined as running on a node whose value of the
                                      label with key <topologyKey> matches that of any node
                                      on which a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list of label
                                              selector requirements. The requirements are
                                              ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values, a key,
                                                and an operator that relates the key and
                                                values.
                                              properties:
                                                key:
                                                  description: key is the label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents a key's
                                                    relationship to a set of values. Valid
                                                    operators are In, NotIn, Exists and
                                                    DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array of string
                                                    values. If the operator is In or NotIn,
                                                    the values array must be non-empty.
                                                    If the operator is Exists or DoesNotExist,
                                                    the values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                                - key
                                                - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator is
                                              "In", and the values array contains only "value".
                                              The requirements are ANDed.
                                            type: object
                                        type: object
                                      namespaces:
                                        description: namespaces specifies which namespaces
                                          the labelSelector applies to (matches against);
                                          null or empty list means "this pod's namespace"
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located (affinity)
                                          or not co-located (anti-affinity) with the pods
                                          matching the labelSelector in the specified namespaces,
                                          where co-located is defined as running on a node
                                          whose value of the label with key topologyKey
                                          matches that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not allowed.
                                        type: string
                                    required:
                                      - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        args:
                          description: 'Optional: List of arguments'
                          items:
                            type: string
                          type: array
                        env:
                          description: 'Optional: List of environment variables'
                          items:
                            description: EnvVar represents an environment variable present
                              in a Container.
                            properties:
                              name:
                                description: Name of the environment variable. Must be a
                                  C_IDENTIFIER.
                                type: string
                              value:
                                description: 'Variable references $(VAR_NAME) are expanded
                                using the previous defined environment variables in the
                                container and any service environment variables. If a
                                variable cannot be resolved, the reference in the input
                                string will be unchanged. The $(VAR_NAME) syntax can be
                                escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                                will never be expanded, regardless of whether the variable
                                exists or not. Defaults to "".'
                                type: string
                              valueFrom:
                                description: Source for the environment variable's value.
                                  Cannot be used if value is not empty.
                                properties:
                                  configMapKeyRef:
                                    description: Selects a key of a ConfigMap.
                                    properties:
                                      key:
                                        description: The key to select.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the ConfigMap or its
                                          key must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                  fieldRef:
                                    description: 'Selects a field of the pod: supports metadata.name,
                                    metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                    properties:
                                      apiVersion:
                                        description: Version of the schema the FieldPath
                                          is written in terms of, defaults to "v1".
                                        type: string
                                      fieldPath:
                                        description: Path of the field to select in the
                                          specified API version.
                                        type: string
                                    required:
                                      - fieldPath
                                    type: object
                                  resourceFieldRef:
                                    description: 'Selects a resource of the container: only
                                    resources limits and requests (limits.cpu, limits.memory,
                                    limits.ephemeral-storage, requests.cpu, requests.memory
                                    and requests.ephemeral-storage) are currently supported.'
                                    properties:
                                      containerName:
                                        description: 'Container name: required for volumes,
                                        optional for env vars'
                                        type: string
                                      divisor:
                                        anyOf:
                                          - type: integer
                                          - type: string
                                        description: Specifies the output format of the
                                          exposed resources, defaults to "1"
                                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                        x-kubernetes-int-or-string: true
                                      resource:
                                        description: 'Required: resource to select'
                                        type: string
                                    required:
                                      - resource
                                    type: object
                                  secretKeyRef:
                                    description: Selects a key of a secret in the pod's
                                      namespace
                                    properties:
                                      key:
                                        description: The key of the secret to select from.  Must
                                          be a valid secret key.
                                        type: string
                                      name:
                                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion, kind,
                                        uid?'
                                        type: string
                                      optional:
                                        description: Specify whether the Secret or its key
                                          must be defined
                                        type: boolean
                                    required:
                                      - key
                                    type: object
                                type: object
                            required:
                              - name
                            type: object
                          type: array
                        image:
                          pattern: '[a-zA-Z0-9\-]+'
                          type: string
                        imagePullPolicy:
                          description: Image pull policy
                          type: string
                        imagePullSecrets:
                          description: Image pull secrets
                          items:
                            type: string
                          type: array
                        licensingConfig:
                          description: 'Optional: Licensing configuration for vGPU drivers'
                          properties:
                            configMapName:
                              type: string
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: Node selector to control the selection of nodes (optional)
                          type: object
                        podSecurityContext:
                          description: 'Optional: Pod Security Context'
                          properties:
                            fsGroup:
                              description: "A special supplemental group that applies to
                              all containers in a pod. Some volume types allow the Kubelet
                              to change the ownership of that volume to be owned by the
                              pod: \n 1. The owning GID will be the FSGroup 2. The setgid
                              bit is set (new files created in the volume will be owned
                              by FSGroup) 3. The permission bits are OR'd with rw-rw----
                              \n If unset, the Kubelet will not modify the ownership and
                              permissions of any volume."
                              format: int64
                              type: integer
                            fsGroupChangePolicy:
                              description: 'fsGroupChangePolicy defines behavior of changing
                              ownership and permission of the volume before being exposed
                              inside Pod. This field will only apply to volume types which
                              support fsGroup based ownership(and permissions). It will
                              have no effect on ephemeral volume types such as: secret,
                              configmaps and emptydir. Valid values are "OnRootMismatch"
                              and "Always". If not specified, "Always" is used.'
                              type: string
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in SecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence for that container.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in SecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in SecurityContext.  If set
                                in both SecurityContext and PodSecurityContext, the value
                                specified in SecurityContext takes precedence for that container.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to all containers.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                SecurityContext.  If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence
                                for that container.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by the containers
                                in this pod.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            supplementalGroups:
                              description: A list of groups applied to the first process
                                run in each container, in addition to the container's primary
                                GID.  If unspecified, no groups will be added to any container.
                              items:
                                format: int64
                                type: integer
                              type: array
                            sysctls:
                              description: Sysctls hold a list of namespaced sysctls used
                                for the pod. Pods with unsupported sysctls (by the container
                                runtime) might fail to launch.
                              items:
                                description: Sysctl defines a kernel parameter to be set
                                properties:
                                  name:
                                    description: Name of a property to set
                                    type: string
                                  value:
                                    description: Value of a property to set
                                    type: string
                                required:
                                  - name
                                  - value
                                type: object
                              type: array
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options within a container's
                                SecurityContext will be used. If set in both SecurityContext
                                and PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        repoConfig:
                          description: 'Optional: Custom repo configuration for driver container'
                          properties:
                            configMapName:
                              type: string
                            destinationDir:
                              type: string
                          type: object
                        repository:
                          pattern: '[a-zA-Z0-9\.\-\/]+'
                          type: string
                        resources:
                          description: 'Optional: Define resources requests and limits for
                          each pod'
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                              resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                  - type: integer
                                  - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                              resources required. If Requests is omitted for a container,
                              it defaults to Limits if that is explicitly specified, otherwise
                              to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                              type: object
                          type: object
                        securityContext:
                          description: 'Optional: Security Context'
                          properties:
                            allowPrivilegeEscalation:
                              description: 'AllowPrivilegeEscalation controls whether a
                              process can gain more privileges than its parent process.
                              This bool directly controls if the no_new_privs flag will
                              be set on the container process. AllowPrivilegeEscalation
                              is true always when the container is: 1) run as Privileged
                              2) has CAP_SYS_ADMIN'
                              type: boolean
                            capabilities:
                              description: The capabilities to add/drop when running containers.
                                Defaults to the default set of capabilities granted by the
                                container runtime.
                              properties:
                                add:
                                  description: Added capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                                drop:
                                  description: Removed capabilities
                                  items:
                                    description: Capability represent POSIX capabilities
                                      type
                                    type: string
                                  type: array
                              type: object
                            privileged:
                              description: Run container in privileged mode. Processes in
                                privileged containers are essentially equivalent to root
                                on the host. Defaults to false.
                              type: boolean
                            procMount:
                              description: procMount denotes the type of proc mount to use
                                for the containers. The default is DefaultProcMount which
                                uses the container runtime defaults for readonly paths and
                                masked paths. This requires the ProcMountType feature flag
                                to be enabled.
                              type: string
                            readOnlyRootFilesystem:
                              description: Whether this container has a read-only root filesystem.
                                Default is false.
                              type: boolean
                            runAsGroup:
                              description: The GID to run the entrypoint of the container
                                process. Uses runtime default if unset. May also be set
                                in PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              format: int64
                              type: integer
                            runAsNonRoot:
                              description: Indicates that the container must run as a non-root
                                user. If true, the Kubelet will validate the image at runtime
                                to ensure that it does not run as UID 0 (root) and fail
                                to start the container if it does. If unset or false, no
                                such validation will be performed. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              type: boolean
                            runAsUser:
                              description: The UID to run the entrypoint of the container
                                process. Defaults to user specified in image metadata if
                                unspecified. May also be set in PodSecurityContext.  If
                                set in both SecurityContext and PodSecurityContext, the
                                value specified in SecurityContext takes precedence.
                              format: int64
                              type: integer
                            seLinuxOptions:
                              description: The SELinux context to be applied to the container.
                                If unspecified, the container runtime will allocate a random
                                SELinux context for each container.  May also be set in
                                PodSecurityContext.  If set in both SecurityContext and
                                PodSecurityContext, the value specified in SecurityContext
                                takes precedence.
                              properties:
                                level:
                                  description: Level is SELinux level label that applies
                                    to the container.
                                  type: string
                                role:
                                  description: Role is a SELinux role label that applies
                                    to the container.
                                  type: string
                                type:
                                  description: Type is a SELinux type label that applies
                                    to the container.
                                  type: string
                                user:
                                  description: User is a SELinux user label that applies
                                    to the container.
                                  type: string
                              type: object
                            seccompProfile:
                              description: The seccomp options to use by this container.
                                If seccomp options are provided at both the pod & container
                                level, the container options override the pod options.
                              properties:
                                localhostProfile:
                                  description: localhostProfile indicates a profile defined
                                    in a file on the node should be used. The profile must
                                    be preconfigured on the node to work. Must be a descending
                                    path, relative to the kubelet's configured seccomp profile
                                    location. Must only be set if type is "Localhost".
                                  type: string
                                type:
                                  description: "type indicates which kind of seccomp profile
                                  will be applied. Valid options are: \n Localhost - a
                                  profile defined in a file on the node should be used.
                                  RuntimeDefault - the container runtime default profile
                                  should be used. Unconfined - no profile should be applied."
                                  type: string
                              required:
                                - type
                              type: object
                            windowsOptions:
                              description: The Windows specific settings applied to all
                                containers. If unspecified, the options from the PodSecurityContext
                                will be used. If set in both SecurityContext and PodSecurityContext,
                                the value specified in SecurityContext takes precedence.
                              properties:
                                gmsaCredentialSpec:
                                  description: GMSACredentialSpec is where the GMSA admission
                                    webhook (https://github.com/kubernetes-sigs/windows-gmsa)
                                    inlines the contents of the GMSA credential spec named
                                    by the GMSACredentialSpecName field.
                                  type: string
                                gmsaCredentialSpecName:
                                  description: GMSACredentialSpecName is the name of the
                                    GMSA credential spec to use.
                                  type: string
                                runAsUserName:
                                  description: The UserName in Windows to run the entrypoint
                                    of the container process. Defaults to the user specified
                                    in image metadata if unspecified. May also be set in
                                    PodSecurityContext. If set in both SecurityContext and
                                    PodSecurityContext, the value specified in SecurityContext
                                    takes precedence.
                                  type: string
                              type: object
                          type: object
                        tolerations:
                          description: 'Optional: Set tolerations'
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect> using
                              the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to match.
                                  Empty means match all taint effects. When specified, allowed
                                  values are NoSchedule, PreferNoSchedule and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration applies
                                  to. Empty means match all taint keys. If the key is empty,
                                  operator must be Exists; this combination means to match
                                  all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship to
                                  the value. Valid operators are Exists and Equal. Defaults
                                  to Equal. Exists is equivalent to wildcard for value,
                                  so that a pod can tolerate all taints of a particular
                                  category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period of
                                  time the toleration (which must be of effect NoExecute,
                                  otherwise this field is ignored) tolerates the taint.
                                  By default, it is not set, which means tolerate the taint
                                  forever (do not evict). Zero and negative values will
                                  be treated as 0 (evict immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration matches
                                  to. If the operator is Exists, the value should be empty,
                                  otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                        version:
                          pattern: '[a-zA-Z0-9\.-]+'
                          type: string
                      required:
                        - image
                        - repository
                        - version
                      type: object
                  required:
                    - dcgmExporter
                    - devicePlugin
                    - driver
                    - gfd
                    - operator
                    - toolkit
                  type: object
                status:
                  description: ClusterPolicyStatus defines the observed state of ClusterPolicy
                  properties:
                    state:
                      enum:
                        - ignored
                        - ready
                        - notReady
                      type: string
                  required:
                    - state
                  type: object
              type: object
          served: true
          storage: true
          subresources:
            status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: nvidia-clusterpolicy-crd
  namespace: default
---
apiVersion: v1
data:
  gpu-operator-components.yaml: |-
    ---
    # Source: gpu-operator/templates/resources-namespace.yaml
    apiVersion: v1
    kind: Namespace
    metadata:
      name: gpu-operator-resources
      labels:
        app.kubernetes.io/component: "gpu-operator"

        openshift.io/cluster-monitoring: "true"
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/serviceaccount.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: gpu-operator-node-feature-discovery
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
    ---
    # Source: gpu-operator/templates/serviceaccount.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: gpu-operator
      namespace: default
      labels:
        app.kubernetes.io/component: "gpu-operator"
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/configmap.yaml
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: gpu-operator-node-feature-discovery
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
    data:
      nfd-worker.conf: |
        sources:
          pci:
            deviceLabelFields:
            - vendor
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/rbac.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: gpu-operator-node-feature-discovery-master
    rules:
      - apiGroups:
          - ""
        resources:
          - nodes
        # when using command line flag --resource-labels to create extended resources
        # you will need to uncomment "- nodes/status"
        # - nodes/status
        verbs:
          - get
          - patch
          - update
    ---
    # Source: gpu-operator/templates/role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      creationTimestamp: null
      name: gpu-operator
      labels:
        app.kubernetes.io/component: "gpu-operator"

    rules:
      - apiGroups:
          - config.openshift.io
        resources:
          - proxies
        verbs:
          - get
      - apiGroups:
          - rbac.authorization.k8s.io
        resources:
          - roles
          - rolebindings
          - clusterroles
          - clusterrolebindings
        verbs:
          - '*'
      - apiGroups:
          - ""
        resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          - serviceaccounts
          - nodes
        verbs:
          - '*'
      - apiGroups:
          - ""
        resources:
          - namespaces
        verbs:
          - get
      - apiGroups:
          - apps
        resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
        verbs:
          - '*'
      - apiGroups:
          - monitoring.coreos.com
        resources:
          - servicemonitors
        verbs:
          - get
          - list
          - create
          - watch
      - apiGroups:
          - nvidia.com
        resources:
          - '*'
        verbs:
          - '*'
      - apiGroups:
          - scheduling.k8s.io
        resources:
          - priorityclasses
        verbs:
          - get
          - list
          - watch
          - create
      - apiGroups:
          - security.openshift.io
        resources:
          - securitycontextconstraints
        verbs:
          - '*'
      - apiGroups:
          - config.openshift.io
        resources:
          - clusterversions
        verbs:
          - get
          - list
          - watch
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/rbac.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: gpu-operator-node-feature-discovery-master
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: gpu-operator-node-feature-discovery-master
    subjects:
      - kind: ServiceAccount
        name: gpu-operator-node-feature-discovery
        namespace: default
    ---
    # Source: gpu-operator/templates/rolebinding.yaml
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: gpu-operator
      labels:
        app.kubernetes.io/component: "gpu-operator"

    subjects:
      - kind: ServiceAccount
        name: gpu-operator
        namespace: default
    roleRef:
      kind: ClusterRole
      name: gpu-operator
      apiGroup: rbac.authorization.k8s.io
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/service.yaml
    apiVersion: v1
    kind: Service
    metadata:
      name: gpu-operator-node-feature-discovery
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      type: ClusterIP
      ports:
        - name: api
          port: 8080
          protocol: TCP
          targetPort: api

      selector:
        app.kubernetes.io/component: master
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/daemonset-worker.yaml
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: gpu-operator-node-feature-discovery-worker
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/name: node-feature-discovery
          app.kubernetes.io/instance: gpu-operator
          app.kubernetes.io/component: worker
      template:
        metadata:
          labels:
            app.kubernetes.io/name: node-feature-discovery
            app.kubernetes.io/instance: gpu-operator
            app.kubernetes.io/component: worker
        spec:
          serviceAccountName: gpu-operator-node-feature-discovery
          securityContext:
            {}
          dnsPolicy: ClusterFirstWithHostNet
          containers:
            - name: node-feature-discovery-master
              securityContext:
                {}
              image: "quay.io/kubernetes_incubator/node-feature-discovery:v0.6.0"
              imagePullPolicy: IfNotPresent
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              command:
                - "nfd-worker"
              args:
                - "--sleep-interval=60s"
                - "--server=gpu-operator-node-feature-discovery:8080"
              volumeMounts:
                - name: host-boot
                  mountPath: "/host-boot"
                  readOnly: true
                - name: host-os-release
                  mountPath: "/host-etc/os-release"
                  readOnly: true
                - name: host-sys
                  mountPath: "/host-sys"
                - name: source-d
                  mountPath: "/etc/kubernetes/node-feature-discovery/source.d/"
                - name: features-d
                  mountPath: "/etc/kubernetes/node-feature-discovery/features.d/"
                - name: nfd-worker-config
                  mountPath: "/etc/kubernetes/node-feature-discovery/"
              resources:
                {}

          volumes:
            - name: host-boot
              hostPath:
                path: "/boot"
            - name: host-os-release
              hostPath:
                path: "/etc/os-release"
            - name: host-sys
              hostPath:
                path: "/sys"
            - name: source-d
              hostPath:
                path: "/etc/kubernetes/node-feature-discovery/source.d/"
            - name: features-d
              hostPath:
                path: "/etc/kubernetes/node-feature-discovery/features.d/"
            - name: nfd-worker-config
              configMap:
                name: gpu-operator-node-feature-discovery
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: ""
            - effect: NoSchedule
              key: nvidia.com/gpu
              operator: Equal
              value: present
    ---
    # Source: gpu-operator/charts/node-feature-discovery/templates/deployment-master.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: gpu-operator-node-feature-discovery-master
      namespace: default
      labels:
        helm.sh/chart: node-feature-discovery-2.0.0
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/instance: gpu-operator
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: node-feature-discovery
          app.kubernetes.io/instance: gpu-operator
          app.kubernetes.io/component: master
      template:
        metadata:
          labels:
            app.kubernetes.io/name: node-feature-discovery
            app.kubernetes.io/instance: gpu-operator
            app.kubernetes.io/component: master
        spec:
          serviceAccountName: gpu-operator-node-feature-discovery
          securityContext:
            {}
          containers:
            - name: node-feature-discovery-master
              securityContext:
                {}
              image: "quay.io/kubernetes_incubator/node-feature-discovery:v0.6.0"
              imagePullPolicy: IfNotPresent
              ports:
                - name: api
                  containerPort: 8080
                  protocol: TCP
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
              command:
                - "nfd-master"
              args:
                - --extra-label-ns=nvidia.com
              resources:
                {}
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: node-role.kubernetes.io/master
                        operator: In
                        values:
                          - ""
                  weight: 1
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: ""
    ---
    # Source: gpu-operator/templates/operator.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: gpu-operator
      namespace: default
      labels:
        app.kubernetes.io/component: "gpu-operator"

    spec:
      replicas: 1
      selector:
        matchLabels:

          app.kubernetes.io/component: "gpu-operator"
      template:
        metadata:
          labels:

            app.kubernetes.io/component: "gpu-operator"
          annotations:
            openshift.io/scc: restricted-readonly
        spec:
          serviceAccountName: gpu-operator
          containers:
            - name: gpu-operator
              image: nvcr.io/nvidia/gpu-operator:1.6.2
              imagePullPolicy: IfNotPresent
              command: ["gpu-operator"]
              args:
                - "--zap-time-encoding=epoch"
              env:
                - name: WATCH_NAMESPACE
                  value: ""
                - name: OPERATOR_NAME
                  value: "gpu-operator"
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
              volumeMounts:
                - name: host-os-release
                  mountPath: "/host-etc/os-release"
                  readOnly: true
              readinessProbe:
                exec:
                  command: ["stat", "/tmp/operator-sdk-ready"]
                initialDelaySeconds: 4
                periodSeconds: 10
                failureThreshold: 1
              ports:
                - containerPort: 60000
                  name: metrics
          volumes:
            - name: host-os-release
              hostPath:
                path: "/etc/os-release"
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: node-role.kubernetes.io/master
                        operator: In
                        values:
                          - ""
                  weight: 1
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Equal
              value: ""
    ---
    # Source: gpu-operator/templates/clusterpolicy.yaml
    apiVersion: nvidia.com/v1
    kind: ClusterPolicy
    metadata:
      name: cluster-policy
      namespace: default
      labels:
        app.kubernetes.io/component: "gpu-operator"

    spec:
      operator:
        defaultRuntime: containerd
        validator:
          repository: nvcr.io/nvidia/k8s
          image: cuda-sample
          version: vectoradd-cuda10.2
          imagePullPolicy: IfNotPresent
      driver:
        repository: nvcr.io/nvidia
        image: driver
        version: 460.32.03
        imagePullPolicy: IfNotPresent
        repoConfig:
          configMapName: ""
          destinationDir: ""
        licensingConfig:
          configMapName: ""
        tolerations:
          - effect: NoSchedule
            key: nvidia.com/gpu
            operator: Exists
        nodeSelector:
          nvidia.com/gpu.present: "true"
        securityContext:
          privileged: true
          seLinuxOptions:
            level: s0
      toolkit:
        repository: nvcr.io/nvidia/k8s
        image: container-toolkit
        version: 1.4.7-ubuntu18.04
        imagePullPolicy: IfNotPresent
        tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoSchedule
            key: nvidia.com/gpu
            operator: Exists
        nodeSelector:
          nvidia.com/gpu.present: "true"
        securityContext:
          privileged: true
          seLinuxOptions:
            level: s0
      devicePlugin:
        repository: nvcr.io/nvidia
        image: k8s-device-plugin
        version: v0.8.2-ubi8
        imagePullPolicy: IfNotPresent
        nodeSelector:
          nvidia.com/gpu.present: "true"
        securityContext:
          privileged: true
        args:
          - --mig-strategy=single
          - --pass-device-specs=true
          - --fail-on-init-error=true
          - --device-list-strategy=envvar
          - --nvidia-driver-root=/run/nvidia/driver
      dcgmExporter:
        repository: nvcr.io/nvidia/k8s
        image: dcgm-exporter
        version: 2.1.4-2.2.0-ubuntu20.04
        imagePullPolicy: IfNotPresent
        args:
          - -f
          - /etc/dcgm-exporter/dcp-metrics-included.csv
      gfd:
        repository: nvcr.io/nvidia
        image: gpu-feature-discovery
        version: v0.4.1
        imagePullPolicy: IfNotPresent
        nodeSelector:
          nvidia.com/gpu.present: "true"
        migStrategy: single
        discoveryIntervalSeconds: 60
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: nvidia-gpu-operator-components
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1alpha4
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-calico
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      cni: ${CLUSTER_NAME}-calico
  resources:
  - kind: ConfigMap
    name: cni-${CLUSTER_NAME}-calico
  strategy: ApplyOnce
---
apiVersion: v1
data:
  resources: |
    ---
    # Source: calico/templates/calico-config.yaml
    # This ConfigMap is used to configure a self-hosted Calico installation.
    kind: ConfigMap
    apiVersion: v1
    metadata:
      name: calico-config
      namespace: kube-system
    data:
      # Typha is disabled.
      typha_service_name: "none"
      # Configure the backend to use.
      calico_backend: "vxlan"
      # Configure the MTU to use for workload interfaces and tunnels.
      # - If Wireguard is enabled, set to your network MTU - 60
      # - Otherwise, if VXLAN or BPF mode is enabled, set to your network MTU - 50
      # - Otherwise, if IPIP is enabled, set to your network MTU - 20
      # - Otherwise, if not using any encapsulation, set to your network MTU.
      veth_mtu: "1440"

      # The CNI network configuration to install on each node. The special
      # values in this config will be automatically populated.
      cni_network_config: |-
        {
          "name": "k8s-pod-network",
          "cniVersion": "0.3.1",
          "plugins": [
            {
              "type": "calico",
              "log_level": "info",
              "log_file_path": "/var/log/calico/cni/cni.log",
              "datastore_type": "kubernetes",
              "nodename": "__KUBERNETES_NODE_NAME__",
              "mtu": __CNI_MTU__,
              "ipam": {
                  "type": "calico-ipam"
              },
              "policy": {
                  "type": "k8s"
              },
              "kubernetes": {
                  "kubeconfig": "__KUBECONFIG_FILEPATH__"
              }
            },
            {
              "type": "portmap",
              "snat": true,
              "capabilities": {"portMappings": true}
            },
            {
              "type": "bandwidth",
              "capabilities": {"bandwidth": true}
            }
          ]
        }

    ---
    # Source: calico/templates/kdd-crds.yaml


    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: bgpconfigurations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: BGPConfiguration
        listKind: BGPConfigurationList
        plural: bgpconfigurations
        singular: bgpconfiguration
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: BGPConfiguration contains the configuration for any BGP routing.
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: BGPConfigurationSpec contains the values of the BGP configuration.
                  properties:
                    asNumber:
                      description: 'ASNumber is the default AS number used by a node. [Default:
                      64512]'
                      format: int32
                      type: integer
                    communities:
                      description: Communities is a list of BGP community values and their
                        arbitrary names for tagging routes.
                      items:
                        description: Community contains standard or large community value
                          and its name.
                        properties:
                          name:
                            description: Name given to community value.
                            type: string
                          value:
                            description: Value must be of format `aa:nn` or `aa:nn:mm`.
                              For standard community use `aa:nn` format, where `aa` and
                              `nn` are 16 bit number. For large community use `aa:nn:mm`
                              format, where `aa`, `nn` and `mm` are 32 bit number. Where,
                              `aa` is an AS Number, `nn` and `mm` are per-AS identifier.
                            pattern: ^(\d+):(\d+)$|^(\d+):(\d+):(\d+)$
                            type: string
                        type: object
                      type: array
                    listenPort:
                      description: ListenPort is the port where BGP protocol should listen.
                        Defaults to 179
                      maximum: 65535
                      minimum: 1
                      type: integer
                    logSeverityScreen:
                      description: 'LogSeverityScreen is the log severity above which logs
                      are sent to the stdout. [Default: INFO]'
                      type: string
                    nodeToNodeMeshEnabled:
                      description: 'NodeToNodeMeshEnabled sets whether full node to node
                      BGP mesh is enabled. [Default: true]'
                      type: boolean
                    prefixAdvertisements:
                      description: PrefixAdvertisements contains per-prefix advertisement
                        configuration.
                      items:
                        description: PrefixAdvertisement configures advertisement properties
                          for the specified CIDR.
                        properties:
                          cidr:
                            description: CIDR for which properties should be advertised.
                            type: string
                          communities:
                            description: Communities can be list of either community names
                              already defined in `Specs.Communities` or community value
                              of format `aa:nn` or `aa:nn:mm`. For standard community use
                              `aa:nn` format, where `aa` and `nn` are 16 bit number. For
                              large community use `aa:nn:mm` format, where `aa`, `nn` and
                              `mm` are 32 bit number. Where,`aa` is an AS Number, `nn` and
                              `mm` are per-AS identifier.
                            items:
                              type: string
                            type: array
                        type: object
                      type: array
                    serviceClusterIPs:
                      description: ServiceClusterIPs are the CIDR blocks from which service
                        cluster IPs are allocated. If specified, Calico will advertise these
                        blocks, as well as any cluster IPs within them.
                      items:
                        description: ServiceClusterIPBlock represents a single allowed ClusterIP
                          CIDR block.
                        properties:
                          cidr:
                            type: string
                        type: object
                      type: array
                    serviceExternalIPs:
                      description: ServiceExternalIPs are the CIDR blocks for Kubernetes
                        Service External IPs. Kubernetes Service ExternalIPs will only be
                        advertised if they are within one of these blocks.
                      items:
                        description: ServiceExternalIPBlock represents a single allowed
                          External IP CIDR block.
                        properties:
                          cidr:
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: bgppeers.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: BGPPeer
        listKind: BGPPeerList
        plural: bgppeers
        singular: bgppeer
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: BGPPeerSpec contains the specification for a BGPPeer resource.
                  properties:
                    asNumber:
                      description: The AS Number of the peer.
                      format: int32
                      type: integer
                    keepOriginalNextHop:
                      description: Option to keep the original nexthop field when routes
                        are sent to a BGP Peer. Setting "true" configures the selected BGP
                        Peers node to use the "next hop keep;" instead of "next hop self;"(default)
                        in the specific branch of the Node on "bird.cfg".
                      type: boolean
                    node:
                      description: The node name identifying the Calico node instance that
                        is peering with this peer. If this is not set, this represents a
                        global peer, i.e. a peer that peers with every node in the deployment.
                      type: string
                    nodeSelector:
                      description: Selector for the nodes that should have this peering.  When
                        this is set, the Node field must be empty.
                      type: string
                    password:
                      description: Optional BGP password for the peerings generated by this
                        BGPPeer resource.
                      properties:
                        secretKeyRef:
                          description: Selects a key of a secret in the node pod's namespace.
                          properties:
                            key:
                              description: The key of the secret to select from.  Must be
                                a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must be
                                defined
                              type: boolean
                          required:
                            - key
                          type: object
                      type: object
                    peerIP:
                      description: The IP address of the peer followed by an optional port
                        number to peer with. If port number is given, format should be `[<IPv6>]:port`
                        or `<IPv4>:<port>` for IPv4. If optional port number is not set,
                        and this peer IP and ASNumber belongs to a calico/node with ListenPort
                        set in BGPConfiguration, then we use that port to peer.
                      type: string
                    peerSelector:
                      description: Selector for the remote nodes to peer with.  When this
                        is set, the PeerIP and ASNumber fields must be empty.  For each
                        peering between the local node and selected remote nodes, we configure
                        an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified,
                        and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The
                        remote AS number comes from the remote node’s NodeBGPSpec.ASNumber,
                        or the global default if that is not set.
                      type: string
                  required:
                    - asNumber
                    - peerIP
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: blockaffinities.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: BlockAffinity
        listKind: BlockAffinityList
        plural: blockaffinities
        singular: blockaffinity
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: BlockAffinitySpec contains the specification for a BlockAffinity
                    resource.
                  properties:
                    cidr:
                      type: string
                    deleted:
                      description: Deleted indicates that this block affinity is being deleted.
                        This field is a string for compatibility with older releases that
                        mistakenly treat this field as a string.
                      type: string
                    node:
                      type: string
                    state:
                      type: string
                  required:
                    - cidr
                    - deleted
                    - node
                    - state
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: clusterinformations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: ClusterInformation
        listKind: ClusterInformationList
        plural: clusterinformations
        singular: clusterinformation
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: ClusterInformation contains the cluster specific information.
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: ClusterInformationSpec contains the values of describing
                    the cluster.
                  properties:
                    calicoVersion:
                      description: CalicoVersion is the version of Calico that the cluster
                        is running
                      type: string
                    clusterGUID:
                      description: ClusterGUID is the GUID of the cluster
                      type: string
                    clusterType:
                      description: ClusterType describes the type of the cluster
                      type: string
                    datastoreReady:
                      description: DatastoreReady is used during significant datastore migrations
                        to signal to components such as Felix that it should wait before
                        accessing the datastore.
                      type: boolean
                    variant:
                      description: Variant declares which variant of Calico should be active.
                      type: string
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: felixconfigurations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: FelixConfiguration
        listKind: FelixConfigurationList
        plural: felixconfigurations
        singular: felixconfiguration
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: Felix Configuration contains the configuration for Felix.
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: FelixConfigurationSpec contains the values of the Felix configuration.
                  properties:
                    allowIPIPPacketsFromWorkloads:
                      description: 'AllowIPIPPacketsFromWorkloads controls whether Felix
                      will add a rule to drop IPIP encapsulated traffic from workloads
                      [Default: false]'
                      type: boolean
                    allowVXLANPacketsFromWorkloads:
                      description: 'AllowVXLANPacketsFromWorkloads controls whether Felix
                      will add a rule to drop VXLAN encapsulated traffic from workloads
                      [Default: false]'
                      type: boolean
                    awsSrcDstCheck:
                      description: 'Set source-destination-check on AWS EC2 instances. Accepted
                      value must be one of "DoNothing", "Enabled" or "Disabled". [Default:
                      DoNothing]'
                      enum:
                        - DoNothing
                        - Enable
                        - Disable
                      type: string
                    bpfConnectTimeLoadBalancingEnabled:
                      description: 'BPFConnectTimeLoadBalancingEnabled when in BPF mode,
                      controls whether Felix installs the connection-time load balancer.  The
                      connect-time load balancer is required for the host to be able to
                      reach Kubernetes services and it improves the performance of pod-to-service
                      connections.  The only reason to disable it is for debugging purposes.  [Default:
                      true]'
                      type: boolean
                    bpfDataIfacePattern:
                      description: 'BPFDataIfacePattern is a regular expression that controls
                      which interfaces Felix should attach BPF programs to in order to
                      catch traffic to/from the network.  This needs to match the interfaces
                      that Calico workload traffic flows over as well as any interfaces
                      that handle incoming traffic to nodeports and services from outside
                      the cluster.  It should not match the workload interfaces (usually
                      named cali...). [Default: ^(en.*|eth.*|tunl0$)]'
                      type: string
                    bpfDisableUnprivileged:
                      description: 'BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled
                      sysctl to disable unprivileged use of BPF.  This ensures that unprivileged
                      users cannot access Calico''s BPF maps and cannot insert their own
                      BPF programs to interfere with Calico''s. [Default: true]'
                      type: boolean
                    bpfEnabled:
                      description: 'BPFEnabled, if enabled Felix will use the BPF dataplane.
                      [Default: false]'
                      type: boolean
                    bpfExternalServiceMode:
                      description: 'BPFExternalServiceMode in BPF mode, controls how connections
                      from outside the cluster to services (node ports and cluster IPs)
                      are forwarded to remote workloads.  If set to "Tunnel" then both
                      request and response traffic is tunneled to the remote node.  If
                      set to "DSR", the request traffic is tunneled but the response traffic
                      is sent directly from the remote node.  In "DSR" mode, the remote
                      node appears to use the IP of the ingress node; this requires a
                      permissive L2 network.  [Default: Tunnel]'
                      type: string
                    bpfKubeProxyEndpointSlicesEnabled:
                      description: BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls
                        whether Felix's embedded kube-proxy accepts EndpointSlices or not.
                      type: boolean
                    bpfKubeProxyIptablesCleanupEnabled:
                      description: 'BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF
                      mode, Felix will proactively clean up the upstream Kubernetes kube-proxy''s
                      iptables chains.  Should only be enabled if kube-proxy is not running.  [Default:
                      true]'
                      type: boolean
                    bpfKubeProxyMinSyncPeriod:
                      description: 'BPFKubeProxyMinSyncPeriod, in BPF mode, controls the
                      minimum time between updates to the dataplane for Felix''s embedded
                      kube-proxy.  Lower values give reduced set-up latency.  Higher values
                      reduce Felix CPU usage by batching up more work.  [Default: 1s]'
                      type: string
                    bpfLogLevel:
                      description: 'BPFLogLevel controls the log level of the BPF programs
                      when in BPF dataplane mode.  One of "Off", "Info", or "Debug".  The
                      logs are emitted to the BPF trace pipe, accessible with the command
                      `tc exec bpf debug`. [Default: Off].'
                      type: string
                    chainInsertMode:
                      description: 'ChainInsertMode controls whether Felix hooks the kernel’s
                      top-level iptables chains by inserting a rule at the top of the
                      chain or by appending a rule at the bottom. insert is the safe default
                      since it prevents Calico’s rules from being bypassed. If you switch
                      to append mode, be sure that the other rules in the chains signal
                      acceptance by falling through to the Calico rules, otherwise the
                      Calico policy will be bypassed. [Default: insert]'
                      type: string
                    dataplaneDriver:
                      type: string
                    debugDisableLogDropping:
                      type: boolean
                    debugMemoryProfilePath:
                      type: string
                    debugSimulateCalcGraphHangAfter:
                      type: string
                    debugSimulateDataplaneHangAfter:
                      type: string
                    defaultEndpointToHostAction:
                      description: 'DefaultEndpointToHostAction controls what happens to
                      traffic that goes from a workload endpoint to the host itself (after
                      the traffic hits the endpoint egress policy). By default Calico
                      blocks traffic from workload endpoints to the host itself with an
                      iptables “DROP” action. If you want to allow some or all traffic
                      from endpoint to host, set this parameter to RETURN or ACCEPT. Use
                      RETURN if you have your own rules in the iptables “INPUT” chain;
                      Calico will insert its rules at the top of that chain, then “RETURN”
                      packets to the “INPUT” chain once it has completed processing workload
                      endpoint egress policy. Use ACCEPT to unconditionally accept packets
                      from workloads after processing workload endpoint egress policy.
                      [Default: Drop]'
                      type: string
                    deviceRouteProtocol:
                      description: This defines the route protocol added to programmed device
                        routes, by default this will be RTPROT_BOOT when left blank.
                      type: integer
                    deviceRouteSourceAddress:
                      description: This is the source address to use on programmed device
                        routes. By default the source address is left blank, leaving the
                        kernel to choose the source address used.
                      type: string
                    disableConntrackInvalidCheck:
                      type: boolean
                    endpointReportingDelay:
                      type: string
                    endpointReportingEnabled:
                      type: boolean
                    externalNodesList:
                      description: ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes
                        which may source tunnel traffic and have the tunneled traffic be
                        accepted at calico nodes.
                      items:
                        type: string
                      type: array
                    failsafeInboundHostPorts:
                      description: 'FailsafeInboundHostPorts is a comma-delimited list of
                      UDP/TCP ports that Felix will allow incoming traffic to host endpoints
                      on irrespective of the security policy. This is useful to avoid
                      accidentally cutting off a host with incorrect configuration. Each
                      port should be specified as tcp:<port-number> or udp:<port-number>.
                      For back-compatibility, if the protocol is not specified, it defaults
                      to “tcp”. To disable all inbound host ports, use the value none.
                      The default value allows ssh access and DHCP. [Default: tcp:22,
                      udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]'
                      items:
                        description: ProtoPort is combination of protocol and port, both
                          must be specified.
                        properties:
                          port:
                            type: integer
                          protocol:
                            type: string
                        required:
                          - port
                          - protocol
                        type: object
                      type: array
                    failsafeOutboundHostPorts:
                      description: 'FailsafeOutboundHostPorts is a comma-delimited list
                      of UDP/TCP ports that Felix will allow outgoing traffic from host
                      endpoints to irrespective of the security policy. This is useful
                      to avoid accidentally cutting off a host with incorrect configuration.
                      Each port should be specified as tcp:<port-number> or udp:<port-number>.
                      For back-compatibility, if the protocol is not specified, it defaults
                      to “tcp”. To disable all outbound host ports, use the value none.
                      The default value opens etcd’s standard ports to ensure that Felix
                      does not get cut off from etcd as well as allowing DHCP and DNS.
                      [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667,
                      udp:53, udp:67]'
                      items:
                        description: ProtoPort is combination of protocol and port, both
                          must be specified.
                        properties:
                          port:
                            type: integer
                          protocol:
                            type: string
                        required:
                          - port
                          - protocol
                        type: object
                      type: array
                    featureDetectOverride:
                      description: FeatureDetectOverride is used to override the feature
                        detection. Values are specified in a comma separated list with no
                        spaces, example; "SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=".
                        "true" or "false" will force the feature, empty or omitted values
                        are auto-detected.
                      type: string
                    genericXDPEnabled:
                      description: 'GenericXDPEnabled enables Generic XDP so network cards
                      that don''t support XDP offload or driver modes can use XDP. This
                      is not recommended since it doesn''t provide better performance
                      than iptables. [Default: false]'
                      type: boolean
                    healthEnabled:
                      type: boolean
                    healthHost:
                      type: string
                    healthPort:
                      type: integer
                    interfaceExclude:
                      description: 'InterfaceExclude is a comma-separated list of interfaces
                      that Felix should exclude when monitoring for host endpoints. The
                      default value ensures that Felix ignores Kubernetes'' IPVS dummy
                      interface, which is used internally by kube-proxy. If you want to
                      exclude multiple interface names using a single value, the list
                      supports regular expressions. For regular expressions you must wrap
                      the value with ''/''. For example having values ''/^kube/,veth1''
                      will exclude all interfaces that begin with ''kube'' and also the
                      interface ''veth1''. [Default: kube-ipvs0]'
                      type: string
                    interfacePrefix:
                      description: 'InterfacePrefix is the interface name prefix that identifies
                      workload endpoints and so distinguishes them from host endpoint
                      interfaces. Note: in environments other than bare metal, the orchestrators
                      configure this appropriately. For example our Kubernetes and Docker
                      integrations set the ‘cali’ value, and our OpenStack integration
                      sets the ‘tap’ value. [Default: cali]'
                      type: string
                    interfaceRefreshInterval:
                      description: InterfaceRefreshInterval is the period at which Felix
                        rescans local interfaces to verify their state. The rescan can be
                        disabled by setting the interval to 0.
                      type: string
                    ipipEnabled:
                      type: boolean
                    ipipMTU:
                      description: 'IPIPMTU is the MTU to set on the tunnel device. See
                      Configuring MTU [Default: 1440]'
                      type: integer
                    ipsetsRefreshInterval:
                      description: 'IpsetsRefreshInterval is the period at which Felix re-checks
                      all iptables state to ensure that no other process has accidentally
                      broken Calico’s rules. Set to 0 to disable iptables refresh. [Default:
                      90s]'
                      type: string
                    iptablesBackend:
                      description: IptablesBackend specifies which backend of iptables will
                        be used. The default is legacy.
                      type: string
                    iptablesFilterAllowAction:
                      type: string
                    iptablesLockFilePath:
                      description: 'IptablesLockFilePath is the location of the iptables
                      lock file. You may need to change this if the lock file is not in
                      its standard location (for example if you have mapped it into Felix’s
                      container at a different path). [Default: /run/xtables.lock]'
                      type: string
                    iptablesLockProbeInterval:
                      description: 'IptablesLockProbeInterval is the time that Felix will
                      wait between attempts to acquire the iptables lock if it is not
                      available. Lower values make Felix more responsive when the lock
                      is contended, but use more CPU. [Default: 50ms]'
                      type: string
                    iptablesLockTimeout:
                      description: 'IptablesLockTimeout is the time that Felix will wait
                      for the iptables lock, or 0, to disable. To use this feature, Felix
                      must share the iptables lock file with all other processes that
                      also take the lock. When running Felix inside a container, this
                      requires the /run directory of the host to be mounted into the calico/node
                      or calico/felix container. [Default: 0s disabled]'
                      type: string
                    iptablesMangleAllowAction:
                      type: string
                    iptablesMarkMask:
                      description: 'IptablesMarkMask is the mask that Felix selects its
                      IPTables Mark bits from. Should be a 32 bit hexadecimal number with
                      at least 8 bits set, none of which clash with any other mark bits
                      in use on the system. [Default: 0xff000000]'
                      format: int32
                      type: integer
                    iptablesNATOutgoingInterfaceFilter:
                      type: string
                    iptablesPostWriteCheckInterval:
                      description: 'IptablesPostWriteCheckInterval is the period after Felix
                      has done a write to the dataplane that it schedules an extra read
                      back in order to check the write was not clobbered by another process.
                      This should only occur if another application on the system doesn’t
                      respect the iptables lock. [Default: 1s]'
                      type: string
                    iptablesRefreshInterval:
                      description: 'IptablesRefreshInterval is the period at which Felix
                      re-checks the IP sets in the dataplane to ensure that no other process
                      has accidentally broken Calico’s rules. Set to 0 to disable IP sets
                      refresh. Note: the default for this value is lower than the other
                      refresh intervals as a workaround for a Linux kernel bug that was
                      fixed in kernel version 4.11. If you are using v4.11 or greater
                      you may want to set this to, a higher value to reduce Felix CPU
                      usage. [Default: 10s]'
                      type: string
                    ipv6Support:
                      type: boolean
                    kubeNodePortRanges:
                      description: 'KubeNodePortRanges holds list of port ranges used for
                      service node ports. Only used if felix detects kube-proxy running
                      in ipvs mode. Felix uses these ranges to separate host and workload
                      traffic. [Default: 30000:32767].'
                      items:
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^.*
                        x-kubernetes-int-or-string: true
                      type: array
                    logFilePath:
                      description: 'LogFilePath is the full path to the Felix log. Set to
                      none to disable file logging. [Default: /var/log/calico/felix.log]'
                      type: string
                    logPrefix:
                      description: 'LogPrefix is the log prefix that Felix uses when rendering
                      LOG rules. [Default: calico-packet]'
                      type: string
                    logSeverityFile:
                      description: 'LogSeverityFile is the log severity above which logs
                      are sent to the log file. [Default: Info]'
                      type: string
                    logSeverityScreen:
                      description: 'LogSeverityScreen is the log severity above which logs
                      are sent to the stdout. [Default: Info]'
                      type: string
                    logSeveritySys:
                      description: 'LogSeveritySys is the log severity above which logs
                      are sent to the syslog. Set to None for no logging to syslog. [Default:
                      Info]'
                      type: string
                    maxIpsetSize:
                      type: integer
                    metadataAddr:
                      description: 'MetadataAddr is the IP address or domain name of the
                      server that can answer VM queries for cloud-init metadata. In OpenStack,
                      this corresponds to the machine running nova-api (or in Ubuntu,
                      nova-api-metadata). A value of none (case insensitive) means that
                      Felix should not set up any NAT rule for the metadata path. [Default:
                      127.0.0.1]'
                      type: string
                    metadataPort:
                      description: 'MetadataPort is the port of the metadata server. This,
                      combined with global.MetadataAddr (if not ‘None’), is used to set
                      up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort.
                      In most cases this should not need to be changed [Default: 8775].'
                      type: integer
                    natOutgoingAddress:
                      description: NATOutgoingAddress specifies an address to use when performing
                        source NAT for traffic in a natOutgoing pool that is leaving the
                        network. By default the address used is an address on the interface
                        the traffic is leaving on (ie it uses the iptables MASQUERADE target)
                      type: string
                    natPortRange:
                      anyOf:
                        - type: integer
                        - type: string
                      description: NATPortRange specifies the range of ports that is used
                        for port mapping when doing outgoing NAT. When unset the default
                        behavior of the network stack is used.
                      pattern: ^.*
                      x-kubernetes-int-or-string: true
                    netlinkTimeout:
                      type: string
                    openstackRegion:
                      description: 'OpenstackRegion is the name of the region that a particular
                      Felix belongs to. In a multi-region Calico/OpenStack deployment,
                      this must be configured somehow for each Felix (here in the datamodel,
                      or in felix.cfg or the environment on each compute node), and must
                      match the [calico] openstack_region value configured in neutron.conf
                      on each node. [Default: Empty]'
                      type: string
                    policySyncPathPrefix:
                      description: 'PolicySyncPathPrefix is used to by Felix to communicate
                      policy changes to external services, like Application layer policy.
                      [Default: Empty]'
                      type: string
                    prometheusGoMetricsEnabled:
                      description: 'PrometheusGoMetricsEnabled disables Go runtime metrics
                      collection, which the Prometheus client does by default, when set
                      to false. This reduces the number of metrics reported, reducing
                      Prometheus load. [Default: true]'
                      type: boolean
                    prometheusMetricsEnabled:
                      description: 'PrometheusMetricsEnabled enables the Prometheus metrics
                      server in Felix if set to true. [Default: false]'
                      type: boolean
                    prometheusMetricsHost:
                      description: 'PrometheusMetricsHost is the host that the Prometheus
                      metrics server should bind to. [Default: empty]'
                      type: string
                    prometheusMetricsPort:
                      description: 'PrometheusMetricsPort is the TCP port that the Prometheus
                      metrics server should bind to. [Default: 9091]'
                      type: integer
                    prometheusProcessMetricsEnabled:
                      description: 'PrometheusProcessMetricsEnabled disables process metrics
                      collection, which the Prometheus client does by default, when set
                      to false. This reduces the number of metrics reported, reducing
                      Prometheus load. [Default: true]'
                      type: boolean
                    removeExternalRoutes:
                      description: Whether or not to remove device routes that have not
                        been programmed by Felix. Disabling this will allow external applications
                        to also add device routes. This is enabled by default which means
                        we will remove externally added routes.
                      type: boolean
                    reportingInterval:
                      description: 'ReportingInterval is the interval at which Felix reports
                      its status into the datastore or 0 to disable. Must be non-zero
                      in OpenStack deployments. [Default: 30s]'
                      type: string
                    reportingTTL:
                      description: 'ReportingTTL is the time-to-live setting for process-wide
                      status reports. [Default: 90s]'
                      type: string
                    routeRefreshInterval:
                      description: 'RouterefreshInterval is the period at which Felix re-checks
                      the routes in the dataplane to ensure that no other process has
                      accidentally broken Calico’s rules. Set to 0 to disable route refresh.
                      [Default: 90s]'
                      type: string
                    routeSource:
                      description: 'RouteSource configures where Felix gets its routing
                      information. - WorkloadIPs: use workload endpoints to construct
                      routes. - CalicoIPAM: the default - use IPAM data to construct routes.'
                      type: string
                    routeTableRange:
                      description: Calico programs additional Linux route tables for various
                        purposes.  RouteTableRange specifies the indices of the route tables
                        that Calico should use.
                      properties:
                        max:
                          type: integer
                        min:
                          type: integer
                      required:
                        - max
                        - min
                      type: object
                    sidecarAccelerationEnabled:
                      description: 'SidecarAccelerationEnabled enables experimental sidecar
                      acceleration [Default: false]'
                      type: boolean
                    usageReportingEnabled:
                      description: 'UsageReportingEnabled reports anonymous Calico version
                      number and cluster size to projectcalico.org. Logs warnings returned
                      by the usage server. For example, if a significant security vulnerability
                      has been discovered in the version of Calico being used. [Default:
                      true]'
                      type: boolean
                    usageReportingInitialDelay:
                      description: 'UsageReportingInitialDelay controls the minimum delay
                      before Felix makes a report. [Default: 300s]'
                      type: string
                    usageReportingInterval:
                      description: 'UsageReportingInterval controls the interval at which
                      Felix makes reports. [Default: 86400s]'
                      type: string
                    useInternalDataplaneDriver:
                      type: boolean
                    vxlanEnabled:
                      type: boolean
                    vxlanMTU:
                      description: 'VXLANMTU is the MTU to set on the tunnel device. See
                      Configuring MTU [Default: 1440]'
                      type: integer
                    vxlanPort:
                      type: integer
                    vxlanVNI:
                      type: integer
                    wireguardEnabled:
                      description: 'WireguardEnabled controls whether Wireguard is enabled.
                      [Default: false]'
                      type: boolean
                    wireguardInterfaceName:
                      description: 'WireguardInterfaceName specifies the name to use for
                      the Wireguard interface. [Default: wg.calico]'
                      type: string
                    wireguardListeningPort:
                      description: 'WireguardListeningPort controls the listening port used
                      by Wireguard. [Default: 51820]'
                      type: integer
                    wireguardMTU:
                      description: 'WireguardMTU controls the MTU on the Wireguard interface.
                      See Configuring MTU [Default: 1420]'
                      type: integer
                    wireguardRoutingRulePriority:
                      description: 'WireguardRoutingRulePriority controls the priority value
                      to use for the Wireguard routing rule. [Default: 99]'
                      type: integer
                    xdpEnabled:
                      description: 'XDPEnabled enables XDP acceleration for suitable untracked
                      incoming deny rules. [Default: true]'
                      type: boolean
                    xdpRefreshInterval:
                      description: 'XDPRefreshInterval is the period at which Felix re-checks
                      all XDP state to ensure that no other process has accidentally broken
                      Calico''s BPF maps or attached programs. Set to 0 to disable XDP
                      refresh. [Default: 90s]'
                      type: string
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: globalnetworkpolicies.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: GlobalNetworkPolicy
        listKind: GlobalNetworkPolicyList
        plural: globalnetworkpolicies
        singular: globalnetworkpolicy
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  properties:
                    applyOnForward:
                      description: ApplyOnForward indicates to apply the rules in this policy
                        on forward traffic.
                      type: boolean
                    doNotTrack:
                      description: DoNotTrack indicates whether packets matched by the rules
                        in this policy should go through the data plane's connection tracking,
                        such as Linux conntrack.  If True, the rules in this policy are
                        applied before any data plane connection tracking, and packets allowed
                        by this policy are marked as not to be tracked.
                      type: boolean
                    egress:
                      description: The ordered set of egress rules.  Each rule contains
                        a set of packet match criteria and a corresponding action to apply.
                      items:
                        description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with ”Not”. All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                        properties:
                          action:
                            type: string
                          destination:
                            description: Destination contains the match criteria that apply
                              to destination entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                          http:
                            description: HTTP contains match criteria that apply to HTTP
                              requests.
                            properties:
                              methods:
                                description: Methods is an optional field that restricts
                                  the rule to apply only to HTTP requests that use one of
                                  the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                  methods are OR'd together.
                                items:
                                  type: string
                                type: array
                              paths:
                                description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                                items:
                                  description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                  properties:
                                    exact:
                                      type: string
                                    prefix:
                                      type: string
                                  type: object
                                type: array
                            type: object
                          icmp:
                            description: ICMP is an optional field that restricts the rule
                              to apply to a specific type and code of ICMP traffic.  This
                              should only be specified if the Protocol field is set to "ICMP"
                              or "ICMPv6".
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          ipVersion:
                            description: IPVersion is an optional field that restricts the
                              rule to only match a specific IP version.
                            type: integer
                          metadata:
                            description: Metadata contains additional information for this
                              rule
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: Annotations is a set of key value pairs that
                                  give extra information about the rule
                                type: object
                            type: object
                          notICMP:
                            description: NotICMP is the negated version of the ICMP field.
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          notProtocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: NotProtocol is the negated version of the Protocol
                              field.
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          protocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          source:
                            description: Source contains the match criteria that apply to
                              source entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                        required:
                          - action
                        type: object
                      type: array
                    ingress:
                      description: The ordered set of ingress rules.  Each rule contains
                        a set of packet match criteria and a corresponding action to apply.
                      items:
                        description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with ”Not”. All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                        properties:
                          action:
                            type: string
                          destination:
                            description: Destination contains the match criteria that apply
                              to destination entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                          http:
                            description: HTTP contains match criteria that apply to HTTP
                              requests.
                            properties:
                              methods:
                                description: Methods is an optional field that restricts
                                  the rule to apply only to HTTP requests that use one of
                                  the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                  methods are OR'd together.
                                items:
                                  type: string
                                type: array
                              paths:
                                description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                                items:
                                  description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                  properties:
                                    exact:
                                      type: string
                                    prefix:
                                      type: string
                                  type: object
                                type: array
                            type: object
                          icmp:
                            description: ICMP is an optional field that restricts the rule
                              to apply to a specific type and code of ICMP traffic.  This
                              should only be specified if the Protocol field is set to "ICMP"
                              or "ICMPv6".
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          ipVersion:
                            description: IPVersion is an optional field that restricts the
                              rule to only match a specific IP version.
                            type: integer
                          metadata:
                            description: Metadata contains additional information for this
                              rule
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: Annotations is a set of key value pairs that
                                  give extra information about the rule
                                type: object
                            type: object
                          notICMP:
                            description: NotICMP is the negated version of the ICMP field.
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          notProtocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: NotProtocol is the negated version of the Protocol
                              field.
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          protocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          source:
                            description: Source contains the match criteria that apply to
                              source entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                        required:
                          - action
                        type: object
                      type: array
                    namespaceSelector:
                      description: NamespaceSelector is an optional field for an expression
                        used to select a pod based on namespaces.
                      type: string
                    order:
                      description: Order is an optional field that specifies the order in
                        which the policy is applied. Policies with higher "order" are applied
                        after those with lower order.  If the order is omitted, it may be
                        considered to be "infinite" - i.e. the policy will be applied last.  Policies
                        with identical order will be applied in alphanumerical order based
                        on the Policy "Name".
                      type: number
                    preDNAT:
                      description: PreDNAT indicates to apply the rules in this policy before
                        any DNAT.
                      type: boolean
                    selector:
                      description: "The selector is an expression used to pick pick out
                      the endpoints that the policy should be applied to. \n Selector
                      expressions follow this syntax: \n \tlabel == \"string_literal\"
                      \ ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"
                      \  ->  not equal; also matches if label is not present \tlabel in
                      { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is
                      one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\",
                      ... }  ->  true if the value of label X is not one of \"a\", \"b\",
                      \"c\" \thas(label_name)  -> True if that label is present \t! expr
                      -> negation of expr \texpr && expr  -> Short-circuit and \texpr
                      || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall()
                      or the empty selector -> matches all endpoints. \n Label names are
                      allowed to contain alphanumerics, -, _ and /. String literals are
                      more permissive but they do not support escape characters. \n Examples
                      (with made-up labels): \n \ttype == \"webserver\" && deployment
                      == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment !=
                      \"dev\" \t! has(label_name)"
                      type: string
                    serviceAccountSelector:
                      description: ServiceAccountSelector is an optional field for an expression
                        used to select a pod based on service accounts.
                      type: string
                    types:
                      description: "Types indicates whether this policy applies to ingress,
                      or to egress, or to both.  When not explicitly specified (and so
                      the value on creation is empty or nil), Calico defaults Types according
                      to what Ingress and Egress rules are present in the policy.  The
                      default is: \n - [ PolicyTypeIngress ], if there are no Egress rules
                      (including the case where there are   also no Ingress rules) \n
                      - [ PolicyTypeEgress ], if there are Egress rules but no Ingress
                      rules \n - [ PolicyTypeIngress, PolicyTypeEgress ], if there are
                      both Ingress and Egress rules. \n When the policy is read back again,
                      Types will always be one of these values, never empty or nil."
                      items:
                        description: PolicyType enumerates the possible values of the PolicySpec
                          Types field.
                        type: string
                      type: array
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: globalnetworksets.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: GlobalNetworkSet
        listKind: GlobalNetworkSetList
        plural: globalnetworksets
        singular: globalnetworkset
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs
                that share labels to allow rules to refer to them via selectors.  The labels
                of GlobalNetworkSet are not namespaced.
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: GlobalNetworkSetSpec contains the specification for a NetworkSet
                    resource.
                  properties:
                    nets:
                      description: The list of IP networks that belong to this set.
                      items:
                        type: string
                      type: array
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: hostendpoints.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: HostEndpoint
        listKind: HostEndpointList
        plural: hostendpoints
        singular: hostendpoint
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: HostEndpointSpec contains the specification for a HostEndpoint
                    resource.
                  properties:
                    expectedIPs:
                      description: "The expected IP addresses (IPv4 and IPv6) of the endpoint.
                      If \"InterfaceName\" is not present, Calico will look for an interface
                      matching any of the IPs in the list and apply policy to that. Note:
                      \tWhen using the selector match criteria in an ingress or egress
                      security Policy \tor Profile, Calico converts the selector into
                      a set of IP addresses. For host \tendpoints, the ExpectedIPs field
                      is used for that purpose. (If only the interface \tname is specified,
                      Calico does not learn the IPs of the interface for use in match
                      \tcriteria.)"
                      items:
                        type: string
                      type: array
                    interfaceName:
                      description: "Either \"*\", or the name of a specific Linux interface
                      to apply policy to; or empty.  \"*\" indicates that this HostEndpoint
                      governs all traffic to, from or through the default network namespace
                      of the host named by the \"Node\" field; entering and leaving that
                      namespace via any interface, including those from/to non-host-networked
                      local workloads. \n If InterfaceName is not \"*\", this HostEndpoint
                      only governs traffic that enters or leaves the host through the
                      specific interface named by InterfaceName, or - when InterfaceName
                      is empty - through the specific interface that has one of the IPs
                      in ExpectedIPs. Therefore, when InterfaceName is empty, at least
                      one expected IP must be specified.  Only external interfaces (such
                      as “eth0”) are supported here; it isn't possible for a HostEndpoint
                      to protect traffic through a specific local workload interface.
                      \n Note: Only some kinds of policy are implemented for \"*\" HostEndpoints;
                      initially just pre-DNAT policy.  Please check Calico documentation
                      for the latest position."
                      type: string
                    node:
                      description: The node name identifying the Calico node instance.
                      type: string
                    ports:
                      description: Ports contains the endpoint's named ports, which may
                        be referenced in security policy rules.
                      items:
                        properties:
                          name:
                            type: string
                          port:
                            type: integer
                          protocol:
                            anyOf:
                              - type: integer
                              - type: string
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                        required:
                          - name
                          - port
                          - protocol
                        type: object
                      type: array
                    profiles:
                      description: A list of identifiers of security Profile objects that
                        apply to this endpoint. Each profile is applied in the order that
                        they appear in this list.  Profile rules are applied after the selector-based
                        security policy.
                      items:
                        type: string
                      type: array
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: ipamblocks.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMBlock
        listKind: IPAMBlockList
        plural: ipamblocks
        singular: ipamblock
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: IPAMBlockSpec contains the specification for an IPAMBlock
                    resource.
                  properties:
                    affinity:
                      type: string
                    allocations:
                      items:
                        type: integer
                        # TODO: This nullable is manually added in. We should update controller-gen
                        # to handle []*int properly itself.
                        nullable: true
                      type: array
                    attributes:
                      items:
                        properties:
                          handle_id:
                            type: string
                          secondary:
                            additionalProperties:
                              type: string
                            type: object
                        type: object
                      type: array
                    cidr:
                      type: string
                    deleted:
                      type: boolean
                    strictAffinity:
                      type: boolean
                    unallocated:
                      items:
                        type: integer
                      type: array
                  required:
                    - allocations
                    - attributes
                    - cidr
                    - deleted
                    - strictAffinity
                    - unallocated
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: ipamconfigs.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMConfig
        listKind: IPAMConfigList
        plural: ipamconfigs
        singular: ipamconfig
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: IPAMConfigSpec contains the specification for an IPAMConfig
                    resource.
                  properties:
                    autoAllocateBlocks:
                      type: boolean
                    strictAffinity:
                      type: boolean
                  required:
                    - autoAllocateBlocks
                    - strictAffinity
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: ipamhandles.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMHandle
        listKind: IPAMHandleList
        plural: ipamhandles
        singular: ipamhandle
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: IPAMHandleSpec contains the specification for an IPAMHandle
                    resource.
                  properties:
                    block:
                      additionalProperties:
                        type: integer
                      type: object
                    handleID:
                      type: string
                  required:
                    - block
                    - handleID
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: ippools.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPPool
        listKind: IPPoolList
        plural: ippools
        singular: ippool
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: IPPoolSpec contains the specification for an IPPool resource.
                  properties:
                    blockSize:
                      description: The block size to use for IP address assignments from
                        this pool. Defaults to 26 for IPv4 and 112 for IPv6.
                      type: integer
                    cidr:
                      description: The pool CIDR.
                      type: string
                    disabled:
                      description: When disabled is true, Calico IPAM will not assign addresses
                        from this pool.
                      type: boolean
                    ipip:
                      description: 'Deprecated: this field is only used for APIv1 backwards
                      compatibility. Setting this field is not allowed, this field is
                      for internal use only.'
                      properties:
                        enabled:
                          description: When enabled is true, ipip tunneling will be used
                            to deliver packets to destinations within this pool.
                          type: boolean
                        mode:
                          description: The IPIP mode.  This can be one of "always" or "cross-subnet".  A
                            mode of "always" will also use IPIP tunneling for routing to
                            destination IP addresses within this pool.  A mode of "cross-subnet"
                            will only use IPIP tunneling when the destination node is on
                            a different subnet to the originating node.  The default value
                            (if not specified) is "always".
                          type: string
                      type: object
                    ipipMode:
                      description: Contains configuration for IPIP tunneling for this pool.
                        If not specified, then this is defaulted to "Never" (i.e. IPIP tunneling
                        is disabled).
                      type: string
                    nat-outgoing:
                      description: 'Deprecated: this field is only used for APIv1 backwards
                      compatibility. Setting this field is not allowed, this field is
                      for internal use only.'
                      type: boolean
                    natOutgoing:
                      description: When nat-outgoing is true, packets sent from Calico networked
                        containers in this pool to destinations outside of this pool will
                        be masqueraded.
                      type: boolean
                    nodeSelector:
                      description: Allows IPPool to allocate for a specific node by label
                        selector.
                      type: string
                    vxlanMode:
                      description: Contains configuration for VXLAN tunneling for this pool.
                        If not specified, then this is defaulted to "Never" (i.e. VXLAN
                        tunneling is disabled).
                      type: string
                  required:
                    - cidr
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: kubecontrollersconfigurations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: KubeControllersConfiguration
        listKind: KubeControllersConfigurationList
        plural: kubecontrollersconfigurations
        singular: kubecontrollersconfiguration
      scope: Cluster
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: KubeControllersConfigurationSpec contains the values of the
                    Kubernetes controllers configuration.
                  properties:
                    controllers:
                      description: Controllers enables and configures individual Kubernetes
                        controllers
                      properties:
                        namespace:
                          description: Namespace enables and configures the namespace controller.
                            Enabled by default, set to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                              type: string
                          type: object
                        node:
                          description: Node enables and configures the node controller.
                            Enabled by default, set to nil to disable.
                          properties:
                            hostEndpoint:
                              description: HostEndpoint controls syncing nodes to host endpoints.
                                Disabled by default, set to nil to disable.
                              properties:
                                autoCreate:
                                  description: 'AutoCreate enables automatic creation of
                                  host endpoints for every node. [Default: Disabled]'
                                  type: string
                              type: object
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                              type: string
                            syncLabels:
                              description: 'SyncLabels controls whether to copy Kubernetes
                              node labels to Calico nodes. [Default: Enabled]'
                              type: string
                          type: object
                        policy:
                          description: Policy enables and configures the policy controller.
                            Enabled by default, set to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                              type: string
                          type: object
                        serviceAccount:
                          description: ServiceAccount enables and configures the service
                            account controller. Enabled by default, set to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                              type: string
                          type: object
                        workloadEndpoint:
                          description: WorkloadEndpoint enables and configures the workload
                            endpoint controller. Enabled by default, set to nil to disable.
                          properties:
                            reconcilerPeriod:
                              description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                              type: string
                          type: object
                      type: object
                    etcdV3CompactionPeriod:
                      description: 'EtcdV3CompactionPeriod is the period between etcdv3
                      compaction requests. Set to 0 to disable. [Default: 10m]'
                      type: string
                    healthChecks:
                      description: 'HealthChecks enables or disables support for health
                      checks [Default: Enabled]'
                      type: string
                    logSeverityScreen:
                      description: 'LogSeverityScreen is the log severity above which logs
                      are sent to the stdout. [Default: Info]'
                      type: string
                  required:
                    - controllers
                  type: object
                status:
                  description: KubeControllersConfigurationStatus represents the status
                    of the configuration. It's useful for admins to be able to see the actual
                    config that was applied, which can be modified by environment variables
                    on the kube-controllers process.
                  properties:
                    environmentVars:
                      additionalProperties:
                        type: string
                      description: EnvironmentVars contains the environment variables on
                        the kube-controllers that influenced the RunningConfig.
                      type: object
                    runningConfig:
                      description: RunningConfig contains the effective config that is running
                        in the kube-controllers pod, after merging the API resource with
                        any environment variables.
                      properties:
                        controllers:
                          description: Controllers enables and configures individual Kubernetes
                            controllers
                          properties:
                            namespace:
                              description: Namespace enables and configures the namespace
                                controller. Enabled by default, set to nil to disable.
                              properties:
                                reconcilerPeriod:
                                  description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                  type: string
                              type: object
                            node:
                              description: Node enables and configures the node controller.
                                Enabled by default, set to nil to disable.
                              properties:
                                hostEndpoint:
                                  description: HostEndpoint controls syncing nodes to host
                                    endpoints. Disabled by default, set to nil to disable.
                                  properties:
                                    autoCreate:
                                      description: 'AutoCreate enables automatic creation
                                      of host endpoints for every node. [Default: Disabled]'
                                      type: string
                                  type: object
                                reconcilerPeriod:
                                  description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                  type: string
                                syncLabels:
                                  description: 'SyncLabels controls whether to copy Kubernetes
                                  node labels to Calico nodes. [Default: Enabled]'
                                  type: string
                              type: object
                            policy:
                              description: Policy enables and configures the policy controller.
                                Enabled by default, set to nil to disable.
                              properties:
                                reconcilerPeriod:
                                  description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                  type: string
                              type: object
                            serviceAccount:
                              description: ServiceAccount enables and configures the service
                                account controller. Enabled by default, set to nil to disable.
                              properties:
                                reconcilerPeriod:
                                  description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                  type: string
                              type: object
                            workloadEndpoint:
                              description: WorkloadEndpoint enables and configures the workload
                                endpoint controller. Enabled by default, set to nil to disable.
                              properties:
                                reconcilerPeriod:
                                  description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                  type: string
                              type: object
                          type: object
                        etcdV3CompactionPeriod:
                          description: 'EtcdV3CompactionPeriod is the period between etcdv3
                          compaction requests. Set to 0 to disable. [Default: 10m]'
                          type: string
                        healthChecks:
                          description: 'HealthChecks enables or disables support for health
                          checks [Default: Enabled]'
                          type: string
                        logSeverityScreen:
                          description: 'LogSeverityScreen is the log severity above which
                          logs are sent to the stdout. [Default: Info]'
                          type: string
                      required:
                        - controllers
                      type: object
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: networkpolicies.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: NetworkPolicy
        listKind: NetworkPolicyList
        plural: networkpolicies
        singular: networkpolicy
      scope: Namespaced
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  properties:
                    egress:
                      description: The ordered set of egress rules.  Each rule contains
                        a set of packet match criteria and a corresponding action to apply.
                      items:
                        description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with ”Not”. All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                        properties:
                          action:
                            type: string
                          destination:
                            description: Destination contains the match criteria that apply
                              to destination entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                          http:
                            description: HTTP contains match criteria that apply to HTTP
                              requests.
                            properties:
                              methods:
                                description: Methods is an optional field that restricts
                                  the rule to apply only to HTTP requests that use one of
                                  the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                  methods are OR'd together.
                                items:
                                  type: string
                                type: array
                              paths:
                                description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                                items:
                                  description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                  properties:
                                    exact:
                                      type: string
                                    prefix:
                                      type: string
                                  type: object
                                type: array
                            type: object
                          icmp:
                            description: ICMP is an optional field that restricts the rule
                              to apply to a specific type and code of ICMP traffic.  This
                              should only be specified if the Protocol field is set to "ICMP"
                              or "ICMPv6".
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          ipVersion:
                            description: IPVersion is an optional field that restricts the
                              rule to only match a specific IP version.
                            type: integer
                          metadata:
                            description: Metadata contains additional information for this
                              rule
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: Annotations is a set of key value pairs that
                                  give extra information about the rule
                                type: object
                            type: object
                          notICMP:
                            description: NotICMP is the negated version of the ICMP field.
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          notProtocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: NotProtocol is the negated version of the Protocol
                              field.
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          protocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          source:
                            description: Source contains the match criteria that apply to
                              source entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                        required:
                          - action
                        type: object
                      type: array
                    ingress:
                      description: The ordered set of ingress rules.  Each rule contains
                        a set of packet match criteria and a corresponding action to apply.
                      items:
                        description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with ”Not”. All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                        properties:
                          action:
                            type: string
                          destination:
                            description: Destination contains the match criteria that apply
                              to destination entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                          http:
                            description: HTTP contains match criteria that apply to HTTP
                              requests.
                            properties:
                              methods:
                                description: Methods is an optional field that restricts
                                  the rule to apply only to HTTP requests that use one of
                                  the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                  methods are OR'd together.
                                items:
                                  type: string
                                type: array
                              paths:
                                description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                                items:
                                  description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                  properties:
                                    exact:
                                      type: string
                                    prefix:
                                      type: string
                                  type: object
                                type: array
                            type: object
                          icmp:
                            description: ICMP is an optional field that restricts the rule
                              to apply to a specific type and code of ICMP traffic.  This
                              should only be specified if the Protocol field is set to "ICMP"
                              or "ICMPv6".
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          ipVersion:
                            description: IPVersion is an optional field that restricts the
                              rule to only match a specific IP version.
                            type: integer
                          metadata:
                            description: Metadata contains additional information for this
                              rule
                            properties:
                              annotations:
                                additionalProperties:
                                  type: string
                                description: Annotations is a set of key value pairs that
                                  give extra information about the rule
                                type: object
                            type: object
                          notICMP:
                            description: NotICMP is the negated version of the ICMP field.
                            properties:
                              code:
                                description: Match on a specific ICMP code.  If specified,
                                  the Type value must also be specified. This is a technical
                                  limitation imposed by the kernel’s iptables firewall,
                                  which Calico uses to enforce the rule.
                                type: integer
                              type:
                                description: Match on a specific ICMP type.  For example
                                  a value of 8 refers to ICMP Echo Request (i.e. pings).
                                type: integer
                            type: object
                          notProtocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: NotProtocol is the negated version of the Protocol
                              field.
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          protocol:
                            anyOf:
                              - type: integer
                              - type: string
                            description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                            pattern: ^.*
                            x-kubernetes-int-or-string: true
                          source:
                            description: Source contains the match criteria that apply to
                              source entity.
                            properties:
                              namespaceSelector:
                                description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and Selector are defined on the same rule, then only workload
                                endpoints that are matched by both selectors will be selected
                                by the rule. \n For NetworkPolicy, an empty NamespaceSelector
                                implies that the Selector is limited to selecting only
                                workload endpoints in the same namespace as the NetworkPolicy.
                                \n For NetworkPolicy, `global()` NamespaceSelector implies
                                that the Selector is limited to selecting only GlobalNetworkSet
                                or HostEndpoint. \n For GlobalNetworkPolicy, an empty
                                NamespaceSelector implies the Selector applies to workload
                                endpoints across all namespaces."
                                type: string
                              nets:
                                description: Nets is an optional field that restricts the
                                  rule to only apply to traffic that originates from (or
                                  terminates at) IP addresses in any of the given subnets.
                                items:
                                  type: string
                                type: array
                              notNets:
                                description: NotNets is the negated version of the Nets
                                  field.
                                items:
                                  type: string
                                type: array
                              notPorts:
                                description: NotPorts is the negated version of the Ports
                                  field. Since only some protocols have ports, if any ports
                                  are specified it requires the Protocol match in the Rule
                                  to be set to "TCP" or "UDP".
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              notSelector:
                                description: NotSelector is the negated version of the Selector
                                  field.  See Selector field for subtleties with negated
                                  selectors.
                                type: string
                              ports:
                                description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                                items:
                                  anyOf:
                                    - type: integer
                                    - type: string
                                  pattern: ^.*
                                  x-kubernetes-int-or-string: true
                                type: array
                              selector:
                                description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label “my_label”. \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label “my_label”.
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                                type: string
                              serviceAccounts:
                                description: ServiceAccounts is an optional field that restricts
                                  the rule to only apply to traffic that originates from
                                  (or terminates at) a pod running as a matching service
                                  account.
                                properties:
                                  names:
                                    description: Names is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account whose name is in the list.
                                    items:
                                      type: string
                                    type: array
                                  selector:
                                    description: Selector is an optional field that restricts
                                      the rule to only apply to traffic that originates
                                      from (or terminates at) a pod running as a service
                                      account that matches the given label selector. If
                                      both Names and Selector are specified then they are
                                      AND'ed.
                                    type: string
                                type: object
                            type: object
                        required:
                          - action
                        type: object
                      type: array
                    order:
                      description: Order is an optional field that specifies the order in
                        which the policy is applied. Policies with higher "order" are applied
                        after those with lower order.  If the order is omitted, it may be
                        considered to be "infinite" - i.e. the policy will be applied last.  Policies
                        with identical order will be applied in alphanumerical order based
                        on the Policy "Name".
                      type: number
                    selector:
                      description: "The selector is an expression used to pick pick out
                      the endpoints that the policy should be applied to. \n Selector
                      expressions follow this syntax: \n \tlabel == \"string_literal\"
                      \ ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"
                      \  ->  not equal; also matches if label is not present \tlabel in
                      { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is
                      one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\",
                      ... }  ->  true if the value of label X is not one of \"a\", \"b\",
                      \"c\" \thas(label_name)  -> True if that label is present \t! expr
                      -> negation of expr \texpr && expr  -> Short-circuit and \texpr
                      || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall()
                      or the empty selector -> matches all endpoints. \n Label names are
                      allowed to contain alphanumerics, -, _ and /. String literals are
                      more permissive but they do not support escape characters. \n Examples
                      (with made-up labels): \n \ttype == \"webserver\" && deployment
                      == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment !=
                      \"dev\" \t! has(label_name)"
                      type: string
                    serviceAccountSelector:
                      description: ServiceAccountSelector is an optional field for an expression
                        used to select a pod based on service accounts.
                      type: string
                    types:
                      description: "Types indicates whether this policy applies to ingress,
                      or to egress, or to both.  When not explicitly specified (and so
                      the value on creation is empty or nil), Calico defaults Types according
                      to what Ingress and Egress are present in the policy.  The default
                      is: \n - [ PolicyTypeIngress ], if there are no Egress rules (including
                      the case where there are   also no Ingress rules) \n - [ PolicyTypeEgress
                      ], if there are Egress rules but no Ingress rules \n - [ PolicyTypeIngress,
                      PolicyTypeEgress ], if there are both Ingress and Egress rules.
                      \n When the policy is read back again, Types will always be one
                      of these values, never empty or nil."
                      items:
                        description: PolicyType enumerates the possible values of the PolicySpec
                          Types field.
                        type: string
                      type: array
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: networksets.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: NetworkSet
        listKind: NetworkSetList
        plural: networksets
        singular: networkset
      scope: Namespaced
      versions:
        - name: v1
          schema:
            openAPIV3Schema:
              description: NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.
              properties:
                apiVersion:
                  description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                  type: string
                kind:
                  description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                metadata:
                  type: object
                spec:
                  description: NetworkSetSpec contains the specification for a NetworkSet
                    resource.
                  properties:
                    nets:
                      description: The list of IP networks that belong to this set.
                      items:
                        type: string
                      type: array
                  type: object
              type: object
          served: true
          storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    ---
    # Source: calico/templates/calico-kube-controllers-rbac.yaml

    # Include a clusterrole for the kube-controllers component,
    # and bind it to the calico-kube-controllers serviceaccount.
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: calico-kube-controllers
    rules:
      # Nodes are watched to monitor for deletions.
      - apiGroups: [""]
        resources:
          - nodes
        verbs:
          - watch
          - list
          - get
      # Pods are queried to check for existence.
      - apiGroups: [""]
        resources:
          - pods
        verbs:
          - get
      # IPAM resources are manipulated when nodes are deleted.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - ippools
        verbs:
          - list
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - blockaffinities
          - ipamblocks
          - ipamhandles
        verbs:
          - get
          - list
          - create
          - update
          - delete
      # kube-controllers manages hostendpoints.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - hostendpoints
        verbs:
          - get
          - list
          - create
          - update
          - delete
      # Needs access to update clusterinformations.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - clusterinformations
        verbs:
          - get
          - create
          - update
      # KubeControllersConfiguration is where it gets its config
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - kubecontrollersconfigurations
        verbs:
          # read its own config
          - get
          # create a default if none exists
          - create
          # update status
          - update
          # watch for changes
          - watch
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: calico-kube-controllers
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: calico-kube-controllers
    subjects:
      - kind: ServiceAccount
        name: calico-kube-controllers
        namespace: kube-system
    ---

    ---
    # Source: calico/templates/calico-node-rbac.yaml
    # Include a clusterrole for the calico-node DaemonSet,
    # and bind it to the calico-node serviceaccount.
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: calico-node
    rules:
      # The CNI plugin needs to get pods, nodes, and namespaces.
      - apiGroups: [""]
        resources:
          - pods
          - nodes
          - namespaces
        verbs:
          - get
      - apiGroups: [""]
        resources:
          - secrets
        verbs:
          # Needed when configuring bgp password in bgppeer
          - watch
          - list
          - get
      - apiGroups: [""]
        resources:
          - endpoints
          - services
        verbs:
          # Used to discover service IPs for advertisement.
          - watch
          - list
          # Used to discover Typhas.
          - get
      # Pod CIDR auto-detection on kubeadm needs access to config maps.
      - apiGroups: [""]
        resources:
          - configmaps
        verbs:
          - get
      - apiGroups: [""]
        resources:
          - nodes/status
        verbs:
          # Needed for clearing NodeNetworkUnavailable flag.
          - patch
          # Calico stores some configuration information in node annotations.
          - update
      # Watch for changes to Kubernetes NetworkPolicies.
      - apiGroups: ["networking.k8s.io"]
        resources:
          - networkpolicies
        verbs:
          - watch
          - list
      # Used by Calico for policy information.
      - apiGroups: [""]
        resources:
          - pods
          - namespaces
          - serviceaccounts
        verbs:
          - list
          - watch
      # The CNI plugin patches pods/status.
      - apiGroups: [""]
        resources:
          - pods/status
        verbs:
          - patch
      # Calico monitors various CRDs for config.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - globalfelixconfigs
          - felixconfigurations
          - bgppeers
          - globalbgpconfigs
          - bgpconfigurations
          - ippools
          - ipamblocks
          - globalnetworkpolicies
          - globalnetworksets
          - networkpolicies
          - networksets
          - clusterinformations
          - hostendpoints
          - blockaffinities
        verbs:
          - get
          - list
          - watch
      # Calico must create and update some CRDs on startup.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - ippools
          - felixconfigurations
          - clusterinformations
        verbs:
          - create
          - update
      # Calico stores some configuration information on the node.
      - apiGroups: [""]
        resources:
          - nodes
        verbs:
          - get
          - list
          - watch
      # These permissions are only required for upgrade from v2.6, and can
      # be removed after upgrade or on fresh installations.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - bgpconfigurations
          - bgppeers
        verbs:
          - create
          - update
      # These permissions are required for Calico CNI to perform IPAM allocations.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - blockaffinities
          - ipamblocks
          - ipamhandles
        verbs:
          - get
          - list
          - create
          - update
          - delete
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - ipamconfigs
        verbs:
          - get
      # Block affinities must also be watchable by confd for route aggregation.
      - apiGroups: ["crd.projectcalico.org"]
        resources:
          - blockaffinities
        verbs:
          - watch
      # The Calico IPAM migration needs to get daemonsets. These permissions can be
      # removed if not upgrading from an installation using host-local IPAM.
      - apiGroups: ["apps"]
        resources:
          - daemonsets
        verbs:
          - get

    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: calico-node
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: calico-node
    subjects:
      - kind: ServiceAccount
        name: calico-node
        namespace: kube-system

    ---
    # Source: calico/templates/calico-node.yaml
    # This manifest installs the calico-node container, as well
    # as the CNI plugins and network config on
    # each master and worker node in a Kubernetes cluster.
    kind: DaemonSet
    apiVersion: apps/v1
    metadata:
      name: calico-node
      namespace: kube-system
      labels:
        k8s-app: calico-node
    spec:
      selector:
        matchLabels:
          k8s-app: calico-node
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
      template:
        metadata:
          labels:
            k8s-app: calico-node
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          hostNetwork: true
          tolerations:
            # Make sure calico-node gets scheduled on all nodes.
            - effect: NoSchedule
              operator: Exists
            # Mark the pod as a critical add-on for rescheduling.
            - key: CriticalAddonsOnly
              operator: Exists
            - effect: NoExecute
              operator: Exists
          serviceAccountName: calico-node
          # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
          # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
          terminationGracePeriodSeconds: 0
          priorityClassName: system-node-critical
          initContainers:
            # This container performs upgrade from host-local IPAM to calico-ipam.
            # It can be deleted if this is a fresh installation, or if you have already
            # upgraded to use calico-ipam.
            - name: upgrade-ipam
              image: calico/cni:v3.16.3
              command: ["/opt/cni/bin/calico-ipam", "-upgrade"]
              envFrom:
                - configMapRef:
                    # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
                    name: kubernetes-services-endpoint
                    optional: true
              env:
                - name: KUBERNETES_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: CALICO_NETWORKING_BACKEND
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: calico_backend
              volumeMounts:
                - mountPath: /var/lib/cni/networks
                  name: host-local-net-dir
                - mountPath: /host/opt/cni/bin
                  name: cni-bin-dir
              securityContext:
                privileged: true
            # This container installs the CNI binaries
            # and CNI network config file on each node.
            - name: install-cni
              image: calico/cni:v3.16.3
              command: ["/opt/cni/bin/install"]
              envFrom:
                - configMapRef:
                    # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
                    name: kubernetes-services-endpoint
                    optional: true
              env:
                # Name of the CNI config file to create.
                - name: CNI_CONF_NAME
                  value: "10-calico.conflist"
                # The CNI network config to install on each node.
                - name: CNI_NETWORK_CONFIG
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: cni_network_config
                # Set the hostname based on the k8s node name.
                - name: KUBERNETES_NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                # CNI MTU Config variable
                - name: CNI_MTU
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: veth_mtu
                # Prevents the container from sleeping forever.
                - name: SLEEP
                  value: "false"
              volumeMounts:
                - mountPath: /host/opt/cni/bin
                  name: cni-bin-dir
                - mountPath: /host/etc/cni/net.d
                  name: cni-net-dir
              securityContext:
                privileged: true
            # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes
            # to communicate with Felix over the Policy Sync API.
            - name: flexvol-driver
              image: calico/pod2daemon-flexvol:v3.16.3
              volumeMounts:
                - name: flexvol-driver-host
                  mountPath: /host/driver
              securityContext:
                privileged: true
          containers:
            # Runs calico-node container on each Kubernetes node. This
            # container programs network policy and routes on each
            # host.
            - name: calico-node
              image: calico/node:v3.16.3
              envFrom:
                - configMapRef:
                    # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
                    name: kubernetes-services-endpoint
                    optional: true
              env:
                # Use Kubernetes API as the backing datastore.
                - name: DATASTORE_TYPE
                  value: "kubernetes"
                # Wait for the datastore.
                - name: WAIT_FOR_DATASTORE
                  value: "true"
                # Set based on the k8s node name.
                - name: NODENAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                # Choose the backend to use.
                - name: CALICO_NETWORKING_BACKEND
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: calico_backend
                # Cluster type to identify the deployment type
                - name: CLUSTER_TYPE
                  value: "k8s,bgp"
                # Auto-detect the BGP IP address.
                - name: IP
                  value: "autodetect"
                # Enable VXLAN
                - name: CALICO_IPV4POOL_VXLAN
                  value: "Always"
                # Set MTU for tunnel device used if ipip is enabled
                - name: FELIX_IPINIPMTU
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: veth_mtu
                # Set MTU for the VXLAN tunnel device.
                - name: FELIX_VXLANMTU
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: veth_mtu
                # Set MTU for the Wireguard tunnel device.
                - name: FELIX_WIREGUARDMTU
                  valueFrom:
                    configMapKeyRef:
                      name: calico-config
                      key: veth_mtu
                # The default IPv4 pool to create on startup if none exists. Pod IPs will be
                # chosen from this range. Changing this value after installation will have
                # no effect. This should fall within `--cluster-cidr`.
                # - name: CALICO_IPV4POOL_CIDR
                #   value: "192.168.0.0/16"
                # Disable file logging so `kubectl logs` works.
                - name: CALICO_DISABLE_FILE_LOGGING
                  value: "true"
                # Set Felix endpoint to host default action to ACCEPT.
                - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
                  value: "ACCEPT"
                # Disable IPv6 on Kubernetes.
                - name: FELIX_IPV6SUPPORT
                  value: "false"
                # Set Felix logging to "info"
                - name: FELIX_LOGSEVERITYSCREEN
                  value: "info"
                - name: FELIX_HEALTHENABLED
                  value: "true"
              securityContext:
                privileged: true
              resources:
                requests:
                  cpu: 250m
              livenessProbe:
                exec:
                  command:
                    - /bin/calico-node
                    - -felix-live
                periodSeconds: 10
                initialDelaySeconds: 10
                failureThreshold: 6
              readinessProbe:
                exec:
                  command:
                    - /bin/calico-node
                    - -felix-ready
                periodSeconds: 10
              volumeMounts:
                - mountPath: /lib/modules
                  name: lib-modules
                  readOnly: true
                - mountPath: /run/xtables.lock
                  name: xtables-lock
                  readOnly: false
                - mountPath: /var/run/calico
                  name: var-run-calico
                  readOnly: false
                - mountPath: /var/lib/calico
                  name: var-lib-calico
                  readOnly: false
                - name: policysync
                  mountPath: /var/run/nodeagent
                # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
                # parent directory.
                - name: sysfs
                  mountPath: /sys/fs/
                  # Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.
                  # If the host is known to mount that filesystem already then Bidirectional can be omitted.
                  mountPropagation: Bidirectional
          volumes:
            # Used by calico-node.
            - name: lib-modules
              hostPath:
                path: /lib/modules
            - name: var-run-calico
              hostPath:
                path: /var/run/calico
            - name: var-lib-calico
              hostPath:
                path: /var/lib/calico
            - name: xtables-lock
              hostPath:
                path: /run/xtables.lock
                type: FileOrCreate
            - name: sysfs
              hostPath:
                path: /sys/fs/
                type: DirectoryOrCreate
            # Used to install CNI.
            - name: cni-bin-dir
              hostPath:
                path: /opt/cni/bin
            - name: cni-net-dir
              hostPath:
                path: /etc/cni/net.d
            # Mount in the directory for host-local IPAM allocations. This is
            # used when upgrading from host-local to calico-ipam, and can be removed
            # if not using the upgrade-ipam init container.
            - name: host-local-net-dir
              hostPath:
                path: /var/lib/cni/networks
            # Used to create per-pod Unix Domain Sockets
            - name: policysync
              hostPath:
                type: DirectoryOrCreate
                path: /var/run/nodeagent
            # Used to install Flex Volume Driver
            - name: flexvol-driver-host
              hostPath:
                type: DirectoryOrCreate
                path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
    ---

    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: calico-node
      namespace: kube-system

    ---
    # Source: calico/templates/calico-kube-controllers.yaml
    # See https://github.com/projectcalico/kube-controllers
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      # The controllers can only have a single active instance.
      replicas: 1
      selector:
        matchLabels:
          k8s-app: calico-kube-controllers
      strategy:
        type: Recreate
      template:
        metadata:
          name: calico-kube-controllers
          namespace: kube-system
          labels:
            k8s-app: calico-kube-controllers
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          tolerations:
            # Mark the pod as a critical add-on for rescheduling.
            - key: CriticalAddonsOnly
              operator: Exists
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
          serviceAccountName: calico-kube-controllers
          priorityClassName: system-cluster-critical
          containers:
            - name: calico-kube-controllers
              image: calico/kube-controllers:v3.16.3
              env:
                # Choose which controllers to run.
                - name: ENABLED_CONTROLLERS
                  value: node
                - name: DATASTORE_TYPE
                  value: kubernetes
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/check-status
                    - -r

    ---

    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: calico-kube-controllers
      namespace: kube-system

    ---
    # Source: calico/templates/calico-etcd-secrets.yaml

    ---
    # Source: calico/templates/calico-typha.yaml

    ---
    # Source: calico/templates/configure-canal.yaml
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: cni-${CLUSTER_NAME}-calico
  namespace: default
