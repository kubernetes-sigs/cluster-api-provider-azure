apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: ci-default
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: ci-default-kubeadm-control-plane
    machineInfrastructure:
      ref:
        kind: AzureMachineTemplate
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        name: ci-default-control-plane
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureClusterTemplate
      name: ci-default-azure-cluster
  workers:
    machineDeployments:
      - class: ci-default-worker
        template:
          bootstrap:
            ref:
              apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
              kind: KubeadmConfigTemplate
              name: ci-default-worker
          infrastructure:
            ref:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
              kind: AzureMachineTemplate
              name: ci-default-worker
        machineHealthCheck:
          maxUnhealthy: 100%
          unhealthyConditions:
            - type: E2ENodeUnhealthy
              status: "True"
              timeout: 30s
      - class: ci-default-worker-win
        template:
          bootstrap:
            ref:
              apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
              kind: KubeadmConfigTemplate
              name: ci-default-worker-win
          infrastructure:
            ref:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
              kind: AzureMachineTemplate
              name: ci-default-worker-win
        machineHealthCheck:
          maxUnhealthy: 100%
          unhealthyConditions:
            - type: E2ENodeUnhealthy
              status: "True"
              timeout: 30s
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: ci-default-kubeadm-control-plane
spec:
  template:
    spec:
      kubeadmConfigSpec:
        clusterConfiguration:
          apiServer:
            extraArgs:
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            extraVolumes:
              - hostPath: /etc/kubernetes/azure.json
                mountPath: /etc/kubernetes/azure.json
                name: cloud-config
                readOnly: true
            timeoutForControlPlane: 20m
          controllerManager:
            extraArgs:
              allocate-node-cidrs: "false"
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            extraVolumes:
              - hostPath: /etc/kubernetes/azure.json
                mountPath: /etc/kubernetes/azure.json
                name: cloud-config
                readOnly: true
          etcd:
            local:
              dataDir: /var/lib/etcddisk/etcd
              extraArgs:
                quota-backend-bytes: "8589934592"
        diskSetup:
          filesystems:
            - device: /dev/disk/azure/scsi1/lun0
              extraOpts:
                - -E
                - lazy_itable_init=1,lazy_journal_init=1
              filesystem: ext4
              label: etcd_disk
            - device: ephemeral0.1
              filesystem: ext4
              label: ephemeral0
              replaceFS: ntfs
          partitions:
            - device: /dev/disk/azure/scsi1/lun0
              layout: true
              overwrite: false
              tableType: gpt
        files:
          - contentFrom:
              secret:
                key: control-plane-azure.json
                name: replace_me
            owner: root:root
            path: /etc/kubernetes/azure.json
            permissions: "0644"
        initConfiguration:
          nodeRegistration:
            kubeletExtraArgs:
              azure-container-registry-config: /etc/kubernetes/azure.json
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            name: '{{ ds.meta_data["local_hostname"] }}'
        joinConfiguration:
          nodeRegistration:
            kubeletExtraArgs:
              azure-container-registry-config: /etc/kubernetes/azure.json
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            name: '{{ ds.meta_data["local_hostname"] }}'
        mounts:
          - - LABEL=etcd_disk
            - /var/lib/etcddisk
        postKubeadmCommands: [ ]
        preKubeadmCommands: [ ]
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterTemplate
metadata:
  name: ci-default-azure-cluster
spec:
  template:
    spec:
      additionalTags:
        replace_me_key: replace_me_val
      identityRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterIdentity
      location: replace_me
      networkSpec:
        subnets:
          - role: control-plane
          - natGateway:
              name: node-natgateway
            role: node
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ci-default-control-plane
spec:
  template:
    spec:
      dataDisks:
        - diskSizeGB: 256
          lun: 0
          nameSuffix: etcddisk
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ""
      vmSize: replace_me
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ci-default-worker
spec:
  template:
    spec:
      files:
        - contentFrom:
            secret:
              key: worker-node-azure.json
              name: replace_me
          owner: root:root
          path: /etc/kubernetes/azure.json
          permissions: "0644"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            azure-container-registry-config: /etc/kubernetes/azure.json
            cloud-config: /etc/kubernetes/azure.json
            cloud-provider: azure
          name: '{{ ds.meta_data["local_hostname"] }}'
      preKubeadmCommands: [ ]
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ci-default-worker
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: ""
      vmSize: replace_me
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: ci-default-worker-win
spec:
  template:
    spec:
      preKubeadmCommands: []
      postKubeadmCommands:
        - nssm set kubelet start SERVICE_AUTO_START
        - powershell C:/defender-exclude-calico.ps1
      joinConfiguration:
        nodeRegistration:
          name: '{{ ds.meta_data["local_hostname"] }}'
          criSocket: npipe:////./pipe/containerd-containerd
          kubeletExtraArgs:
            cloud-provider: azure
            cloud-config: 'c:/k/azure.json'
            azure-container-registry-config: 'c:/k/azure.json'
            feature-gates: "WindowsHostProcessContainers=true"
            v: "2"
            windows-priorityclass: "ABOVE_NORMAL_PRIORITY_CLASS"
      files:
        - contentFrom:
            secret:
              key: worker-node-azure.json
              name: replace_me
          owner: root:root
          path: c:/k/azure.json
          permissions: "0644"
        - path: C:/defender-exclude-calico.ps1
          permissions: "0744"
          content: |-
            Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
            Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico-ipam.exe
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name:  ci-default-worker-win
  annotations:
    runtime: containerd
spec:
  template:
    spec:
      osDisk:
        osType: "Windows"
        diskSizeGB: 128
        managedDisk:
          storageAccountType: "Premium_LRS"
      sshPublicKey: ""
      vmSize: replace_me