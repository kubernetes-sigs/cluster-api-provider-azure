apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni: calico
    cni-windows: ${CLUSTER_NAME}-calico
    containerd-logger: enabled
    csi-proxy: enabled
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  topology:
    class: ${CLUSTER_CLASS_NAME}
    controlPlane:
      replicas: ${CONTROL_PLANE_MACHINE_COUNT}
    variables:
    - name: subscriptionID
      value: ${AZURE_SUBSCRIPTION_ID}
    - name: controlPlaneMachineType
      value: ${AZURE_CONTROL_PLANE_MACHINE_TYPE:-""}
    - name: workerMachineType
      value: ${AZURE_NODE_MACHINE_TYPE:-""}
    - name: workerMachineTypeWin
      value: ${AZURE_NODE_MACHINE_TYPE:-""}
    - name: sshPublicKey
      value: ${AZURE_SSH_PUBLIC_KEY_B64:-""}
    - name: buildProvenance
      value: ${BUILD_PROVENANCE:-""}
    - name: timestamp
      value: ${TIMESTAMP:-""}
    - name: jobName
      value: ${JOB_NAME:-""}
    - name: clusterIdentityRef
      value: ${CLUSTER_IDENTITY_NAME}
    - name: location
      value: ${AZURE_LOCATION}
    - name: k8sFeatureGates
      value: ${K8S_FEATURE_GATES:-""}
    - name: logLevel
      value: "4"
    version: ${KUBERNETES_VERSION}
    workers:
      machineDeployments:
      - class: ${CLUSTER_NAME}-worker
        name: md-0
        replicas: ${WORKER_MACHINE_COUNT}
      - class: ${CLUSTER_NAME}-worker-win
        name: md-win
        replicas: ${WINDOWS_WORKER_MACHINE_COUNT:-0}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: ${CLUSTER_NAME}-calico
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      cni-windows: ${CLUSTER_NAME}-calico
  resources:
  - kind: ConfigMap
    name: cni-${CLUSTER_NAME}-calico-windows
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: csi-proxy
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      csi-proxy: enabled
  resources:
  - kind: ConfigMap
    name: csi-proxy-addon
  strategy: ApplyOnce
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: calico
  namespace: default
spec:
  chartName: tigera-operator
  clusterSelector:
    matchLabels:
      cni: calico
  namespace: tigera-operator
  releaseName: projectcalico
  repoURL: https://docs.tigera.io/calico/charts
  valuesTemplate: |-
    installation:
      cni:
        type: Calico
      calicoNetwork:
        bgp: Disabled
        mtu: 1350
        ipPools:
        ipPools:{{range $i, $cidr := .Cluster.spec.clusterNetwork.pods.cidrBlocks }}
        - cidr: {{ $cidr }}
          encapsulation: VXLAN{{end}}
      registry: mcr.microsoft.com/oss
    # Image and registry configuration for the tigera/operator pod.
    tigeraOperator:
      image: tigera/operator
      registry: mcr.microsoft.com/oss
    calicoctl:
      image: mcr.microsoft.com/oss/calico/ctl
  version: ${CALICO_VERSION}
---
apiVersion: v1
data:
  proxy: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: kube-proxy
      name: kube-proxy-windows
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: kube-proxy-windows
      template:
        metadata:
          labels:
            k8s-app: kube-proxy-windows
        spec:
          serviceAccountName: kube-proxy
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\system"
          hostNetwork: true
          containers:
          - image: sigwindowstools/kube-proxy:${KUBERNETES_VERSION/+/_}-calico-hostprocess
            args: ["$env:CONTAINER_SANDBOX_MOUNT_POINT/kube-proxy/start.ps1"]
            workingDir: "$env:CONTAINER_SANDBOX_MOUNT_POINT/kube-proxy/"
            name: kube-proxy
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBEPROXY_PATH
              valueFrom:
                configMapKeyRef:
                  name: windows-kubeproxy-ci
                  key: KUBEPROXY_PATH
                  optional: true
            volumeMounts:
            - mountPath: /var/lib/kube-proxy
              name: kube-proxy
          nodeSelector:
            kubernetes.io/os: windows
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - operator: Exists
          volumes:
          - configMap:
              name: kube-proxy
            name: kube-proxy
      updateStrategy:
        type: RollingUpdate
  windows-cni: "# strictAffinity required for windows\napiVersion: crd.projectcalico.org/v1\nkind:
    IPAMConfig\nmetadata:\n  name: default\nspec:\n  autoAllocateBlocks: true\n  strictAffinity:
    true\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-static-rules\n
    \ namespace: calico-system\n  labels:\n    tier: node\n    app: calico\ndata:\n
    \ static-rules.json: |\n    {\n      \"Provider\": \"azure\",\n      \"Version\":
    \"0.1\",\n      \"Rules\": [\n        {\n          \"Name\": \"EndpointPolicy\",\n
    \         \"Rule\": {\n              \"Id\": \"wireserver\",\n              \"Type\":
    \"ACL\",\n              \"Protocol\": 6,\n              \"Action\": \"Block\",\n
    \             \"Direction\": \"Out\",\n              \"RemoteAddresses\": \"168.63.129.16/32\",\n
    \             \"RemotePorts\": \"80\",\n              \"Priority\": 200,\n              \"RuleType\":
    \"Switch\"\n            }\n          }\n      ]\n    } \n---\nkind: ConfigMap\napiVersion:
    v1\nmetadata:\n  name: calico-config-windows\n  namespace: calico-system\n  labels:\n
    \   tier: node\n    app: calico\ndata:\n  veth_mtu: \"1350\"\n  \n  cni_network_config:
    |\n    {\n      \"name\": \"Calico\",\n      \"cniVersion\": \"0.3.1\",\n      \"plugins\":
    [\n        {\n          \"windows_use_single_network\": true,\n          \"type\":
    \"calico\",\n          \"mode\": \"vxlan\",\n          \"nodename\": \"__KUBERNETES_NODE_NAME__\",\n
    \         \"nodename_file_optional\": true,\n          \"log_file_path\": \"c:/cni.log\",\n
    \         \"log_level\": \"debug\",\n\n          \"vxlan_mac_prefix\": \"0E-2A\",\n
    \         \"vxlan_vni\": 4096,\n          \"mtu\": __CNI_MTU__,\n          \"policy\":
    {\n            \"type\": \"k8s\"\n          },\n\n          \"log_level\": \"info\",\n\n
    \         \"capabilities\": {\"dns\": true},\n          \"DNS\":  {\n            \"Search\":
    \ [\n              \"svc.cluster.local\"\n            ]\n          },\n\n          \"datastore_type\":
    \"kubernetes\",\n\n          \"kubernetes\": {\n            \"kubeconfig\": \"__KUBECONFIG_FILEPATH__\"\n
    \         },\n\n          \"ipam\": {\n            \"type\": \"calico-ipam\",\n
    \           \"subnet\": \"usePodCidr\"\n          },\n\n          \"policies\":
    \ [\n            {\n              \"Name\":  \"EndpointPolicy\",\n              \"Value\":
    \ {\n                \"Type\":  \"OutBoundNAT\",\n                \"ExceptionList\":
    \ [\n                  \"__K8S_SERVICE_CIDR__\"\n                ]\n              }\n
    \           },\n            {\n              \"Name\":  \"EndpointPolicy\",\n
    \             \"Value\":  {\n                \"Type\":  \"SDNROUTE\",\n                \"DestinationPrefix\":
    \ \"__K8S_SERVICE_CIDR__\",\n                \"NeedEncap\":  true\n              }\n
    \           }\n          ]\n        }\n      ]\n\n    }\n---\napiVersion: apps/v1\nkind:
    DaemonSet\nmetadata:\n  name: calico-node-windows\n  labels:\n    tier: node\n
    \   app: calico\n  namespace: calico-system\nspec:\n  selector:\n    matchLabels:\n
    \     app: calico\n  template:\n    metadata:\n      labels:\n        tier: node\n
    \       app: calico\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n
    \           nodeSelectorTerms:\n              - matchExpressions:\n                  -
    key: kubernetes.io/os\n                    operator: In\n                    values:\n
    \                     - windows\n                  - key: kubernetes.io/arch\n
    \                   operator: In\n                    values:\n                      -
    amd64\n      securityContext:\n        windowsOptions:\n          hostProcess:
    true\n          runAsUserName: \"NT AUTHORITY\\\\system\"\n      hostNetwork:
    true\n      serviceAccountName: calico-node\n      tolerations:\n      - operator:
    Exists\n        effect: NoSchedule\n        # Mark the pod as a critical add-on
    for rescheduling.\n      - key: CriticalAddonsOnly\n        operator: Exists\n
    \     - effect: NoExecute\n        operator: Exists\n      initContainers:\n        #
    This container installs the CNI binaries\n        # and CNI network config file
    on each node.\n        - name: install-cni\n          image: sigwindowstools/calico-install:v3.26.1-hostprocess\n
    \         args: [\"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/install.ps1\"]\n
    \         imagePullPolicy: Always\n          env:\n            # Name of the CNI
    config file to create.\n            - name: CNI_CONF_NAME\n              value:
    \"10-calico.conflist\"\n            # The CNI network config to install on each
    node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n
    \                 name: calico-config-windows\n                  key: cni_network_config\n
    \           # Set the hostname based on the k8s node name.\n            - name:
    KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath:
    spec.nodeName\n            # CNI MTU Config variable\n            - name: CNI_MTU\n
    \             valueFrom:\n                configMapKeyRef:\n                  name:
    calico-config-windows\n                  key: veth_mtu\n            # Prevents
    the container from sleeping forever.\n            - name: SLEEP\n              value:
    \"false\"\n            - name: K8S_SERVICE_CIDR\n              value: \"10.96.0.0/12\"\n
    \         volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name:
    cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name:
    cni-net-dir\n            - name: kubeadm-config\n              mountPath: /etc/kubeadm-config/\n
    \         securityContext:\n            windowsOptions:\n              hostProcess:
    true\n              runAsUserName: \"NT AUTHORITY\\\\system\"\n      containers:\n
    \     - name: calico-node-startup\n        image: sigwindowstools/calico-node:v3.26.1-hostprocess\n
    \       args: [\"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/node-service.ps1\"]\n
    \       workingDir: \"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/\"\n        imagePullPolicy:
    Always\n        volumeMounts:\n        - name: calico-config-windows\n          mountPath:
    /etc/kube-calico-windows/\n        env:\n        - name: POD_NAME\n          valueFrom:\n
    \           fieldRef:\n              apiVersion: v1\n              fieldPath:
    metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n
    \             apiVersion: v1\n              fieldPath: metadata.namespace\n        -
    name: CNI_IPAM_TYPE\n          value: \"calico-ipam\"\n        - name: CALICO_NETWORKING_BACKEND\n
    \         value: \"vxlan\"\n        - name: KUBECONFIG\n          value: \"C:/etc/cni/net.d/calico-kubeconfig\"\n
    \       - name: VXLAN_VNI\n          value: \"4096\"\n      - name: calico-node-felix\n
    \       image: sigwindowstools/calico-node:v3.26.1-hostprocess\n        args:
    [\"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/felix-service.ps1\"]\n        imagePullPolicy:
    Always\n        workingDir: \"$env:CONTAINER_SANDBOX_MOUNT_POINT/calico/\"\n        volumeMounts:\n
    \       - name: calico-config-windows\n          mountPath: /etc/kube-calico-windows/\n
    \       - name: calico-static-rules\n          mountPath: /calico/static-rules.json\n
    \         subPath: static-rules.json\n        env:\n        - name: POD_NAME\n
    \         valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath:
    metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n
    \             apiVersion: v1\n              fieldPath: metadata.namespace\n        -
    name: VXLAN_VNI\n          value: \"4096\"\n        - name: KUBECONFIG\n          value:
    \"C:/etc/cni/net.d/calico-kubeconfig\"\n      volumes:\n      - name: calico-config-windows\n
    \       configMap:\n          name: calico-config-windows\n      - name: calico-static-rules\n
    \       configMap:\n          name: calico-static-rules\n      # Used to install
    CNI.\n      - name: cni-bin-dir\n        hostPath:\n          path: /opt/cni/bin\n
    \     - name: cni-net-dir\n        hostPath:\n          path: /etc/cni/net.d\n
    \     - name: kubeadm-config\n        configMap:\n          name: kubeadm-config\n---\napiVersion:
    apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n
    \ group: crd.projectcalico.org\n  names:\n    kind: IPAMConfig\n    listKind:
    IPAMConfigList\n    plural: ipamconfigs\n    singular: ipamconfig\n  preserveUnknownFields:
    false\n  scope: Cluster\n  versions:\n  - name: v1\n    schema:\n      openAPIV3Schema:\n
    \       properties:\n          apiVersion:\n            description: 'APIVersion
    defines the versioned schema of this representation\n              of an object.
    Servers should convert recognized schemas to the latest\n              internal
    value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\n
    \           type: string\n          kind:\n            description: 'Kind is a
    string value representing the REST resource this\n              object represents.
    Servers may infer this from the endpoint the client\n              submits requests
    to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\n
    \           type: string\n          metadata:\n            type: object\n          spec:\n
    \           description: IPAMConfigSpec contains the specification for an IPAMConfig\n
    \             resource.\n            properties:\n              autoAllocateBlocks:\n
    \               type: boolean\n              maxBlocksPerHost:\n                description:
    MaxBlocksPerHost, if non-zero, is the max number of blocks\n                  that
    can be affine to each host.\n                maximum: 2147483647\n                minimum:
    0\n                type: integer\n              strictAffinity:\n                type:
    boolean\n            required:\n            - autoAllocateBlocks\n            -
    strictAffinity\n            type: object\n        type: object\n    served: true\n
    \   storage: true\nstatus:\n  acceptedNames:\n    kind: \"\"\n    plural: \"\"\n
    \ conditions: []\n  storedVersions: []\n"
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: cni-${CLUSTER_NAME}-calico-windows
  namespace: default
---
apiVersion: v1
data:
  csi-proxy: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        k8s-app: csi-proxy
      name: csi-proxy
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          k8s-app: csi-proxy
      template:
        metadata:
          labels:
            k8s-app: csi-proxy
        spec:
          nodeSelector:
            "kubernetes.io/os": windows
          securityContext:
            windowsOptions:
              hostProcess: true
              runAsUserName: "NT AUTHORITY\\SYSTEM"
          hostNetwork: true
          containers:
            - name: csi-proxy
              image: ghcr.io/kubernetes-sigs/sig-windows/csi-proxy:v1.0.2
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    type: generated
  name: csi-proxy-addon
  namespace: default
