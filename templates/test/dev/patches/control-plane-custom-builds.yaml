apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
kind: KubeadmControlPlane
metadata:
  name: "${CLUSTER_NAME}-control-plane"
  annotations:
    controlplane.cluster.x-k8s.io/skip-kube-proxy: "true"
spec:
  kubeadmConfigSpec:
    useExperimentalRetryJoin: true
    clusterConfiguration:
      kubernetesVersion: "ci/${CI_VERSION}"
    preKubeadmCommands:
    - bash -c /tmp/replace-k8s-binaries.sh
    postKubeadmCommands:
    - bash -c /tmp/replace-k8s-components.sh
    files:
    - path: /tmp/replace-k8s-binaries.sh
      owner: "root:root"
      permissions: "0744"
      content: |
        #!/bin/bash

        set -o nounset
        set -o pipefail
        set -o errexit

        systemctl stop kubelet
        declare -a BINARIES=("kubeadm" "kubectl" "kubelet")
        for BINARY in "$${BINARIES[@]}"; do
          echo "* installing package: $${BINARY} ${KUBE_GIT_VERSION}"
          curl --retry 10 --retry-delay 5 "https://${AZURE_STORAGE_ACCOUNT}.blob.core.windows.net/${JOB_NAME}/${KUBE_GIT_VERSION}/bin/linux/amd64/$${BINARY}" --output "/usr/bin/$${BINARY}"
        done
        systemctl restart kubelet

        # prepull images from gcr.io/k8s-staging-ci-images and retag it to
        # k8s.gcr.io so kubeadm can fetch correct images no matter what
        declare -a IMAGES=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""
        for IMAGE in "$${IMAGES[@]}"; do
          $${SUDO} ctr -n k8s.io images pull "gcr.io/k8s-staging-ci-images/$${IMAGE}:${CI_VERSION/+/_}"
          $${SUDO} ctr -n k8s.io images tag "gcr.io/k8s-staging-ci-images/$${IMAGE}:${CI_VERSION/+/_}" "k8s.gcr.io/$${IMAGE}:${CI_VERSION/+/_}"
        done

        echo "kubeadm version: $(kubeadm version -o=short)"
        echo "kubectl version: $(kubectl version --client=true --short=true)"
        echo "kubelet version: $(kubelet --version)"
    - path: /tmp/replace-k8s-components.sh
      owner: "root:root"
      permissions: "0744"
      content: |
        #!/bin/bash

        set -o nounset
        set -o pipefail
        set -o errexit

        curl -L --retry 10 --retry-delay 5 https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64.tar.gz --output /tmp/yq_linux_amd64.tar.gz
        tar -xzvf /tmp/yq_linux_amd64.tar.gz -C /tmp && mv /tmp/yq_linux_amd64 /usr/bin/yq
        rm /tmp/yq_linux_amd64.tar.gz

        export KUBECONFIG=/etc/kubernetes/admin.conf
        kubectl -n kube-system set image daemonset/kube-proxy kube-proxy="${REGISTRY}/kube-proxy:${IMAGE_TAG}"
        yq e '.spec.containers[0].image = "${REGISTRY}/kube-apiserver:${IMAGE_TAG}"' -i /etc/kubernetes/manifests/kube-apiserver.yaml
        yq e '.spec.containers[0].image = "${REGISTRY}/kube-controller-manager:${IMAGE_TAG}"' -i /etc/kubernetes/manifests/kube-controller-manager.yaml
        yq e '.spec.containers[0].image = "${REGISTRY}/kube-scheduler:${IMAGE_TAG}"' -i /etc/kubernetes/manifests/kube-scheduler.yaml
    - path: /etc/kubernetes/azure.json
      owner: "root:root"
      permissions: "0644"
      contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  template:
    spec:
      image:
        # we use the 1.18.8 image as a workaround there is no published marketplace image for k8s CI versions.
        # 1.18.8 binaries and images will get replaced to the desired version by the script above.
        marketplace:
          publisher: cncf-upstream
          offer: capi
          sku: k8s-1dot18dot8-ubuntu-1804
          version: "2020.08.17"
