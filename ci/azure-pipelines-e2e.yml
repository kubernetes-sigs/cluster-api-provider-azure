steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep status
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Check project dependencies'

- script: |
    sudo apt-get update && sudo apt-get install azure-cli
    az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET -t $TENANT_ID
    az account set -s $SUBSCRIPTION_ID
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    CLIENT_ID: $(AZURE_CLIENT_ID)
    CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    TENANT_ID: $(AZURE_TENANT_ID)  
  displayName: 'Prepare Azure CLI'

- script: |
    echo "Installing minikube..."
    curl -Lo minikube https://storage.googleapis.com/minikube/releases/$(MinikubeVersion)/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    echo "Installing kubeadm..."
    curl -Lo kubeadm https://storage.googleapis.com/kubernetes-release/release/$(KubernetesVersion)/bin/linux/amd64/kubeadm && chmod +x kubeadm && sudo mv kubeadm /usr/bin/
    echo "Installing kubectl..."     
    curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(KubernetesVersion)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  displayName: 'Prepare clusterctl dependencies'

- script: |
    sudo -E minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=$(KubernetesVersion) --feature-gates=CustomResourceSubresources=true --extra-config=apiserver.Authorization.Mode=RBAC
    sudo chown -R $USER $HOME/.kube
    sudo chgrp -R $USER $HOME/.kube
    sudo chown -R $USER $HOME/.minikube
    sudo chgrp -R $USER $HOME/.minikube
    # Update kube config
    minikube update-context
    
    # Update certs
    sed -i "s/certificate-authority.*/certificate-authority-data: $(cat $HOME/.minikube/ca.crt | base64 -w0)/" $HOME/.kube/config
    sed -i "s/client-certificate.*/client-certificate-data: $(cat $HOME/.minikube/client.crt | base64 -w0)/" $HOME/.kube/config
    sed -i "s/client-key.*/client-key-data: $(cat $HOME/.minikube/client.key | base64 -w0)/" $HOME/.kube/config
  displayName: 'Start and configure minikube'

- script: |
    # Copy config to etc/kubernetes
    sudo mkdir -p /etc/kubernetes
    sudo cp $HOME/.kube/config /etc/kubernetes/admin.conf
    sudo chown $USER:$USER /etc/kubernetes/admin.conf    
    # wait for nodes be ready and update node label
    JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; echo "waiting for node to become ready"; kubectl get nodes; done
    NODE=$(kubectl get nodes -o jsonpath="{range .items[*]}{@.metadata.name}{end}")
    kubectl label node ${NODE} node-role.kubernetes.io/master=
    # Give cluster-admin permissions to the default service account
    kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
    # Wait for kube-dns to be ready
    JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done    
    echo "Validating kubectl configuration..."
    kubectl cluster-info
  displayName: 'Configure kubernetes'

- script: |
    echo "Building Docker images for machine-controller and cluster-controller"
    make images_dev IMAGE_TAG=$(build.SourceVersion)
  workingDirectory: '$(modulePath)'
  displayName: 'Build Docker images for machine-controller and cluster-controller'

- script: |
    HUMAN_FRIENDLY_CLUSTER_NAME=ci-e2e RESOURCE_GROUP=ci-e2e-clusterapi CONTROLLER_VERSION=$(build.SourceVersion)-dev ./generate-yaml.sh
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    CLIENT_ID: $(AZURE_CLIENT_ID)
    CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    TENANT_ID: $(AZURE_TENANT_ID)
  workingDirectory: '$(modulePath)'
  displayName: "Generate manifests"

- script: |
    echo "Building clusterctl.."
    make clusterctl
  workingDirectory: '$(modulePath)'
  displayName: 'Build clusterctl'

- script: |
    echo "Running clusterctl to create clusters..."
    clusterctl create cluster --provider azure -m generatedconfigs/machines_no_node.yaml -c generatedconfigs/cluster.yaml -p generatedconfigs/provider-components.yaml --existing-bootstrap-cluster-kubeconfig /etc/kubernetes/admin.conf
  env:
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)    
  workingDirectory: '$(modulePath)'
  displayName: 'Run clusterctl'
  
- script: |
    set +e
    echo "Setting up sonobuoy"
    go get -u -v github.com/heptio/sonobuoy

    sonobuoy run --mode=quick

    echo "Waiting for sonobuoy to complete..."    
    until sonobuoy status
    do
      sleep 10
    done

    while true
    do
      STATUS=$(sonobuoy status)
      echo "queried status"
      echo ${STATUS} | grep -c "Sonobuoy has completed" && break
      sleep 10
    done

    sonobuoy status

    # fixes bug where results cant be retrieved
    until ls -l *_sonobuoy_*.tar.gz
    do
      sleep 10
      sonobuoy status
      sonobuoy retrieve
    done

    mkdir ./results; tar xzf *.tar.gz -C ./results
  displayName: 'Run sonobuoy'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'results' 
    artifactName: 'sonobuoy' 
    publishLocation: 'Container'
  displayName: "Publish sonobuoy output"

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit_*.xml' 
  displayName: "Publish junit test artifacts"

- script: |
    ci/get-master-kubeconfig.sh $(modulePath)
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    CLIENT_ID: $(AZURE_CLIENT_ID)
    CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    TENANT_ID: $(AZURE_TENANT_ID)
  workingDirectory: '$(modulePath)'
  displayName: "Copy kubeconfig to local path"

- script: |
    echo "Running e2e test cases"
    go test github.com/platform9/azure-provider/test/e2e -test.timeout 0 -v
  env:
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)
    KUBE_CONFIG: '$(modulePath)/kubeconfig'
  workingDirectory: '$(modulePath)'
  displayName: 'Run e2e test cases'

- script: |
    echo "Pushing azure-cluster-controller and azure-machine-controller to Docker Hub"
    docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
    make push_dev IMAGE_TAG=$(build.SourceVersion)
  env:
    DOCKER_USER: $(DOCKERHUB_USER)
    DOCKER_PASS: $(DOCKERHUB_PASS)
  workingDirectory: '$(modulePath)'
  displayName: 'Push dev azure-cluster-controller and azure-machine-controller images'

- script: |
    ci/cleanup-e2e.sh $(modulePath)
  condition: always()
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
  workingDirectory: '$(modulePath)'
  displayName: "Cleanup E2E resources"
