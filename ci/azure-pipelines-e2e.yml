steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep status
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Check project dependencies'

- script: |
    sudo apt-get update && sudo apt-get install azure-cli
    az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET -t $TENANT_ID
    az account set -s $SUBSCRIPTION_ID
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    CLIENT_ID: $(AZURE_CLIENT_ID)
    CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    TENANT_ID: $(AZURE_TENANT_ID)  
  displayName: 'Prepare Azure CLI'

- script: |
    echo "Installing kubectl..."     
    sudo curl -L https://storage.googleapis.com/kubernetes-release/release/$(KubernetesVersion)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && sudo chmod +x /usr/local/bin/kubectl
    echo "Installing kustomize..."
    sudo curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/v$(KustomizeVersion)/kustomize_$(KustomizeVersion)_linux_amd64 -o /usr/local/bin/kustomize && sudo chmod +x /usr/local/bin/kustomize
  displayName: 'Prepare dependencies'

- script: |
    # fix kube-dns issues
    sudo mount --make-rshared /
    # start dind-cluster
    ci/dind-cluster-v$(KubeadmDindVersion).sh up   
    echo "Validating kubectl configuration..."
    kubectl cluster-info
  displayName: 'Start kubeadm-dind'
  workingDirectory: '$(modulePath)'

- script: |
    echo "Building Docker images for cluster-api-azure-provider-controller"
    make docker-build-dev TAG=$(build.SourceVersion)
    docker tag platform9/cluster-api-azure-provider-controller:$(build.SourceVersion)-dev localhost:5000/cluster-api-azure-provider-controller:$(build.SourceVersion)-dev
  workingDirectory: '$(modulePath)'
  displayName: 'Build Docker images for cluster-api-azure-provider-controller'

- script: |
    docker run -d -p 5000:5000 --restart=always --name registry registry:2
    docker push localhost:5000/cluster-api-azure-provider-controller:$(build.SourceVersion)-dev
  displayName: 'Run local docker registry and push controller image'

- script: |
    docker ps -a -q --filter=label=mirantis.kubeadm_dind_cluster | while read container_id; do
    docker exec ${container_id} /bin/bash -c "docker rm -fv registry-proxy || true"
    docker exec ${container_id} /bin/bash -c \
      "docker run --name registry-proxy -d -e LISTEN=':5000' -e TALK=\"\$(/sbin/ip route|awk '/default/ { print \$3 }'):5000\" -p 5000:5000 tecnativa/tcp-proxy"
    done
  displayName: 'Setup tcp proxy to forward the nodes localhost'

- script: |
    set -e
    IMG="localhost:5000/cluster-api-azure-provider-controller:$(build.SourceVersion)-dev"
    sed -i'' -e 's@image: .*@image: '"${IMG}"'@' $(modulePath)/config/default/manager_image_patch.yaml
    HUMAN_FRIENDLY_CLUSTER_NAME=ci-e2e RESOURCE_GROUP=ci-e2e-clusterapi ./generate-yaml.sh
    kustomize build $(modulePath)/config/default/ > out/provider-components.yaml
    echo "---" >> out/provider-components.yaml
    kustomize build $(modulePath)/vendor/sigs.k8s.io/cluster-api/config/default >> out/provider-components.yaml
    cat out/provider-components.yaml
  env:
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)
  workingDirectory: '$(modulePath)/cmd/clusterctl/examples/azure'
  displayName: "Generate manifests"

- script: |
    echo "Building clusterctl.."
    make clusterctl
  workingDirectory: '$(modulePath)'
  displayName: 'Build clusterctl'

- script: |
    echo "Copying kube config to /etc/kubernetes/admin.conf..."
    sudo mkdir -p /etc/kubernetes
    sudo cp $HOME/.kube/config /etc/kubernetes/admin.conf
    sudo chown $USER:$USER /etc/kubernetes/admin.conf
    echo "Running clusterctl to create clusters..."
    $(modulePath)/bin/clusterctl create cluster --provider azure -m out/machines_no_node.yaml -c out/cluster.yaml -p out/provider-components.yaml --existing-bootstrap-cluster-kubeconfig /etc/kubernetes/admin.conf
  env:
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)    
  workingDirectory: '$(modulePath)/cmd/clusterctl/examples/azure'
  displayName: 'Run clusterctl'
  
- script: |
    set +e
    echo "Setting up sonobuoy"
    go get -u -v github.com/heptio/sonobuoy

    sonobuoy run --mode=quick

    echo "Waiting for sonobuoy to complete..."    
    until sonobuoy status
    do
      sleep 10
    done

    while true
    do
      STATUS=$(sonobuoy status)
      echo "queried status"
      echo ${STATUS} | grep -c "Sonobuoy has completed" && break
      sleep 10
    done

    sonobuoy status

    # fixes bug where results cant be retrieved
    until ls -l *_sonobuoy_*.tar.gz
    do
      sleep 10
      sonobuoy status
      sonobuoy retrieve
    done

    mkdir ./results; tar xzf *.tar.gz -C ./results
  displayName: 'Run sonobuoy'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'results' 
    artifactName: 'sonobuoy' 
    publishLocation: 'Container'
  displayName: "Publish sonobuoy output"

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/junit_*.xml' 
  displayName: "Publish junit test artifacts"

- script: |
    ci/get-master-kubeconfig.sh $(modulePath)
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    CLIENT_ID: $(AZURE_CLIENT_ID)
    CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    TENANT_ID: $(AZURE_TENANT_ID)
  workingDirectory: '$(modulePath)'
  displayName: "Copy kubeconfig to local path"

- script: |
    echo "Running e2e test cases"
    go test github.com/platform9/azure-provider/test/e2e -test.timeout 0 -v
  env:
    AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
    AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
    AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
    AZURE_TENANT_ID: $(AZURE_TENANT_ID)
    KUBE_CONFIG: '$(modulePath)/kubeconfig'
  workingDirectory: '$(modulePath)'
  displayName: 'Run e2e test cases'

- script: |
    echo "Pushing cluster-api-azure-provider-controller to Docker Hub"
    docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
    make docker-push-dev TAG=$(build.SourceVersion)
  env:
    DOCKER_USER: $(DOCKERHUB_USER)
    DOCKER_PASS: $(DOCKERHUB_PASS)
  workingDirectory: '$(modulePath)'
  displayName: 'Push cluster-api-azure-provider-controller image'

- script: |
    ci/cleanup-e2e.sh $(modulePath)
  condition: always()
  env:
    SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
  workingDirectory: '$(modulePath)'
  displayName: "Cleanup E2E resources"
