name: Update Tool Versions

on:
    schedule:
      - cron: '0 0 * * 0'
    workflow_dispatch:

jobs:
    update-tools:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - uses: actions/checkout@v4

            - name: Install yq, jq and gh
              run: |
                sudo apt-get update && sudo apt-get install -y jq
                curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
                chmod +x /usr/local/bin/yq
                curl -sL https://github.com/cli/cli/releases/download/v2.49.0/gh_2.49.0_linux_amd64.tar.gz | tar xz
                sudo cp gh_*/bin/gh /usr/local/bin/

            - name: Create PRs for Updated Tools
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                set -euo pipefail
                file="hack/tools/tools.yaml"
                tools=$(yq eval '.tools | keys | .[]' $file)

                get_latest_release() {
                    local repo=$1
                    curl -s "https://api.github.com/repos/$repo/releases/latest" | jq -r .tag_name
                }

                get_setup_envtest_latest() {
                    curl -s https://api.github.com/repos/kubernetes-sigs/controller-runtime/git/matching-refs/tags/setup-envtest |
                    jq -r '.[-1].ref' | sed 's|refs/tags/setup-envtest/||' | xargs -I{} echo release-{}
                }

                declare -A repos=(
                    [controller-gen]="kubernetes-sigs/controller-tools"
                    [conversion-gen]="kubernetes/code-generator"
                    [envsubst]="drone/envsubst"
                    [golangci-lint]="golangci/golangci-lint"
                    [kustomize]="kubernetes-sigs/kustomize"
                    [azwi]="Azure/azure-workload-identity"
                    [mockgen]="golang/mock"
                    [release-notes]="kubernetes/release"
                    [kpromo]="kubernetes-sigs/kpromo"
                    [go-apidiff]="google/go-apidiff"
                    [ginkgo]="onsi/ginkgo"
                    [kubectl]="kubernetes/kubernetes"
                    [helm]="helm/helm"
                    [yq]="mikefarah/yq"
                    [kind]="kubernetes-sigs/kind"
                    [codespell]="codespell-project/codespell"
                    [setup-envtest]="setup-envtest"
                )

                for tool in "${!repos[@]}"; do
                    branch="update-tool-$tool"
                    repo="${repos[$tool]}"
                    current=$(yq ".tools.$tool" $file)

                    if [[ "$repo" == "setup-envtest" ]]; then
                    latest=$(get_setup_envtest_latest)
                    elif [[ "$tool" == "kubectl" ]]; then
                    latest="v$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)"
                    else
                    latest=$(get_latest_release $repo)
                    fi

                    if [[ "$current" != "$latest" ]]; then
                    echo "Updating $tool from $current to $latest"
                    git checkout -b "$branch"
                    yq -i ".tools.$tool = \"$latest\"" "$file"
                    git config user.name "github-actions[bot]"
                    git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
                    git add "$file"
                    git commit -m "chore: bump $tool to $latest"
                    git push origin "$branch"

                    gh pr create \
                        --title "chore: bump $tool to $latest" \
                        --body "This PR updates \`$tool\` from \`$current\` to \`$latest\`." \
                        --base main \
                        --head "$branch"
                    else
                    echo "$tool is already up to date ($current)"
                    fi

                    git checkout main
                    git reset --hard origin/main
                    git clean -fd
                done
